
12-StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00002f6c  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009c  0080009c  0000303c  2**0
                  ALLOC
  3 .stab         000024cc  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7c  00000000  00000000  00005508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006634  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000827d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a305  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <main>
      8a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e4       	ldi	r27, 0x40	; 64
     b6c:	8b 87       	std	Y+11, r24	; 0x0b
     b6e:	9c 87       	std	Y+12, r25	; 0x0c
     b70:	ad 87       	std	Y+13, r26	; 0x0d
     b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b74:	6b 85       	ldd	r22, Y+11	; 0x0b
     b76:	7c 85       	ldd	r23, Y+12	; 0x0c
     b78:	8d 85       	ldd	r24, Y+13	; 0x0d
     b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a ef       	ldi	r20, 0xFA	; 250
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	8f 83       	std	Y+7, r24	; 0x07
     b8e:	98 87       	std	Y+8, r25	; 0x08
     b90:	a9 87       	std	Y+9, r26	; 0x09
     b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b94:	6f 81       	ldd	r22, Y+7	; 0x07
     b96:	78 85       	ldd	r23, Y+8	; 0x08
     b98:	89 85       	ldd	r24, Y+9	; 0x09
     b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba8:	88 23       	and	r24, r24
     baa:	2c f4       	brge	.+10     	; 0xbb6 <voidSendEnablePulse+0x70>
		__ticks = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	8d 83       	std	Y+5, r24	; 0x05
     bb4:	3f c0       	rjmp	.+126    	; 0xc34 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     bb6:	6f 81       	ldd	r22, Y+7	; 0x07
     bb8:	78 85       	ldd	r23, Y+8	; 0x08
     bba:	89 85       	ldd	r24, Y+9	; 0x09
     bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bca:	18 16       	cp	r1, r24
     bcc:	4c f5       	brge	.+82     	; 0xc20 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	bc 01       	movw	r22, r24
     be8:	cd 01       	movw	r24, r26
     bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <voidSendEnablePulse+0xd0>
     bf8:	88 ec       	ldi	r24, 0xC8	; 200
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <voidSendEnablePulse+0xbe>
     c08:	9c 83       	std	Y+4, r25	; 0x04
     c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9e 83       	std	Y+6, r25	; 0x06
     c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	69 f7       	brne	.-38     	; 0xbf8 <voidSendEnablePulse+0xb2>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c20:	6f 81       	ldd	r22, Y+7	; 0x07
     c22:	78 85       	ldd	r23, Y+8	; 0x08
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	9a 85       	ldd	r25, Y+10	; 0x0a
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <voidSendEnablePulse+0xfa>
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
}
     c52:	2e 96       	adiw	r28, 0x0e	; 14
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <CLCD_voidSendCmd>:
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN,GET_BIT(Copy_u8Nipple,2));
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN,GET_BIT(Copy_u8Nipple,3));
}
*/
void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	0f 92       	push	r0
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>

#if CLCD_RW_CTRL_EN	== ENABLED
	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
#endif

#if CLCD_OP_MODE == EIGHT_BIT_MODE
	/*Send the command on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Cmd);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	69 81       	ldd	r22, Y+1	; 0x01
     c88:	0e 94 a8 0b 	call	0x1750	; 0x1750 <DIO_u8SetPortValue>

	voidSendEnablePulse();
     c8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>
	voidSendEnablePulse();

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*send the least 4 bits to the LCD*/
	voidSendEnablePulse();
#endif
}
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>

#if CLCD_RW_CTRL_EN	== ENABLED
	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
#endif

#if CLCD_OP_MODE == EIGHT_BIT_MODE
	/*Send the command on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	69 81       	ldd	r22, Y+1	; 0x01
     cbc:	0e 94 a8 0b 	call	0x1750	; 0x1750 <DIO_u8SetPortValue>

	voidSendEnablePulse();
     cc0:	0e 94 a3 05 	call	0xb46	; 0xb46 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
	voidSendEnablePulse();
#endif

}
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	2e 97       	sbiw	r28, 0x0e	; 14
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e2       	ldi	r26, 0x20	; 32
     ce6:	b2 e4       	ldi	r27, 0x42	; 66
     ce8:	8b 87       	std	Y+11, r24	; 0x0b
     cea:	9c 87       	std	Y+12, r25	; 0x0c
     cec:	ad 87       	std	Y+13, r26	; 0x0d
     cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	4a ef       	ldi	r20, 0xFA	; 250
     cfe:	54 e4       	ldi	r21, 0x44	; 68
     d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	8f 83       	std	Y+7, r24	; 0x07
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	a9 87       	std	Y+9, r26	; 0x09
     d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d24:	88 23       	and	r24, r24
     d26:	2c f4       	brge	.+10     	; 0xd32 <CLCD_voidInit+0x66>
		__ticks = 1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     d32:	6f 81       	ldd	r22, Y+7	; 0x07
     d34:	78 85       	ldd	r23, Y+8	; 0x08
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3f ef       	ldi	r19, 0xFF	; 255
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d46:	18 16       	cp	r1, r24
     d48:	4c f5       	brge	.+82     	; 0xd9c <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e2       	ldi	r20, 0x20	; 32
     d58:	51 e4       	ldi	r21, 0x41	; 65
     d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	9e 83       	std	Y+6, r25	; 0x06
     d70:	8d 83       	std	Y+5, r24	; 0x05
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <CLCD_voidInit+0xc6>
     d74:	88 ec       	ldi	r24, 0xC8	; 200
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <CLCD_voidInit+0xb4>
     d84:	9c 83       	std	Y+4, r25	; 0x04
     d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	69 f7       	brne	.-38     	; 0xd74 <CLCD_voidInit+0xa8>
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9c:	6f 81       	ldd	r22, Y+7	; 0x07
     d9e:	78 85       	ldd	r23, Y+8	; 0x08
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	9e 83       	std	Y+6, r25	; 0x06
     dae:	8d 83       	std	Y+5, r24	; 0x05
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <CLCD_voidInit+0xf0>
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30ms after power on*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);
     dc4:	88 e3       	ldi	r24, 0x38	; 56
     dc6:	0e 94 32 06 	call	0xc64	; 0xc64 <CLCD_voidSendCmd>
	voidSetLCDHalfDataPort(0b1000);
	voidSendEnablePulse();
#endif

	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	0e 94 32 06 	call	0xc64	; 0xc64 <CLCD_voidSendCmd>

	/*Display clear*/
	CLCD_voidSendCmd(1);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0e 94 32 06 	call	0xc64	; 0xc64 <CLCD_voidSendCmd>
}
     dd6:	2e 96       	adiw	r28, 0x0e	; 14
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	00 d0       	rcall	.+0      	; 0xdee <CLCD_u8SendString+0x6>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <CLCD_u8SendString+0x8>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState= OK;
     df8:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_chString != NULL)
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	e1 f0       	breq	.+56     	; 0xe3a <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Counter=0u;
     e02:	19 82       	std	Y+1, r1	; 0x01
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <CLCD_u8SendString+0x3a>
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	9c 81       	ldd	r25, Y+4	; 0x04
     e10:	fc 01       	movw	r30, r24
     e12:	e2 0f       	add	r30, r18
     e14:	f3 1f       	adc	r31, r19
     e16:	80 81       	ld	r24, Z
     e18:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
			Local_u8Counter++;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState= OK;
	if(Copy_chString != NULL)
	{
		uint8 Local_u8Counter=0u;
		while(Copy_chString[Local_u8Counter] != '\0')
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	fc 01       	movw	r30, r24
     e2e:	e2 0f       	add	r30, r18
     e30:	f3 1f       	adc	r31, r19
     e32:	80 81       	ld	r24, Z
     e34:	88 23       	and	r24, r24
     e36:	39 f7       	brne	.-50     	; 0xe06 <CLCD_u8SendString+0x1e>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <CLCD_u8SendString+0x56>
			Local_u8Counter++;
		}
	}
	else
	{
		Local_u8ErrorState= NULL_PTR_ERR;
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	61 97       	sbiw	r28, 0x11	; 17
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	6e 87       	std	Y+14, r22	; 0x0e
     e64:	7f 87       	std	Y+15, r23	; 0x0f
     e66:	88 8b       	std	Y+16, r24	; 0x10
     e68:	99 8b       	std	Y+17, r25	; 0x11
	char Local_chNumberArr[10];
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
     e6a:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	if (Copy_s32Number == 0)
     e6c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e6e:	9f 85       	ldd	r25, Y+15	; 0x0f
     e70:	a8 89       	ldd	r26, Y+16	; 0x10
     e72:	b9 89       	ldd	r27, Y+17	; 0x11
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	a1 05       	cpc	r26, r1
     e78:	b1 05       	cpc	r27, r1
     e7a:	21 f4       	brne	.+8      	; 0xe84 <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
     e7c:	80 e3       	ldi	r24, 0x30	; 48
     e7e:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
     e82:	69 c0       	rjmp	.+210    	; 0xf56 <CLCD_voidSendNumber+0x108>
		return ;
	}
	else if(Copy_s32Number < 0)
     e84:	8e 85       	ldd	r24, Y+14	; 0x0e
     e86:	9f 85       	ldd	r25, Y+15	; 0x0f
     e88:	a8 89       	ldd	r26, Y+16	; 0x10
     e8a:	b9 89       	ldd	r27, Y+17	; 0x11
     e8c:	bb 23       	and	r27, r27
     e8e:	0c f0       	brlt	.+2      	; 0xe92 <CLCD_voidSendNumber+0x44>
     e90:	43 c0       	rjmp	.+134    	; 0xf18 <CLCD_voidSendNumber+0xca>
	{
		CLCD_voidSendData('-');
     e92:	8d e2       	ldi	r24, 0x2D	; 45
     e94:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
		Copy_s32Number *= -1;
     e98:	8e 85       	ldd	r24, Y+14	; 0x0e
     e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9c:	a8 89       	ldd	r26, Y+16	; 0x10
     e9e:	b9 89       	ldd	r27, Y+17	; 0x11
     ea0:	b0 95       	com	r27
     ea2:	a0 95       	com	r26
     ea4:	90 95       	com	r25
     ea6:	81 95       	neg	r24
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	af 4f       	sbci	r26, 0xFF	; 255
     eac:	bf 4f       	sbci	r27, 0xFF	; 255
     eae:	8e 87       	std	Y+14, r24	; 0x0e
     eb0:	9f 87       	std	Y+15, r25	; 0x0f
     eb2:	a8 8b       	std	Y+16, r26	; 0x10
     eb4:	b9 8b       	std	Y+17, r27	; 0x11
     eb6:	30 c0       	rjmp	.+96     	; 0xf18 <CLCD_voidSendNumber+0xca>
	}
	while(Copy_s32Number != 0)
	{
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
     eb8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eba:	9f 85       	ldd	r25, Y+15	; 0x0f
     ebc:	a8 89       	ldd	r26, Y+16	; 0x10
     ebe:	b9 89       	ldd	r27, Y+17	; 0x11
     ec0:	2a e0       	ldi	r18, 0x0A	; 10
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	bc 01       	movw	r22, r24
     eca:	cd 01       	movw	r24, r26
     ecc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__divmodsi4>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
     ed6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed8:	9f 85       	ldd	r25, Y+15	; 0x0f
     eda:	a8 89       	ldd	r26, Y+16	; 0x10
     edc:	b9 89       	ldd	r27, Y+17	; 0x11
     ede:	2a e0       	ldi	r18, 0x0A	; 10
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__divmodsi4>
     eee:	da 01       	movw	r26, r20
     ef0:	c9 01       	movw	r24, r18
     ef2:	8e 87       	std	Y+14, r24	; 0x0e
     ef4:	9f 87       	std	Y+15, r25	; 0x0f
     ef6:	a8 8b       	std	Y+16, r26	; 0x10
     ef8:	b9 8b       	std	Y+17, r27	; 0x11
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	48 2f       	mov	r20, r24
     f04:	40 5d       	subi	r20, 0xD0	; 208
     f06:	ce 01       	movw	r24, r28
     f08:	04 96       	adiw	r24, 0x04	; 4
     f0a:	fc 01       	movw	r30, r24
     f0c:	e2 0f       	add	r30, r18
     f0e:	f3 1f       	adc	r31, r19
     f10:	40 83       	st	Z, r20
		Local_u8Counter++;
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	8a 83       	std	Y+2, r24	; 0x02
	else if(Copy_s32Number < 0)
	{
		CLCD_voidSendData('-');
		Copy_s32Number *= -1;
	}
	while(Copy_s32Number != 0)
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	a8 89       	ldd	r26, Y+16	; 0x10
     f1e:	b9 89       	ldd	r27, Y+17	; 0x11
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	a1 05       	cpc	r26, r1
     f24:	b1 05       	cpc	r27, r1
     f26:	41 f6       	brne	.-112    	; 0xeb8 <CLCD_voidSendNumber+0x6a>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <CLCD_voidSendNumber+0x102>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	33 27       	eor	r19, r19
     f36:	27 fd       	sbrc	r18, 7
     f38:	30 95       	com	r19
     f3a:	ce 01       	movw	r24, r28
     f3c:	04 96       	adiw	r24, 0x04	; 4
     f3e:	fc 01       	movw	r30, r24
     f40:	e2 0f       	add	r30, r18
     f42:	f3 1f       	adc	r31, r19
     f44:	80 81       	ld	r24, Z
     f46:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
		Local_u8RightDigit = Copy_s32Number%10;		/*Extract the right most digit*/
		Copy_s32Number /=10;						/*Get rid of the right most digit*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0'; /*convert to ascii value*/
		Local_u8Counter++;
	}
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	81 50       	subi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	88 23       	and	r24, r24
     f54:	6c f7       	brge	.-38     	; 0xf30 <CLCD_voidSendNumber+0xe2>
	{
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
     f56:	61 96       	adiw	r28, 0x11	; 17
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	de bf       	out	0x3e, r29	; 62
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <CLCD_voidGoToXY+0x6>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;
	if(Copy_u8YPos == 0u)
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 23       	and	r24, r24
     f7c:	19 f4       	brne	.+6      	; 0xf84 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd= Copy_u8XPos;
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == 1u)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	19 f4       	brne	.+6      	; 0xf90 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	80 5c       	subi	r24, 0xC0	; 192
     f8e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	80 68       	ori	r24, 0x80	; 128
     f94:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCmd(Local_u8DDRamAdd);
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	0e 94 32 06 	call	0xc64	; 0xc64 <CLCD_voidSendCmd>
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos )
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	27 97       	sbiw	r28, 0x07	; 7
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	6d 83       	std	Y+5, r22	; 0x05
     fc2:	4e 83       	std	Y+6, r20	; 0x06
     fc4:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdd= Copy_u8PatternNum * 8u;
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Local_u8LoopCounter;

	/*Set bit number 6 for Set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6u;
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	8a 83       	std	Y+2, r24	; 0x02

	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	0e 94 32 06 	call	0xc64	; 0xc64 <CLCD_voidSendCmd>

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	fc 01       	movw	r30, r24
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	80 81       	ld	r24, Z
     ffc:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>

	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	88 30       	cpi	r24, 0x08	; 8
    100a:	78 f3       	brcs	.-34     	; 0xfea <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    100c:	8e 81       	ldd	r24, Y+6	; 0x06
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>

	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
}
    101a:	27 96       	adiw	r28, 0x07	; 7
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_u8SetPinDerection>:
#include "DIO_Interfce.h"
#include "DIO_Private.h"
#include "DIO_Reg.h"

uint8 DIO_u8SetPinDerection(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8 Copy_u8Direction)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	28 97       	sbiw	r28, 0x08	; 8
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8a 83       	std	Y+2, r24	; 0x02
    1042:	6b 83       	std	Y+3, r22	; 0x03
    1044:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1046:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	88 30       	cpi	r24, 0x08	; 8
    104c:	08 f0       	brcs	.+2      	; 0x1050 <DIO_u8SetPinDerection+0x24>
    104e:	f4 c0       	rjmp	.+488    	; 0x1238 <DIO_u8SetPinDerection+0x20c>
	{
		if((Copy_u8Direction == DIO_u8PIN_INPUT))
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <DIO_u8SetPinDerection+0x2c>
    1056:	77 c0       	rjmp	.+238    	; 0x1146 <DIO_u8SetPinDerection+0x11a>
		{
			switch(Copy_u8Port)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	38 87       	std	Y+8, r19	; 0x08
    1060:	2f 83       	std	Y+7, r18	; 0x07
    1062:	8f 81       	ldd	r24, Y+7	; 0x07
    1064:	98 85       	ldd	r25, Y+8	; 0x08
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	59 f1       	breq	.+86     	; 0x10c2 <DIO_u8SetPinDerection+0x96>
    106c:	2f 81       	ldd	r18, Y+7	; 0x07
    106e:	38 85       	ldd	r19, Y+8	; 0x08
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <DIO_u8SetPinDerection+0x54>
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	98 85       	ldd	r25, Y+8	; 0x08
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f0       	breq	.+26     	; 0x1098 <DIO_u8SetPinDerection+0x6c>
    107e:	60 c0       	rjmp	.+192    	; 0x1140 <DIO_u8SetPinDerection+0x114>
    1080:	2f 81       	ldd	r18, Y+7	; 0x07
    1082:	38 85       	ldd	r19, Y+8	; 0x08
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	89 f1       	breq	.+98     	; 0x10ec <DIO_u8SetPinDerection+0xc0>
    108a:	8f 81       	ldd	r24, Y+7	; 0x07
    108c:	98 85       	ldd	r25, Y+8	; 0x08
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <DIO_u8SetPinDerection+0x6a>
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <DIO_u8SetPinDerection+0xea>
    1096:	54 c0       	rjmp	.+168    	; 0x1140 <DIO_u8SetPinDerection+0x114>
			{
			case DIO_u8PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
    1098:	aa e3       	ldi	r26, 0x3A	; 58
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_u8SetPinDerection+0x8a>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_u8SetPinDerection+0x86>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	bd c0       	rjmp	.+378    	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8SetPinDerection+0xb4>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8SetPinDerection+0xb0>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	a8 c0       	rjmp	.+336    	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
    10ec:	a4 e3       	ldi	r26, 0x34	; 52
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e4 e3       	ldi	r30, 0x34	; 52
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_u8SetPinDerection+0xde>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_u8SetPinDerection+0xda>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	93 c0       	rjmp	.+294    	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
    1116:	a1 e3       	ldi	r26, 0x31	; 49
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e1 e3       	ldi	r30, 0x31	; 49
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_u8SetPinDerection+0x108>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_u8SetPinDerection+0x104>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	7e c0       	rjmp	.+252    	; 0x123c <DIO_u8SetPinDerection+0x210>
			default:Local_u8ErrorState = NOK;break;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	7b c0       	rjmp	.+246    	; 0x123c <DIO_u8SetPinDerection+0x210>
			}

		}else if((Copy_u8Direction == DIO_u8PIN_OUTPUT))
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	09 f0       	breq	.+2      	; 0x114e <DIO_u8SetPinDerection+0x122>
    114c:	72 c0       	rjmp	.+228    	; 0x1232 <DIO_u8SetPinDerection+0x206>
		{
			switch(Copy_u8Port)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3e 83       	std	Y+6, r19	; 0x06
    1156:	2d 83       	std	Y+5, r18	; 0x05
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	49 f1       	breq	.+82     	; 0x11b4 <DIO_u8SetPinDerection+0x188>
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_u8SetPinDerection+0x14a>
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_u8SetPinDerection+0x160>
    1174:	5b c0       	rjmp	.+182    	; 0x122c <DIO_u8SetPinDerection+0x200>
    1176:	2d 81       	ldd	r18, Y+5	; 0x05
    1178:	3e 81       	ldd	r19, Y+6	; 0x06
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	71 f1       	breq	.+92     	; 0x11dc <DIO_u8SetPinDerection+0x1b0>
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	e9 f1       	breq	.+122    	; 0x1204 <DIO_u8SetPinDerection+0x1d8>
    118a:	50 c0       	rjmp	.+160    	; 0x122c <DIO_u8SetPinDerection+0x200>
			{
			case DIO_u8PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
    118c:	aa e3       	ldi	r26, 0x3A	; 58
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	ea e3       	ldi	r30, 0x3A	; 58
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_u8SetPinDerection+0x17e>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_u8SetPinDerection+0x17a>
    11ae:	84 2b       	or	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	44 c0       	rjmp	.+136    	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
    11b4:	a7 e3       	ldi	r26, 0x37	; 55
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e7 e3       	ldi	r30, 0x37	; 55
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_u8SetPinDerection+0x1a6>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_u8SetPinDerection+0x1a2>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	30 c0       	rjmp	.+96     	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
    11dc:	a4 e3       	ldi	r26, 0x34	; 52
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_u8SetPinDerection+0x1ce>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_u8SetPinDerection+0x1ca>
    11fe:	84 2b       	or	r24, r20
    1200:	8c 93       	st	X, r24
    1202:	1c c0       	rjmp	.+56     	; 0x123c <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
    1204:	a1 e3       	ldi	r26, 0x31	; 49
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e1 e3       	ldi	r30, 0x31	; 49
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_u8SetPinDerection+0x1f6>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_u8SetPinDerection+0x1f2>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	08 c0       	rjmp	.+16     	; 0x123c <DIO_u8SetPinDerection+0x210>
			default:Local_u8ErrorState = NOK;break;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	05 c0       	rjmp	.+10     	; 0x123c <DIO_u8SetPinDerection+0x210>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	02 c0       	rjmp	.+4      	; 0x123c <DIO_u8SetPinDerection+0x210>

		}
	}else
	{

		Local_u8ErrorState = NOK;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
}
    123e:	28 96       	adiw	r28, 0x08	; 8
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8 Copy_u8Value)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	28 97       	sbiw	r28, 0x08	; 8
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	6b 83       	std	Y+3, r22	; 0x03
    1268:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    126a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	88 30       	cpi	r24, 0x08	; 8
    1270:	08 f0       	brcs	.+2      	; 0x1274 <DIO_u8SetPinValue+0x24>
    1272:	f4 c0       	rjmp	.+488    	; 0x145c <DIO_u8SetPinValue+0x20c>
	{
		if((Copy_u8Value == DIO_u8PIN_LOW))
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <DIO_u8SetPinValue+0x2c>
    127a:	77 c0       	rjmp	.+238    	; 0x136a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	38 87       	std	Y+8, r19	; 0x08
    1284:	2f 83       	std	Y+7, r18	; 0x07
    1286:	8f 81       	ldd	r24, Y+7	; 0x07
    1288:	98 85       	ldd	r25, Y+8	; 0x08
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	59 f1       	breq	.+86     	; 0x12e6 <DIO_u8SetPinValue+0x96>
    1290:	2f 81       	ldd	r18, Y+7	; 0x07
    1292:	38 85       	ldd	r19, Y+8	; 0x08
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	31 05       	cpc	r19, r1
    1298:	2c f4       	brge	.+10     	; 0x12a4 <DIO_u8SetPinValue+0x54>
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f0       	breq	.+26     	; 0x12bc <DIO_u8SetPinValue+0x6c>
    12a2:	60 c0       	rjmp	.+192    	; 0x1364 <DIO_u8SetPinValue+0x114>
    12a4:	2f 81       	ldd	r18, Y+7	; 0x07
    12a6:	38 85       	ldd	r19, Y+8	; 0x08
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	89 f1       	breq	.+98     	; 0x1310 <DIO_u8SetPinValue+0xc0>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <DIO_u8SetPinValue+0x6a>
    12b8:	40 c0       	rjmp	.+128    	; 0x133a <DIO_u8SetPinValue+0xea>
    12ba:	54 c0       	rjmp	.+168    	; 0x1364 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    12bc:	ab e3       	ldi	r26, 0x3B	; 59
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	eb e3       	ldi	r30, 0x3B	; 59
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <DIO_u8SetPinValue+0x8a>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <DIO_u8SetPinValue+0x86>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	bd c0       	rjmp	.+378    	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    12e6:	a8 e3       	ldi	r26, 0x38	; 56
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e8 e3       	ldi	r30, 0x38	; 56
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8SetPinValue+0xb4>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8SetPinValue+0xb0>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	a8 c0       	rjmp	.+336    	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8SetPinValue+0xde>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8SetPinValue+0xda>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	93 c0       	rjmp	.+294    	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    133a:	a2 e3       	ldi	r26, 0x32	; 50
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e2 e3       	ldi	r30, 0x32	; 50
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8SetPinValue+0x108>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8SetPinValue+0x104>
    135c:	80 95       	com	r24
    135e:	84 23       	and	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	7e c0       	rjmp	.+252    	; 0x1460 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = NOK;break;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	7b c0       	rjmp	.+246    	; 0x1460 <DIO_u8SetPinValue+0x210>
			}

		}else if((Copy_u8Value == DIO_u8PIN_HIGH))
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	09 f0       	breq	.+2      	; 0x1372 <DIO_u8SetPinValue+0x122>
    1370:	72 c0       	rjmp	.+228    	; 0x1456 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	3e 83       	std	Y+6, r19	; 0x06
    137a:	2d 83       	std	Y+5, r18	; 0x05
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	49 f1       	breq	.+82     	; 0x13d8 <DIO_u8SetPinValue+0x188>
    1386:	2d 81       	ldd	r18, Y+5	; 0x05
    1388:	3e 81       	ldd	r19, Y+6	; 0x06
    138a:	22 30       	cpi	r18, 0x02	; 2
    138c:	31 05       	cpc	r19, r1
    138e:	2c f4       	brge	.+10     	; 0x139a <DIO_u8SetPinValue+0x14a>
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	61 f0       	breq	.+24     	; 0x13b0 <DIO_u8SetPinValue+0x160>
    1398:	5b c0       	rjmp	.+182    	; 0x1450 <DIO_u8SetPinValue+0x200>
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	71 f1       	breq	.+92     	; 0x1400 <DIO_u8SetPinValue+0x1b0>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	e9 f1       	breq	.+122    	; 0x1428 <DIO_u8SetPinValue+0x1d8>
    13ae:	50 c0       	rjmp	.+160    	; 0x1450 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    13b0:	ab e3       	ldi	r26, 0x3B	; 59
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e3       	ldi	r30, 0x3B	; 59
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_u8SetPinValue+0x17e>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_u8SetPinValue+0x17a>
    13d2:	84 2b       	or	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	44 c0       	rjmp	.+136    	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    13d8:	a8 e3       	ldi	r26, 0x38	; 56
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_u8SetPinValue+0x1a6>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_u8SetPinValue+0x1a2>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
    13fe:	30 c0       	rjmp	.+96     	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    1400:	a5 e3       	ldi	r26, 0x35	; 53
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e5 e3       	ldi	r30, 0x35	; 53
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_u8SetPinValue+0x1ce>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_u8SetPinValue+0x1ca>
    1422:	84 2b       	or	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	1c c0       	rjmp	.+56     	; 0x1460 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1428:	a2 e3       	ldi	r26, 0x32	; 50
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e2 e3       	ldi	r30, 0x32	; 50
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_u8SetPinValue+0x1f6>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_u8SetPinValue+0x1f2>
    144a:	84 2b       	or	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = NOK;break;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <DIO_u8SetPinValue+0x210>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8SetPinValue+0x210>

		}
	}else
	{

		Local_u8ErrorState = NOK;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1460:	89 81       	ldd	r24, Y+1	; 0x01
}
    1462:	28 96       	adiw	r28, 0x08	; 8
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8* Copy_pu8Value)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	27 97       	sbiw	r28, 0x07	; 7
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	8a 83       	std	Y+2, r24	; 0x02
    148a:	6b 83       	std	Y+3, r22	; 0x03
    148c:	5d 83       	std	Y+5, r21	; 0x05
    148e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1490:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	09 f4       	brne	.+2      	; 0x149c <DIO_u8GetPinValue+0x28>
    149a:	7b c0       	rjmp	.+246    	; 0x1592 <DIO_u8GetPinValue+0x11e>
	{
		if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 30       	cpi	r24, 0x08	; 8
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <DIO_u8GetPinValue+0x30>
    14a2:	74 c0       	rjmp	.+232    	; 0x158c <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3f 83       	std	Y+7, r19	; 0x07
    14ac:	2e 83       	std	Y+6, r18	; 0x06
    14ae:	4e 81       	ldd	r20, Y+6	; 0x06
    14b0:	5f 81       	ldd	r21, Y+7	; 0x07
    14b2:	41 30       	cpi	r20, 0x01	; 1
    14b4:	51 05       	cpc	r21, r1
    14b6:	59 f1       	breq	.+86     	; 0x150e <DIO_u8GetPinValue+0x9a>
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	34 f4       	brge	.+12     	; 0x14ce <DIO_u8GetPinValue+0x5a>
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <DIO_u8GetPinValue+0x72>
    14cc:	5c c0       	rjmp	.+184    	; 0x1586 <DIO_u8GetPinValue+0x112>
    14ce:	4e 81       	ldd	r20, Y+6	; 0x06
    14d0:	5f 81       	ldd	r21, Y+7	; 0x07
    14d2:	42 30       	cpi	r20, 0x02	; 2
    14d4:	51 05       	cpc	r21, r1
    14d6:	79 f1       	breq	.+94     	; 0x1536 <DIO_u8GetPinValue+0xc2>
    14d8:	8e 81       	ldd	r24, Y+6	; 0x06
    14da:	9f 81       	ldd	r25, Y+7	; 0x07
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <DIO_u8GetPinValue+0x70>
    14e2:	3d c0       	rjmp	.+122    	; 0x155e <DIO_u8GetPinValue+0xea>
    14e4:	50 c0       	rjmp	.+160    	; 0x1586 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*(Copy_pu8Value) = GET_BIT(PINA,Copy_u8Pin);break;
    14e6:	e9 e3       	ldi	r30, 0x39	; 57
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_u8GetPinValue+0x8a>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_u8GetPinValue+0x86>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	ec 81       	ldd	r30, Y+4	; 0x04
    1508:	fd 81       	ldd	r31, Y+5	; 0x05
    150a:	80 83       	st	Z, r24
    150c:	44 c0       	rjmp	.+136    	; 0x1596 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*(Copy_pu8Value) = GET_BIT(PINB,Copy_u8Pin);break;
    150e:	e6 e3       	ldi	r30, 0x36	; 54
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_u8GetPinValue+0xb2>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_u8GetPinValue+0xae>
    152a:	ca 01       	movw	r24, r20
    152c:	81 70       	andi	r24, 0x01	; 1
    152e:	ec 81       	ldd	r30, Y+4	; 0x04
    1530:	fd 81       	ldd	r31, Y+5	; 0x05
    1532:	80 83       	st	Z, r24
    1534:	30 c0       	rjmp	.+96     	; 0x1596 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*(Copy_pu8Value) = GET_BIT(PINC,Copy_u8Pin);break;
    1536:	e3 e3       	ldi	r30, 0x33	; 51
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a9 01       	movw	r20, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_u8GetPinValue+0xda>
    154a:	55 95       	asr	r21
    154c:	47 95       	ror	r20
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_u8GetPinValue+0xd6>
    1552:	ca 01       	movw	r24, r20
    1554:	81 70       	andi	r24, 0x01	; 1
    1556:	ec 81       	ldd	r30, Y+4	; 0x04
    1558:	fd 81       	ldd	r31, Y+5	; 0x05
    155a:	80 83       	st	Z, r24
    155c:	1c c0       	rjmp	.+56     	; 0x1596 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*(Copy_pu8Value) = GET_BIT(PIND,Copy_u8Pin);break;
    155e:	e0 e3       	ldi	r30, 0x30	; 48
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a9 01       	movw	r20, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_u8GetPinValue+0x102>
    1572:	55 95       	asr	r21
    1574:	47 95       	ror	r20
    1576:	8a 95       	dec	r24
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_u8GetPinValue+0xfe>
    157a:	ca 01       	movw	r24, r20
    157c:	81 70       	andi	r24, 0x01	; 1
    157e:	ec 81       	ldd	r30, Y+4	; 0x04
    1580:	fd 81       	ldd	r31, Y+5	; 0x05
    1582:	80 83       	st	Z, r24
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <DIO_u8GetPinValue+0x122>
			default:Local_u8ErrorState = NOK;break;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <DIO_u8GetPinValue+0x122>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_u8GetPinValue+0x122>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	27 96       	adiw	r28, 0x07	; 7
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <DIO_u8TogglePin>:

uint8 DIO_u8TogglePin(uint8 Copy_u8Port ,uint8 Copy_u8Pin )
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <DIO_u8TogglePin+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_u8TogglePin+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	8a 83       	std	Y+2, r24	; 0x02
    15ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    15bc:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	88 30       	cpi	r24, 0x08	; 8
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <DIO_u8TogglePin+0x1c>
    15c4:	72 c0       	rjmp	.+228    	; 0x16aa <DIO_u8TogglePin+0x100>
	{
		switch(Copy_u8Port)
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	3d 83       	std	Y+5, r19	; 0x05
    15ce:	2c 83       	std	Y+4, r18	; 0x04
    15d0:	8c 81       	ldd	r24, Y+4	; 0x04
    15d2:	9d 81       	ldd	r25, Y+5	; 0x05
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	91 05       	cpc	r25, r1
    15d8:	49 f1       	breq	.+82     	; 0x162c <DIO_u8TogglePin+0x82>
    15da:	2c 81       	ldd	r18, Y+4	; 0x04
    15dc:	3d 81       	ldd	r19, Y+5	; 0x05
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	2c f4       	brge	.+10     	; 0x15ee <DIO_u8TogglePin+0x44>
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	9d 81       	ldd	r25, Y+5	; 0x05
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	61 f0       	breq	.+24     	; 0x1604 <DIO_u8TogglePin+0x5a>
    15ec:	5b c0       	rjmp	.+182    	; 0x16a4 <DIO_u8TogglePin+0xfa>
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	22 30       	cpi	r18, 0x02	; 2
    15f4:	31 05       	cpc	r19, r1
    15f6:	71 f1       	breq	.+92     	; 0x1654 <DIO_u8TogglePin+0xaa>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	9d 81       	ldd	r25, Y+5	; 0x05
    15fc:	83 30       	cpi	r24, 0x03	; 3
    15fe:	91 05       	cpc	r25, r1
    1600:	e9 f1       	breq	.+122    	; 0x167c <DIO_u8TogglePin+0xd2>
    1602:	50 c0       	rjmp	.+160    	; 0x16a4 <DIO_u8TogglePin+0xfa>
		{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8Pin);break;
    1604:	ab e3       	ldi	r26, 0x3B	; 59
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e3       	ldi	r30, 0x3B	; 59
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_u8TogglePin+0x78>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_u8TogglePin+0x74>
    1626:	84 27       	eor	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	41 c0       	rjmp	.+130    	; 0x16ae <DIO_u8TogglePin+0x104>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8Pin);break;
    162c:	a8 e3       	ldi	r26, 0x38	; 56
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e8 e3       	ldi	r30, 0x38	; 56
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8TogglePin+0xa0>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_u8TogglePin+0x9c>
    164e:	84 27       	eor	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	2d c0       	rjmp	.+90     	; 0x16ae <DIO_u8TogglePin+0x104>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8Pin);break;
    1654:	a5 e3       	ldi	r26, 0x35	; 53
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e3       	ldi	r30, 0x35	; 53
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8TogglePin+0xc8>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8TogglePin+0xc4>
    1676:	84 27       	eor	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <DIO_u8TogglePin+0x104>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8Pin);break;
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_u8TogglePin+0xf0>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_u8TogglePin+0xec>
    169e:	84 27       	eor	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <DIO_u8TogglePin+0x104>
		default:Local_u8ErrorState = NOK;break;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_u8TogglePin+0x104>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <DIO_u8SetPortDerection>:



uint8 DIO_u8SetPortDerection(uint8 Copy_u8Port ,uint8 Copy_u8Direction)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_u8SetPortDerection+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_u8SetPortDerection+0x8>
    16c8:	0f 92       	push	r0
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    16d2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3d 83       	std	Y+5, r19	; 0x05
    16dc:	2c 83       	std	Y+4, r18	; 0x04
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	d1 f0       	breq	.+52     	; 0x171c <DIO_u8SetPortDerection+0x5c>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	2c f4       	brge	.+10     	; 0x16fc <DIO_u8SetPortDerection+0x3c>
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	61 f0       	breq	.+24     	; 0x1712 <DIO_u8SetPortDerection+0x52>
    16fa:	1f c0       	rjmp	.+62     	; 0x173a <DIO_u8SetPortDerection+0x7a>
    16fc:	2c 81       	ldd	r18, Y+4	; 0x04
    16fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	81 f0       	breq	.+32     	; 0x1726 <DIO_u8SetPortDerection+0x66>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	81 f0       	breq	.+32     	; 0x1730 <DIO_u8SetPortDerection+0x70>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <DIO_u8SetPortDerection+0x7a>
	{
	case DIO_u8PORTA:DDRA = Copy_u8Direction ;break;
    1712:	ea e3       	ldi	r30, 0x3A	; 58
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	80 83       	st	Z, r24
    171a:	11 c0       	rjmp	.+34     	; 0x173e <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTB:DDRB = Copy_u8Direction ;break;
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	80 83       	st	Z, r24
    1724:	0c c0       	rjmp	.+24     	; 0x173e <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTC:DDRC = Copy_u8Direction ;break;
    1726:	e4 e3       	ldi	r30, 0x34	; 52
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	80 83       	st	Z, r24
    172e:	07 c0       	rjmp	.+14     	; 0x173e <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTD:DDRD = Copy_u8Direction ;break;
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	80 83       	st	Z, r24
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_u8SetPortDerection+0x7e>
	default:Local_u8ErrorState = NOK;break;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port  ,uint8 Copy_u8Value)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <DIO_u8SetPortValue+0x6>
    1756:	00 d0       	rcall	.+0      	; 0x1758 <DIO_u8SetPortValue+0x8>
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1762:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3d 83       	std	Y+5, r19	; 0x05
    176c:	2c 83       	std	Y+4, r18	; 0x04
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	d1 f0       	breq	.+52     	; 0x17ac <DIO_u8SetPortValue+0x5c>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	2c f4       	brge	.+10     	; 0x178c <DIO_u8SetPortValue+0x3c>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	61 f0       	breq	.+24     	; 0x17a2 <DIO_u8SetPortValue+0x52>
    178a:	1f c0       	rjmp	.+62     	; 0x17ca <DIO_u8SetPortValue+0x7a>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	81 f0       	breq	.+32     	; 0x17b6 <DIO_u8SetPortValue+0x66>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	91 05       	cpc	r25, r1
    179e:	81 f0       	breq	.+32     	; 0x17c0 <DIO_u8SetPortValue+0x70>
    17a0:	14 c0       	rjmp	.+40     	; 0x17ca <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA:PORTA = Copy_u8Value ;break;
    17a2:	eb e3       	ldi	r30, 0x3B	; 59
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	80 83       	st	Z, r24
    17aa:	11 c0       	rjmp	.+34     	; 0x17ce <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB:PORTB = Copy_u8Value ;break;
    17ac:	e8 e3       	ldi	r30, 0x38	; 56
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	80 83       	st	Z, r24
    17b4:	0c c0       	rjmp	.+24     	; 0x17ce <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC:PORTC = Copy_u8Value ;break;
    17b6:	e5 e3       	ldi	r30, 0x35	; 53
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	80 83       	st	Z, r24
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD:PORTD = Copy_u8Value ;break;
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	80 83       	st	Z, r24
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_u8SetPortValue+0x7e>
	default:Local_u8ErrorState = NOK;break;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <DIO_u8GetPortValue>:
uint8 DIO_u8GetPortValue(uint8 Copy_u8Port  ,uint8* Copy_pu8Value)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <DIO_u8GetPortValue+0x6>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <DIO_u8GetPortValue+0x8>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <DIO_u8GetPortValue+0xa>
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	8a 83       	std	Y+2, r24	; 0x02
    17f0:	7c 83       	std	Y+4, r23	; 0x04
    17f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    17f4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	09 f4       	brne	.+2      	; 0x1800 <DIO_u8GetPortValue+0x20>
    17fe:	3e c0       	rjmp	.+124    	; 0x187c <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	3e 83       	std	Y+6, r19	; 0x06
    1808:	2d 83       	std	Y+5, r18	; 0x05
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	91 05       	cpc	r25, r1
    1812:	e1 f0       	breq	.+56     	; 0x184c <DIO_u8GetPortValue+0x6c>
    1814:	2d 81       	ldd	r18, Y+5	; 0x05
    1816:	3e 81       	ldd	r19, Y+6	; 0x06
    1818:	22 30       	cpi	r18, 0x02	; 2
    181a:	31 05       	cpc	r19, r1
    181c:	2c f4       	brge	.+10     	; 0x1828 <DIO_u8GetPortValue+0x48>
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	61 f0       	breq	.+24     	; 0x183e <DIO_u8GetPortValue+0x5e>
    1826:	27 c0       	rjmp	.+78     	; 0x1876 <DIO_u8GetPortValue+0x96>
    1828:	2d 81       	ldd	r18, Y+5	; 0x05
    182a:	3e 81       	ldd	r19, Y+6	; 0x06
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	a1 f0       	breq	.+40     	; 0x185a <DIO_u8GetPortValue+0x7a>
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	83 30       	cpi	r24, 0x03	; 3
    1838:	91 05       	cpc	r25, r1
    183a:	b1 f0       	breq	.+44     	; 0x1868 <DIO_u8GetPortValue+0x88>
    183c:	1c c0       	rjmp	.+56     	; 0x1876 <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8PORTA:*(Copy_pu8Value) = PINA ;break;
    183e:	e9 e3       	ldi	r30, 0x39	; 57
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	80 83       	st	Z, r24
    184a:	1a c0       	rjmp	.+52     	; 0x1880 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTB:*(Copy_pu8Value) = PINB ;break;
    184c:	e6 e3       	ldi	r30, 0x36	; 54
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	80 83       	st	Z, r24
    1858:	13 c0       	rjmp	.+38     	; 0x1880 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTC:*(Copy_pu8Value) = PINC ;break;
    185a:	e3 e3       	ldi	r30, 0x33	; 51
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	eb 81       	ldd	r30, Y+3	; 0x03
    1862:	fc 81       	ldd	r31, Y+4	; 0x04
    1864:	80 83       	st	Z, r24
    1866:	0c c0       	rjmp	.+24     	; 0x1880 <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTD:*(Copy_pu8Value) = PIND ;break;
    1868:	e0 e3       	ldi	r30, 0x30	; 48
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	eb 81       	ldd	r30, Y+3	; 0x03
    1870:	fc 81       	ldd	r31, Y+4	; 0x04
    1872:	80 83       	st	Z, r24
    1874:	05 c0       	rjmp	.+10     	; 0x1880 <DIO_u8GetPortValue+0xa0>
		default:Local_u8ErrorState = NOK;break;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_u8GetPortValue+0xa0>
		}
	}else
	{
		Local_u8ErrorState = NOK;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
}
    1882:	26 96       	adiw	r28, 0x06	; 6
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <KPD_u8GetPressedKey>:
#include "KPD_Private.h"

/* Required : All row pins are input pulled up , All column pins are output high  */

uint8 KPD_u8GetPressedKey(void)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	a0 97       	sbiw	r28, 0x20	; 32
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedKey = KPD_u8NO_PRESSED_KEY_VAL;
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	8f 8f       	std	Y+31, r24	; 0x1f
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;


	/* Activate column pins and read the row  */
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
    18ac:	1d 8e       	std	Y+29, r1	; 0x1d
    18ae:	67 c1       	rjmp	.+718    	; 0x1b7e <KPD_u8GetPressedKey+0x2ea>
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    18b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	fc 01       	movw	r30, r24
    18b8:	e9 57       	subi	r30, 0x79	; 121
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	90 81       	ld	r25, Z
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	69 2f       	mov	r22, r25
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>

		for(Local_u8ROWCounter =0 ; Local_u8ROWCounter < KPD_u8ROW_NUM ; Local_u8ROWCounter++)
    18c8:	1e 8e       	std	Y+30, r1	; 0x1e
    18ca:	46 c1       	rjmp	.+652    	; 0x1b58 <KPD_u8GetPressedKey+0x2c4>
		{
			/* READ the current row */
			DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    18cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	fc 01       	movw	r30, r24
    18d4:	ed 57       	subi	r30, 0x7D	; 125
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	90 81       	ld	r25, Z
    18da:	9e 01       	movw	r18, r28
    18dc:	20 5e       	subi	r18, 0xE0	; 224
    18de:	3f 4f       	sbci	r19, 0xFF	; 255
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	69 2f       	mov	r22, r25
    18e4:	a9 01       	movw	r20, r18
    18e6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_u8GetPinValue>

			/* if the current row is low , button is pressed */
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    18ea:	88 a1       	ldd	r24, Y+32	; 0x20
    18ec:	88 23       	and	r24, r24
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <KPD_u8GetPressedKey+0x5e>
    18f0:	30 c1       	rjmp	.+608    	; 0x1b52 <KPD_u8GetPressedKey+0x2be>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 ea       	ldi	r26, 0xA0	; 160
    18f8:	b1 e4       	ldi	r27, 0x41	; 65
    18fa:	89 8f       	std	Y+25, r24	; 0x19
    18fc:	9a 8f       	std	Y+26, r25	; 0x1a
    18fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1900:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1902:	69 8d       	ldd	r22, Y+25	; 0x19
    1904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a ef       	ldi	r20, 0xFA	; 250
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8d 8b       	std	Y+21, r24	; 0x15
    191c:	9e 8b       	std	Y+22, r25	; 0x16
    191e:	af 8b       	std	Y+23, r26	; 0x17
    1920:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1922:	6d 89       	ldd	r22, Y+21	; 0x15
    1924:	7e 89       	ldd	r23, Y+22	; 0x16
    1926:	8f 89       	ldd	r24, Y+23	; 0x17
    1928:	98 8d       	ldd	r25, Y+24	; 0x18
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	2c f4       	brge	.+10     	; 0x1944 <KPD_u8GetPressedKey+0xb0>
		__ticks = 1;
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9c 8b       	std	Y+20, r25	; 0x14
    1940:	8b 8b       	std	Y+19, r24	; 0x13
    1942:	3f c0       	rjmp	.+126    	; 0x19c2 <KPD_u8GetPressedKey+0x12e>
	else if (__tmp > 65535)
    1944:	6d 89       	ldd	r22, Y+21	; 0x15
    1946:	7e 89       	ldd	r23, Y+22	; 0x16
    1948:	8f 89       	ldd	r24, Y+23	; 0x17
    194a:	98 8d       	ldd	r25, Y+24	; 0x18
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	3f ef       	ldi	r19, 0xFF	; 255
    1950:	4f e7       	ldi	r20, 0x7F	; 127
    1952:	57 e4       	ldi	r21, 0x47	; 71
    1954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1958:	18 16       	cp	r1, r24
    195a:	4c f5       	brge	.+82     	; 0x19ae <KPD_u8GetPressedKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	69 8d       	ldd	r22, Y+25	; 0x19
    195e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	40 e2       	ldi	r20, 0x20	; 32
    196a:	51 e4       	ldi	r21, 0x41	; 65
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	0f c0       	rjmp	.+30     	; 0x19a4 <KPD_u8GetPressedKey+0x110>
    1986:	88 ec       	ldi	r24, 0xC8	; 200
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9a 8b       	std	Y+18, r25	; 0x12
    198c:	89 8b       	std	Y+17, r24	; 0x11
    198e:	89 89       	ldd	r24, Y+17	; 0x11
    1990:	9a 89       	ldd	r25, Y+18	; 0x12
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <KPD_u8GetPressedKey+0xfe>
    1996:	9a 8b       	std	Y+18, r25	; 0x12
    1998:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	9c 8b       	std	Y+20, r25	; 0x14
    19a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a4:	8b 89       	ldd	r24, Y+19	; 0x13
    19a6:	9c 89       	ldd	r25, Y+20	; 0x14
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	69 f7       	brne	.-38     	; 0x1986 <KPD_u8GetPressedKey+0xf2>
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <KPD_u8GetPressedKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	98 8b       	std	Y+16, r25	; 0x10
    19c8:	8f 87       	std	Y+15, r24	; 0x0f
    19ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    19cc:	98 89       	ldd	r25, Y+16	; 0x10
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <KPD_u8GetPressedKey+0x13a>
    19d2:	98 8b       	std	Y+16, r25	; 0x10
    19d4:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(20);
				DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    19d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	fc 01       	movw	r30, r24
    19de:	ed 57       	subi	r30, 0x7D	; 125
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	90 81       	ld	r25, Z
    19e4:	9e 01       	movw	r18, r28
    19e6:	20 5e       	subi	r18, 0xE0	; 224
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	69 2f       	mov	r22, r25
    19ee:	a9 01       	movw	r20, r18
    19f0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_u8GetPinValue>

				if(Local_u8KeyState == DIO_u8PIN_LOW)
    19f4:	88 a1       	ldd	r24, Y+32	; 0x20
    19f6:	88 23       	and	r24, r24
    19f8:	09 f0       	breq	.+2      	; 0x19fc <KPD_u8GetPressedKey+0x168>
    19fa:	a7 c0       	rjmp	.+334    	; 0x1b4a <KPD_u8GetPressedKey+0x2b6>
				{
					Local_u8PressedKey = Local_u8KPDArr[Local_u8ROWCounter][Local_u8ColCounter];
    19fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19fe:	48 2f       	mov	r20, r24
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	ca 01       	movw	r24, r20
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	82 0f       	add	r24, r18
    1a14:	93 1f       	adc	r25, r19
    1a16:	fc 01       	movw	r30, r24
    1a18:	ed 58       	subi	r30, 0x8D	; 141
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a20:	94 c0       	rjmp	.+296    	; 0x1b4a <KPD_u8GetPressedKey+0x2b6>
				/* wait until key is released */

				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					/* READ the current row */
					DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    1a22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	ed 57       	subi	r30, 0x7D	; 125
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	90 81       	ld	r25, Z
    1a30:	9e 01       	movw	r18, r28
    1a32:	20 5e       	subi	r18, 0xE0	; 224
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	69 2f       	mov	r22, r25
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_u8GetPinValue>

					if(Local_u8KeyState == DIO_u8PIN_HIGH)
    1a40:	88 a1       	ldd	r24, Y+32	; 0x20
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <KPD_u8GetPressedKey+0x1b4>
    1a46:	81 c0       	rjmp	.+258    	; 0x1b4a <KPD_u8GetPressedKey+0x2b6>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a4e:	b1 e4       	ldi	r27, 0x41	; 65
    1a50:	8b 87       	std	Y+11, r24	; 0x0b
    1a52:	9c 87       	std	Y+12, r25	; 0x0c
    1a54:	ad 87       	std	Y+13, r26	; 0x0d
    1a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	4a ef       	ldi	r20, 0xFA	; 250
    1a66:	54 e4       	ldi	r21, 0x44	; 68
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8f 83       	std	Y+7, r24	; 0x07
    1a72:	98 87       	std	Y+8, r25	; 0x08
    1a74:	a9 87       	std	Y+9, r26	; 0x09
    1a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a78:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7a:	78 85       	ldd	r23, Y+8	; 0x08
    1a7c:	89 85       	ldd	r24, Y+9	; 0x09
    1a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <KPD_u8GetPressedKey+0x206>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	3f c0       	rjmp	.+126    	; 0x1b18 <KPD_u8GetPressedKey+0x284>
	else if (__tmp > 65535)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	4f e7       	ldi	r20, 0x7F	; 127
    1aa8:	57 e4       	ldi	r21, 0x47	; 71
    1aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aae:	18 16       	cp	r1, r24
    1ab0:	4c f5       	brge	.+82     	; 0x1b04 <KPD_u8GetPressedKey+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e2       	ldi	r20, 0x20	; 32
    1ac0:	51 e4       	ldi	r21, 0x41	; 65
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	cd 01       	movw	r24, r26
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9e 83       	std	Y+6, r25	; 0x06
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <KPD_u8GetPressedKey+0x266>
    1adc:	88 ec       	ldi	r24, 0xC8	; 200
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 83       	std	Y+4, r25	; 0x04
    1ae2:	8b 83       	std	Y+3, r24	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <KPD_u8GetPressedKey+0x254>
    1aec:	9c 83       	std	Y+4, r25	; 0x04
    1aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	69 f7       	brne	.-38     	; 0x1adc <KPD_u8GetPressedKey+0x248>
    1b02:	14 c0       	rjmp	.+40     	; 0x1b2c <KPD_u8GetPressedKey+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	6f 81       	ldd	r22, Y+7	; 0x07
    1b06:	78 85       	ldd	r23, Y+8	; 0x08
    1b08:	89 85       	ldd	r24, Y+9	; 0x09
    1b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	9a 81       	ldd	r25, Y+2	; 0x02
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <KPD_u8GetPressedKey+0x290>
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(20);
						DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    1b2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	fc 01       	movw	r30, r24
    1b34:	ed 57       	subi	r30, 0x7D	; 125
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	90 81       	ld	r25, Z
    1b3a:	9e 01       	movw	r18, r28
    1b3c:	20 5e       	subi	r18, 0xE0	; 224
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	69 2f       	mov	r22, r25
    1b44:	a9 01       	movw	r20, r18
    1b46:	0e 94 3a 0a 	call	0x1474	; 0x1474 <DIO_u8GetPinValue>
				{
					Local_u8PressedKey = Local_u8KPDArr[Local_u8ROWCounter][Local_u8ColCounter];
				}
				/* wait until key is released */

				while(Local_u8KeyState == DIO_u8PIN_LOW)
    1b4a:	88 a1       	ldd	r24, Y+32	; 0x20
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <KPD_u8GetPressedKey+0x2be>
    1b50:	68 cf       	rjmp	.-304    	; 0x1a22 <KPD_u8GetPressedKey+0x18e>
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8ROWCounter =0 ; Local_u8ROWCounter < KPD_u8ROW_NUM ; Local_u8ROWCounter++)
    1b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b54:	8f 5f       	subi	r24, 0xFF	; 255
    1b56:	8e 8f       	std	Y+30, r24	; 0x1e
    1b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	08 f4       	brcc	.+2      	; 0x1b60 <KPD_u8GetPressedKey+0x2cc>
    1b5e:	b6 ce       	rjmp	.-660    	; 0x18cc <KPD_u8GetPressedKey+0x38>
			}

		}

		/* Deactivate the current col */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    1b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	fc 01       	movw	r30, r24
    1b68:	e9 57       	subi	r30, 0x79	; 121
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	90 81       	ld	r25, Z
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	69 2f       	mov	r22, r25
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;


	/* Activate column pins and read the row  */
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
    1b78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1b7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <KPD_u8GetPressedKey+0x2f2>
    1b84:	95 ce       	rjmp	.-726    	; 0x18b0 <KPD_u8GetPressedKey+0x1c>

		/* Deactivate the current col */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1b86:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    1b88:	a0 96       	adiw	r28, 0x20	; 32
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	de bf       	out	0x3e, r29	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	cd bf       	out	0x3d, r28	; 61
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <PORT_voidInit>:
#include  "PORT_Cfg.h"
#include  "PORT_Private.h"


void PORT_voidInit(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR ;
    1ba2:	ea e3       	ldi	r30, 0x3A	; 58
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    1baa:	e7 e3       	ldi	r30, 0x37	; 55
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	8f ef       	ldi	r24, 0xFF	; 255
    1bb0:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    1bb2:	e4 e3       	ldi	r30, 0x34	; 52
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 ef       	ldi	r24, 0xF0	; 240
    1bb8:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    1bba:	e1 e3       	ldi	r30, 0x31	; 49
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	80 83       	st	Z, r24


	PORTA = PORTA_INITIAL_VAL;
    1bc2:	eb e3       	ldi	r30, 0x3B	; 59
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VAL;
    1bc8:	e8 e3       	ldi	r30, 0x38	; 56
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VAL;
    1bd0:	e5 e3       	ldi	r30, 0x35	; 53
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VAL;
    1bd8:	e2 e3       	ldi	r30, 0x32	; 50
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	8f e0       	ldi	r24, 0x0F	; 15
    1bde:	80 83       	st	Z, r24

}
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <main>:
#include "CLCD_interface.h"
#include "KPD_Interface.h"
#include "DIO_Interfce.h"
#include "SpecialCharacters.h"
void main(void)
{
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	cc 55       	subi	r28, 0x5C	; 92
    1bf4:	d0 40       	sbci	r29, 0x00	; 0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
	/* define a variable to carry the state of PressedKey */
	uint8 Local_u8PressedKey = 0xff ;
    1c00:	fe 01       	movw	r30, r28
    1c02:	e4 5a       	subi	r30, 0xA4	; 164
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	80 83       	st	Z, r24

	/*define variables */
	uint8 Local_u8ArrowwCount = 0;
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e5 5a       	subi	r30, 0xA5	; 165
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	10 82       	st	Z, r1
	uint8 Local_u8Hrs_Count =0;
    1c12:	fe 01       	movw	r30, r28
    1c14:	e6 5a       	subi	r30, 0xA6	; 166
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	10 82       	st	Z, r1
	uint8 Local_u8Mins_Count=0;
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 5a       	subi	r30, 0xA7	; 167
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	10 82       	st	Z, r1
	uint8 Local_u8Secs_Count=0;
    1c22:	fe 01       	movw	r30, r28
    1c24:	e8 5a       	subi	r30, 0xA8	; 168
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	10 82       	st	Z, r1
	uint8 Local_u8Count_I;
	//uint8 Local_u8Count_J;
	uint8 Local_u8Count_K;
	uint8 Local_u8Count_L;
	/* functions Init */
	PORT_voidInit();
    1c2a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <PORT_voidInit>
	CLCD_voidInit();
    1c2e:	0e 94 66 06 	call	0xccc	; 0xccc <CLCD_voidInit>

	/* default state of CLCD */
	CLCD_voidSendData('0');
    1c32:	80 e3       	ldi	r24, 0x30	; 48
    1c34:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    1c38:	80 e3       	ldi	r24, 0x30	; 48
    1c3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData(':');
    1c3e:	8a e3       	ldi	r24, 0x3A	; 58
    1c40:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    1c44:	80 e3       	ldi	r24, 0x30	; 48
    1c46:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    1c4a:	80 e3       	ldi	r24, 0x30	; 48
    1c4c:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData(':');
    1c50:	8a e3       	ldi	r24, 0x3A	; 58
    1c52:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    1c56:	80 e3       	ldi	r24, 0x30	; 48
    1c58:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendData('0');
    1c5c:	80 e3       	ldi	r24, 0x30	; 48
    1c5e:	0e 94 4c 06 	call	0xc98	; 0xc98 <CLCD_voidSendData>
	CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,0u,0u,1u);
    1c62:	8b e8       	ldi	r24, 0x8B	; 139
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	21 e0       	ldi	r18, 0x01	; 1
    1c6c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>

	while(1)
	{
		/* Get value from user */
		Local_u8PressedKey = KPD_u8GetPressedKey();
    1c70:	0e 94 4a 0c 	call	0x1894	; 0x1894 <KPD_u8GetPressedKey>
    1c74:	fe 01       	movw	r30, r28
    1c76:	e4 5a       	subi	r30, 0xA4	; 164
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 83       	st	Z, r24

		if(Local_u8PressedKey != 0xff)
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e4 5a       	subi	r30, 0xA4	; 164
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 3f       	cpi	r24, 0xFF	; 255
    1c86:	a1 f3       	breq	.-24     	; 0x1c70 <main+0x8a>
		{
			if(Local_u8ArrowwCount == 0)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e5 5a       	subi	r30, 0xA5	; 165
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	88 23       	and	r24, r24
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <main+0xb0>
    1c94:	62 c0       	rjmp	.+196    	; 0x1d5a <main+0x174>
			{
				if(Local_u8PressedKey == 15)
    1c96:	fe 01       	movw	r30, r28
    1c98:	e4 5a       	subi	r30, 0xA4	; 164
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 30       	cpi	r24, 0x0F	; 15
    1ca0:	59 f5       	brne	.+86     	; 0x1cf8 <main+0x112>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1ca2:	8c e9       	ldi	r24, 0x9C	; 156
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e5 5a       	subi	r30, 0xA5	; 165
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	de 01       	movw	r26, r28
    1cae:	a5 5a       	subi	r26, 0xA5	; 165
    1cb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb2:	60 81       	ld	r22, Z
    1cb4:	4c 91       	ld	r20, X
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit   */
					Local_u8ArrowwCount++;
    1cbc:	de 01       	movw	r26, r28
    1cbe:	a5 5a       	subi	r26, 0xA5	; 165
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e5 5a       	subi	r30, 0xA5	; 165
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5a       	subi	r30, 0xA5	; 165
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	60 e0       	ldi	r22, 0x00	; 0
    1cd8:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1cdc:	8b e8       	ldi	r24, 0x8B	; 139
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e5 5a       	subi	r30, 0xA5	; 165
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	de 01       	movw	r26, r28
    1ce8:	a5 5a       	subi	r26, 0xA5	; 165
    1cea:	bf 4f       	sbci	r27, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	4c 91       	ld	r20, X
    1cf0:	21 e0       	ldi	r18, 0x01	; 1
    1cf2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    1cf6:	34 c3       	rjmp	.+1640   	; 0x2360 <main+0x77a>

				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e4 5a       	subi	r30, 0xA4	; 164
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	8f 30       	cpi	r24, 0x0F	; 15
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <main+0x120>
    1d04:	2d c3       	rjmp	.+1626   	; 0x2360 <main+0x77a>
    1d06:	fe 01       	movw	r30, r28
    1d08:	e4 5a       	subi	r30, 0xA4	; 164
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	8d 30       	cpi	r24, 0x0D	; 13
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0x12e>
    1d12:	26 c3       	rjmp	.+1612   	; 0x2360 <main+0x77a>
    1d14:	fe 01       	movw	r30, r28
    1d16:	e4 5a       	subi	r30, 0xA4	; 164
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 31       	cpi	r24, 0x10	; 16
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <main+0x13c>
    1d20:	1f c3       	rjmp	.+1598   	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1d22:	fe 01       	movw	r30, r28
    1d24:	e5 5a       	subi	r30, 0xA5	; 165
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* Save the first digit of hours */
					Local_u8Hrs_Count = Local_u8PressedKey;
    1d30:	de 01       	movw	r26, r28
    1d32:	a6 5a       	subi	r26, 0xA6	; 166
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	fe 01       	movw	r30, r28
    1d38:	e4 5a       	subi	r30, 0xA4	; 164
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    1d40:	fe 01       	movw	r30, r28
    1d42:	e4 5a       	subi	r30, 0xA4	; 164
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e0       	ldi	r26, 0x00	; 0
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    1d58:	03 c3       	rjmp	.+1542   	; 0x2360 <main+0x77a>
				}

			}else if (Local_u8ArrowwCount == 1)
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e5 5a       	subi	r30, 0xA5	; 165
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <main+0x182>
    1d66:	a5 c0       	rjmp	.+330    	; 0x1eb2 <main+0x2cc>
			{
				if(Local_u8PressedKey == 15)
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e4 5a       	subi	r30, 0xA4	; 164
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 30       	cpi	r24, 0x0F	; 15
    1d72:	59 f5       	brne	.+86     	; 0x1dca <main+0x1e4>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1d74:	8c e9       	ldi	r24, 0x9C	; 156
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e5 5a       	subi	r30, 0xA5	; 165
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	de 01       	movw	r26, r28
    1d80:	a5 5a       	subi	r26, 0xA5	; 165
    1d82:	bf 4f       	sbci	r27, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	4c 91       	ld	r20, X
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount +=2;
    1d8e:	de 01       	movw	r26, r28
    1d90:	a5 5a       	subi	r26, 0xA5	; 165
    1d92:	bf 4f       	sbci	r27, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	e5 5a       	subi	r30, 0xA5	; 165
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	8e 5f       	subi	r24, 0xFE	; 254
    1d9e:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1da0:	fe 01       	movw	r30, r28
    1da2:	e5 5a       	subi	r30, 0xA5	; 165
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1dae:	8b e8       	ldi	r24, 0x8B	; 139
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5a       	subi	r30, 0xA5	; 165
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	de 01       	movw	r26, r28
    1dba:	a5 5a       	subi	r26, 0xA5	; 165
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	4c 91       	ld	r20, X
    1dc2:	21 e0       	ldi	r18, 0x01	; 1
    1dc4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    1dc8:	cb c2       	rjmp	.+1430   	; 0x2360 <main+0x77a>

				}else if(Local_u8PressedKey == 13 )
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e4 5a       	subi	r30, 0xA4	; 164
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	8d 30       	cpi	r24, 0x0D	; 13
    1dd4:	59 f5       	brne	.+86     	; 0x1e2c <main+0x246>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1dd6:	8c e9       	ldi	r24, 0x9C	; 156
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5a       	subi	r30, 0xA5	; 165
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	de 01       	movw	r26, r28
    1de2:	a5 5a       	subi	r26, 0xA5	; 165
    1de4:	bf 4f       	sbci	r27, 0xFF	; 255
    1de6:	60 81       	ld	r22, Z
    1de8:	4c 91       	ld	r20, X
    1dea:	21 e0       	ldi	r18, 0x01	; 1
    1dec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount-- ;
    1df0:	de 01       	movw	r26, r28
    1df2:	a5 5a       	subi	r26, 0xA5	; 165
    1df4:	bf 4f       	sbci	r27, 0xFF	; 255
    1df6:	fe 01       	movw	r30, r28
    1df8:	e5 5a       	subi	r30, 0xA5	; 165
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 81       	ld	r24, Z
    1dfe:	81 50       	subi	r24, 0x01	; 1
    1e00:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1e02:	fe 01       	movw	r30, r28
    1e04:	e5 5a       	subi	r30, 0xA5	; 165
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1e10:	8b e8       	ldi	r24, 0x8B	; 139
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	fe 01       	movw	r30, r28
    1e16:	e5 5a       	subi	r30, 0xA5	; 165
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	de 01       	movw	r26, r28
    1e1c:	a5 5a       	subi	r26, 0xA5	; 165
    1e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	4c 91       	ld	r20, X
    1e24:	21 e0       	ldi	r18, 0x01	; 1
    1e26:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    1e2a:	9a c2       	rjmp	.+1332   	; 0x2360 <main+0x77a>


				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e4 5a       	subi	r30, 0xA4	; 164
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 30       	cpi	r24, 0x0F	; 15
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <main+0x254>
    1e38:	93 c2       	rjmp	.+1318   	; 0x2360 <main+0x77a>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e4 5a       	subi	r30, 0xA4	; 164
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	8d 30       	cpi	r24, 0x0D	; 13
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <main+0x262>
    1e46:	8c c2       	rjmp	.+1304   	; 0x2360 <main+0x77a>
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e4 5a       	subi	r30, 0xA4	; 164
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 31       	cpi	r24, 0x10	; 16
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <main+0x270>
    1e54:	85 c2       	rjmp	.+1290   	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0);
    1e56:	fe 01       	movw	r30, r28
    1e58:	e5 5a       	subi	r30, 0xA5	; 165
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* in this line we save hours (2 digits) */
					Local_u8Hrs_Count = (Local_u8Hrs_Count * 10) + Local_u8PressedKey;
    1e64:	fe 01       	movw	r30, r28
    1e66:	e6 5a       	subi	r30, 0xA6	; 166
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 01       	movw	r18, r24
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	c9 01       	movw	r24, r18
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	98 2f       	mov	r25, r24
    1e86:	de 01       	movw	r26, r28
    1e88:	a6 5a       	subi	r26, 0xA6	; 166
    1e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e4 5a       	subi	r30, 0xA4	; 164
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	89 0f       	add	r24, r25
    1e96:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e4 5a       	subi	r30, 0xA4	; 164
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e0       	ldi	r26, 0x00	; 0
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    1eb0:	57 c2       	rjmp	.+1198   	; 0x2360 <main+0x77a>
				}
			}else if (Local_u8ArrowwCount == 3)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e5 5a       	subi	r30, 0xA5	; 165
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	83 30       	cpi	r24, 0x03	; 3
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <main+0x2da>
    1ebe:	93 c0       	rjmp	.+294    	; 0x1fe6 <main+0x400>
			{
				if(Local_u8PressedKey == 15)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e4 5a       	subi	r30, 0xA4	; 164
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8f 30       	cpi	r24, 0x0F	; 15
    1eca:	59 f5       	brne	.+86     	; 0x1f22 <main+0x33c>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1ecc:	8c e9       	ldi	r24, 0x9C	; 156
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e5 5a       	subi	r30, 0xA5	; 165
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	de 01       	movw	r26, r28
    1ed8:	a5 5a       	subi	r26, 0xA5	; 165
    1eda:	bf 4f       	sbci	r27, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	4c 91       	ld	r20, X
    1ee0:	21 e0       	ldi	r18, 0x01	; 1
    1ee2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 4  */
					Local_u8ArrowwCount++;
    1ee6:	de 01       	movw	r26, r28
    1ee8:	a5 5a       	subi	r26, 0xA5	; 165
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	fe 01       	movw	r30, r28
    1eee:	e5 5a       	subi	r30, 0xA5	; 165
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e5 5a       	subi	r30, 0xA5	; 165
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1f06:	8b e8       	ldi	r24, 0x8B	; 139
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e5 5a       	subi	r30, 0xA5	; 165
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	de 01       	movw	r26, r28
    1f12:	a5 5a       	subi	r26, 0xA5	; 165
    1f14:	bf 4f       	sbci	r27, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	4c 91       	ld	r20, X
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    1f20:	1f c2       	rjmp	.+1086   	; 0x2360 <main+0x77a>

				}else if(Local_u8PressedKey == 13 )
    1f22:	fe 01       	movw	r30, r28
    1f24:	e4 5a       	subi	r30, 0xA4	; 164
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	8d 30       	cpi	r24, 0x0D	; 13
    1f2c:	59 f5       	brne	.+86     	; 0x1f84 <main+0x39e>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1f2e:	8c e9       	ldi	r24, 0x9C	; 156
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	fe 01       	movw	r30, r28
    1f34:	e5 5a       	subi	r30, 0xA5	; 165
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	de 01       	movw	r26, r28
    1f3a:	a5 5a       	subi	r26, 0xA5	; 165
    1f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	4c 91       	ld	r20, X
    1f42:	21 e0       	ldi	r18, 0x01	; 1
    1f44:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount-=2 ;
    1f48:	de 01       	movw	r26, r28
    1f4a:	a5 5a       	subi	r26, 0xA5	; 165
    1f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e5 5a       	subi	r30, 0xA5	; 165
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	82 50       	subi	r24, 0x02	; 2
    1f58:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5a       	subi	r30, 0xA5	; 165
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    1f68:	8b e8       	ldi	r24, 0x8B	; 139
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e5 5a       	subi	r30, 0xA5	; 165
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	de 01       	movw	r26, r28
    1f74:	a5 5a       	subi	r26, 0xA5	; 165
    1f76:	bf 4f       	sbci	r27, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	4c 91       	ld	r20, X
    1f7c:	21 e0       	ldi	r18, 0x01	; 1
    1f7e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    1f82:	ee c1       	rjmp	.+988    	; 0x2360 <main+0x77a>


				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    1f84:	fe 01       	movw	r30, r28
    1f86:	e4 5a       	subi	r30, 0xA4	; 164
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8f 30       	cpi	r24, 0x0F	; 15
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <main+0x3ac>
    1f90:	e7 c1       	rjmp	.+974    	; 0x2360 <main+0x77a>
    1f92:	fe 01       	movw	r30, r28
    1f94:	e4 5a       	subi	r30, 0xA4	; 164
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	8d 30       	cpi	r24, 0x0D	; 13
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <main+0x3ba>
    1f9e:	e0 c1       	rjmp	.+960    	; 0x2360 <main+0x77a>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e4 5a       	subi	r30, 0xA4	; 164
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 31       	cpi	r24, 0x10	; 16
    1faa:	09 f4       	brne	.+2      	; 0x1fae <main+0x3c8>
    1fac:	d9 c1       	rjmp	.+946    	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0);
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e5 5a       	subi	r30, 0xA5	; 165
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* Save the first digit of Mins */
					Local_u8Mins_Count = Local_u8PressedKey;
    1fbc:	de 01       	movw	r26, r28
    1fbe:	a7 5a       	subi	r26, 0xA7	; 167
    1fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e4 5a       	subi	r30, 0xA4	; 164
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e4 5a       	subi	r30, 0xA4	; 164
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	88 2f       	mov	r24, r24
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    1fe4:	bd c1       	rjmp	.+890    	; 0x2360 <main+0x77a>
				}
			}else if (Local_u8ArrowwCount == 4)
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e5 5a       	subi	r30, 0xA5	; 165
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	84 30       	cpi	r24, 0x04	; 4
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <main+0x40e>
    1ff2:	a5 c0       	rjmp	.+330    	; 0x213e <main+0x558>
			{
				if(Local_u8PressedKey == 15)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e4 5a       	subi	r30, 0xA4	; 164
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 30       	cpi	r24, 0x0F	; 15
    1ffe:	59 f5       	brne	.+86     	; 0x2056 <main+0x470>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    2000:	8c e9       	ldi	r24, 0x9C	; 156
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	fe 01       	movw	r30, r28
    2006:	e5 5a       	subi	r30, 0xA5	; 165
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	de 01       	movw	r26, r28
    200c:	a5 5a       	subi	r26, 0xA5	; 165
    200e:	bf 4f       	sbci	r27, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	4c 91       	ld	r20, X
    2014:	21 e0       	ldi	r18, 0x01	; 1
    2016:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount +=2;
    201a:	de 01       	movw	r26, r28
    201c:	a5 5a       	subi	r26, 0xA5	; 165
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	e5 5a       	subi	r30, 0xA5	; 165
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	8e 5f       	subi	r24, 0xFE	; 254
    202a:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    202c:	fe 01       	movw	r30, r28
    202e:	e5 5a       	subi	r30, 0xA5	; 165
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    203a:	8b e8       	ldi	r24, 0x8B	; 139
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	fe 01       	movw	r30, r28
    2040:	e5 5a       	subi	r30, 0xA5	; 165
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	de 01       	movw	r26, r28
    2046:	a5 5a       	subi	r26, 0xA5	; 165
    2048:	bf 4f       	sbci	r27, 0xFF	; 255
    204a:	60 81       	ld	r22, Z
    204c:	4c 91       	ld	r20, X
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    2054:	85 c1       	rjmp	.+778    	; 0x2360 <main+0x77a>

				}else if(Local_u8PressedKey == 13 )
    2056:	fe 01       	movw	r30, r28
    2058:	e4 5a       	subi	r30, 0xA4	; 164
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	8d 30       	cpi	r24, 0x0D	; 13
    2060:	59 f5       	brne	.+86     	; 0x20b8 <main+0x4d2>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    2062:	8c e9       	ldi	r24, 0x9C	; 156
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fe 01       	movw	r30, r28
    2068:	e5 5a       	subi	r30, 0xA5	; 165
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	de 01       	movw	r26, r28
    206e:	a5 5a       	subi	r26, 0xA5	; 165
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	4c 91       	ld	r20, X
    2076:	21 e0       	ldi	r18, 0x01	; 1
    2078:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount-- ;
    207c:	de 01       	movw	r26, r28
    207e:	a5 5a       	subi	r26, 0xA5	; 165
    2080:	bf 4f       	sbci	r27, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	e5 5a       	subi	r30, 0xA5	; 165
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    208e:	fe 01       	movw	r30, r28
    2090:	e5 5a       	subi	r30, 0xA5	; 165
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    209c:	8b e8       	ldi	r24, 0x8B	; 139
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5a       	subi	r30, 0xA5	; 165
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	de 01       	movw	r26, r28
    20a8:	a5 5a       	subi	r26, 0xA5	; 165
    20aa:	bf 4f       	sbci	r27, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	4c 91       	ld	r20, X
    20b0:	21 e0       	ldi	r18, 0x01	; 1
    20b2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    20b6:	54 c1       	rjmp	.+680    	; 0x2360 <main+0x77a>


				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    20b8:	fe 01       	movw	r30, r28
    20ba:	e4 5a       	subi	r30, 0xA4	; 164
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	8f 30       	cpi	r24, 0x0F	; 15
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <main+0x4e0>
    20c4:	4d c1       	rjmp	.+666    	; 0x2360 <main+0x77a>
    20c6:	fe 01       	movw	r30, r28
    20c8:	e4 5a       	subi	r30, 0xA4	; 164
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	8d 30       	cpi	r24, 0x0D	; 13
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <main+0x4ee>
    20d2:	46 c1       	rjmp	.+652    	; 0x2360 <main+0x77a>
    20d4:	fe 01       	movw	r30, r28
    20d6:	e4 5a       	subi	r30, 0xA4	; 164
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	80 31       	cpi	r24, 0x10	; 16
    20de:	09 f4       	brne	.+2      	; 0x20e2 <main+0x4fc>
    20e0:	3f c1       	rjmp	.+638    	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0);
    20e2:	fe 01       	movw	r30, r28
    20e4:	e5 5a       	subi	r30, 0xA5	; 165
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* in this line we save Mins (2 digits) */
					Local_u8Mins_Count = (Local_u8Mins_Count *10) + Local_u8PressedKey;
    20f0:	fe 01       	movw	r30, r28
    20f2:	e7 5a       	subi	r30, 0xA7	; 167
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9c 01       	movw	r18, r24
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	c9 01       	movw	r24, r18
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	98 2f       	mov	r25, r24
    2112:	de 01       	movw	r26, r28
    2114:	a7 5a       	subi	r26, 0xA7	; 167
    2116:	bf 4f       	sbci	r27, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e4 5a       	subi	r30, 0xA4	; 164
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	89 0f       	add	r24, r25
    2122:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    2124:	fe 01       	movw	r30, r28
    2126:	e4 5a       	subi	r30, 0xA4	; 164
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    213c:	11 c1       	rjmp	.+546    	; 0x2360 <main+0x77a>
				}
			}else if (Local_u8ArrowwCount == 6)
    213e:	fe 01       	movw	r30, r28
    2140:	e5 5a       	subi	r30, 0xA5	; 165
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	86 30       	cpi	r24, 0x06	; 6
    2148:	09 f0       	breq	.+2      	; 0x214c <main+0x566>
    214a:	93 c0       	rjmp	.+294    	; 0x2272 <main+0x68c>
			{
				if(Local_u8PressedKey == 15)
    214c:	fe 01       	movw	r30, r28
    214e:	e4 5a       	subi	r30, 0xA4	; 164
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	8f 30       	cpi	r24, 0x0F	; 15
    2156:	59 f5       	brne	.+86     	; 0x21ae <main+0x5c8>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    2158:	8c e9       	ldi	r24, 0x9C	; 156
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	fe 01       	movw	r30, r28
    215e:	e5 5a       	subi	r30, 0xA5	; 165
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	de 01       	movw	r26, r28
    2164:	a5 5a       	subi	r26, 0xA5	; 165
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	4c 91       	ld	r20, X
    216c:	21 e0       	ldi	r18, 0x01	; 1
    216e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 4  */
					Local_u8ArrowwCount++;
    2172:	de 01       	movw	r26, r28
    2174:	a5 5a       	subi	r26, 0xA5	; 165
    2176:	bf 4f       	sbci	r27, 0xFF	; 255
    2178:	fe 01       	movw	r30, r28
    217a:	e5 5a       	subi	r30, 0xA5	; 165
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    2184:	fe 01       	movw	r30, r28
    2186:	e5 5a       	subi	r30, 0xA5	; 165
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    2192:	8b e8       	ldi	r24, 0x8B	; 139
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fe 01       	movw	r30, r28
    2198:	e5 5a       	subi	r30, 0xA5	; 165
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	de 01       	movw	r26, r28
    219e:	a5 5a       	subi	r26, 0xA5	; 165
    21a0:	bf 4f       	sbci	r27, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	4c 91       	ld	r20, X
    21a6:	21 e0       	ldi	r18, 0x01	; 1
    21a8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    21ac:	d9 c0       	rjmp	.+434    	; 0x2360 <main+0x77a>

				}else if(Local_u8PressedKey == 13 )
    21ae:	fe 01       	movw	r30, r28
    21b0:	e4 5a       	subi	r30, 0xA4	; 164
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	8d 30       	cpi	r24, 0x0D	; 13
    21b8:	59 f5       	brne	.+86     	; 0x2210 <main+0x62a>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    21ba:	8c e9       	ldi	r24, 0x9C	; 156
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	fe 01       	movw	r30, r28
    21c0:	e5 5a       	subi	r30, 0xA5	; 165
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	de 01       	movw	r26, r28
    21c6:	a5 5a       	subi	r26, 0xA5	; 165
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	4c 91       	ld	r20, X
    21ce:	21 e0       	ldi	r18, 0x01	; 1
    21d0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount-=2 ;
    21d4:	de 01       	movw	r26, r28
    21d6:	a5 5a       	subi	r26, 0xA5	; 165
    21d8:	bf 4f       	sbci	r27, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	e5 5a       	subi	r30, 0xA5	; 165
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	82 50       	subi	r24, 0x02	; 2
    21e4:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    21e6:	fe 01       	movw	r30, r28
    21e8:	e5 5a       	subi	r30, 0xA5	; 165
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    21f4:	8b e8       	ldi	r24, 0x8B	; 139
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	fe 01       	movw	r30, r28
    21fa:	e5 5a       	subi	r30, 0xA5	; 165
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	de 01       	movw	r26, r28
    2200:	a5 5a       	subi	r26, 0xA5	; 165
    2202:	bf 4f       	sbci	r27, 0xFF	; 255
    2204:	60 81       	ld	r22, Z
    2206:	4c 91       	ld	r20, X
    2208:	21 e0       	ldi	r18, 0x01	; 1
    220a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    220e:	a8 c0       	rjmp	.+336    	; 0x2360 <main+0x77a>


				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    2210:	fe 01       	movw	r30, r28
    2212:	e4 5a       	subi	r30, 0xA4	; 164
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	8f 30       	cpi	r24, 0x0F	; 15
    221a:	09 f4       	brne	.+2      	; 0x221e <main+0x638>
    221c:	a1 c0       	rjmp	.+322    	; 0x2360 <main+0x77a>
    221e:	fe 01       	movw	r30, r28
    2220:	e4 5a       	subi	r30, 0xA4	; 164
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	8d 30       	cpi	r24, 0x0D	; 13
    2228:	09 f4       	brne	.+2      	; 0x222c <main+0x646>
    222a:	9a c0       	rjmp	.+308    	; 0x2360 <main+0x77a>
    222c:	fe 01       	movw	r30, r28
    222e:	e4 5a       	subi	r30, 0xA4	; 164
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	80 31       	cpi	r24, 0x10	; 16
    2236:	09 f4       	brne	.+2      	; 0x223a <main+0x654>
    2238:	93 c0       	rjmp	.+294    	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0);
    223a:	fe 01       	movw	r30, r28
    223c:	e5 5a       	subi	r30, 0xA5	; 165
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* Save the first digit of Secs */
					Local_u8Secs_Count = Local_u8PressedKey;
    2248:	de 01       	movw	r26, r28
    224a:	a8 5a       	subi	r26, 0xA8	; 168
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	e4 5a       	subi	r30, 0xA4	; 164
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    2258:	fe 01       	movw	r30, r28
    225a:	e4 5a       	subi	r30, 0xA4	; 164
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2270:	77 c0       	rjmp	.+238    	; 0x2360 <main+0x77a>
				}

			}else if (Local_u8ArrowwCount == 7)
    2272:	fe 01       	movw	r30, r28
    2274:	e5 5a       	subi	r30, 0xA5	; 165
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	87 30       	cpi	r24, 0x07	; 7
    227c:	09 f0       	breq	.+2      	; 0x2280 <main+0x69a>
    227e:	70 c0       	rjmp	.+224    	; 0x2360 <main+0x77a>
			{
				if(Local_u8PressedKey == 13 )
    2280:	fe 01       	movw	r30, r28
    2282:	e4 5a       	subi	r30, 0xA4	; 164
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	8d 30       	cpi	r24, 0x0D	; 13
    228a:	59 f5       	brne	.+86     	; 0x22e2 <main+0x6fc>
				{
					/* Delete the old arrow */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    228c:	8c e9       	ldi	r24, 0x9C	; 156
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	fe 01       	movw	r30, r28
    2292:	e5 5a       	subi	r30, 0xA5	; 165
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	de 01       	movw	r26, r28
    2298:	a5 5a       	subi	r26, 0xA5	; 165
    229a:	bf 4f       	sbci	r27, 0xFF	; 255
    229c:	60 81       	ld	r22, Z
    229e:	4c 91       	ld	r20, X
    22a0:	21 e0       	ldi	r18, 0x01	; 1
    22a2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
					/* increment Local_u8RightCount by one to refer to the new digit 3  */
					Local_u8ArrowwCount-- ;
    22a6:	de 01       	movw	r26, r28
    22a8:	a5 5a       	subi	r26, 0xA5	; 165
    22aa:	bf 4f       	sbci	r27, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	e5 5a       	subi	r30, 0xA5	; 165
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	8c 93       	st	X, r24
					/* go to the new digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0u);
    22b8:	fe 01       	movw	r30, r28
    22ba:	e5 5a       	subi	r30, 0xA5	; 165
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* send arrow to the new digit */
					CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    22c6:	8b e8       	ldi	r24, 0x8B	; 139
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	fe 01       	movw	r30, r28
    22cc:	e5 5a       	subi	r30, 0xA5	; 165
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	de 01       	movw	r26, r28
    22d2:	a5 5a       	subi	r26, 0xA5	; 165
    22d4:	bf 4f       	sbci	r27, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	4c 91       	ld	r20, X
    22da:	21 e0       	ldi	r18, 0x01	; 1
    22dc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <main+0x77a>


				}else if((Local_u8PressedKey != 15) && (Local_u8PressedKey != 13 ) && (Local_u8PressedKey != 16))
    22e2:	fe 01       	movw	r30, r28
    22e4:	e4 5a       	subi	r30, 0xA4	; 164
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	8f 30       	cpi	r24, 0x0F	; 15
    22ec:	c9 f1       	breq	.+114    	; 0x2360 <main+0x77a>
    22ee:	fe 01       	movw	r30, r28
    22f0:	e4 5a       	subi	r30, 0xA4	; 164
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	8d 30       	cpi	r24, 0x0D	; 13
    22f8:	99 f1       	breq	.+102    	; 0x2360 <main+0x77a>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e4 5a       	subi	r30, 0xA4	; 164
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	80 31       	cpi	r24, 0x10	; 16
    2304:	69 f1       	breq	.+90     	; 0x2360 <main+0x77a>
				{
					/* go to the digit  */
					CLCD_voidGoToXY(Local_u8ArrowwCount,0);
    2306:	fe 01       	movw	r30, r28
    2308:	e5 5a       	subi	r30, 0xA5	; 165
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
					/* in this line we save Secs (2 digits) */
					Local_u8Secs_Count = (Local_u8Secs_Count *10) + Local_u8PressedKey;
    2314:	fe 01       	movw	r30, r28
    2316:	e8 5a       	subi	r30, 0xA8	; 168
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 01       	movw	r18, r24
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	c9 01       	movw	r24, r18
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	82 0f       	add	r24, r18
    2332:	93 1f       	adc	r25, r19
    2334:	98 2f       	mov	r25, r24
    2336:	de 01       	movw	r26, r28
    2338:	a8 5a       	subi	r26, 0xA8	; 168
    233a:	bf 4f       	sbci	r27, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	e4 5a       	subi	r30, 0xA4	; 164
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	89 0f       	add	r24, r25
    2346:	8c 93       	st	X, r24
					/* send data */
					CLCD_voidSendNumber(Local_u8PressedKey);
    2348:	fe 01       	movw	r30, r28
    234a:	e4 5a       	subi	r30, 0xA4	; 164
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e0       	ldi	r26, 0x00	; 0
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>

			}

			/* the beginning of start */

			if(Local_u8PressedKey == 16)
    2360:	fe 01       	movw	r30, r28
    2362:	e4 5a       	subi	r30, 0xA4	; 164
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	80 81       	ld	r24, Z
    2368:	80 31       	cpi	r24, 0x10	; 16
    236a:	09 f0       	breq	.+2      	; 0x236e <main+0x788>
    236c:	82 c5       	rjmp	.+2820   	; 0x2e72 <main+0x128c>
			{
				/* Delete the old arrow */
				CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);
    236e:	8c e9       	ldi	r24, 0x9C	; 156
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	fe 01       	movw	r30, r28
    2374:	e5 5a       	subi	r30, 0xA5	; 165
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	de 01       	movw	r26, r28
    237a:	a5 5a       	subi	r26, 0xA5	; 165
    237c:	bf 4f       	sbci	r27, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	4c 91       	ld	r20, X
    2382:	21 e0       	ldi	r18, 0x01	; 1
    2384:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>

				/* Local_u8Secs_Count not equal 0 */
				if(Local_u8Secs_Count != 0)
    2388:	fe 01       	movw	r30, r28
    238a:	e8 5a       	subi	r30, 0xA8	; 168
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	09 f4       	brne	.+2      	; 0x2396 <main+0x7b0>
    2394:	94 c1       	rjmp	.+808    	; 0x26be <main+0xad8>
				{
					for(Local_u8Count_K = Local_u8Secs_Count ; Local_u8Count_K > 0 ; Local_u8Count_K--)
    2396:	fe 01       	movw	r30, r28
    2398:	ea 5a       	subi	r30, 0xAA	; 170
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	de 01       	movw	r26, r28
    239e:	a8 5a       	subi	r26, 0xA8	; 168
    23a0:	bf 4f       	sbci	r27, 0xFF	; 255
    23a2:	8c 91       	ld	r24, X
    23a4:	80 83       	st	Z, r24
    23a6:	84 c1       	rjmp	.+776    	; 0x26b0 <main+0xaca>
					{
						Local_u8Secs_Count--;
    23a8:	de 01       	movw	r26, r28
    23aa:	a8 5a       	subi	r26, 0xA8	; 168
    23ac:	bf 4f       	sbci	r27, 0xFF	; 255
    23ae:	fe 01       	movw	r30, r28
    23b0:	e8 5a       	subi	r30, 0xA8	; 168
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	81 50       	subi	r24, 0x01	; 1
    23b8:	8c 93       	st	X, r24
						if(Local_u8Secs_Count > 9)
    23ba:	fe 01       	movw	r30, r28
    23bc:	e8 5a       	subi	r30, 0xA8	; 168
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	8a 30       	cpi	r24, 0x0A	; 10
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <main+0x7e2>
    23c6:	c5 c0       	rjmp	.+394    	; 0x2552 <main+0x96c>
						{
							CLCD_voidGoToXY(6,0);
    23c8:	86 e0       	ldi	r24, 0x06	; 6
    23ca:	60 e0       	ldi	r22, 0x00	; 0
    23cc:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
							CLCD_voidSendNumber(Local_u8Secs_Count);
    23d0:	fe 01       	movw	r30, r28
    23d2:	e8 5a       	subi	r30, 0xA8	; 168
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    23e8:	fe 01       	movw	r30, r28
    23ea:	ef 5a       	subi	r30, 0xAF	; 175
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	aa e7       	ldi	r26, 0x7A	; 122
    23f4:	b4 e4       	ldi	r27, 0x44	; 68
    23f6:	80 83       	st	Z, r24
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	a2 83       	std	Z+2, r26	; 0x02
    23fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fe:	8e 01       	movw	r16, r28
    2400:	03 5b       	subi	r16, 0xB3	; 179
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	ef 5a       	subi	r30, 0xAF	; 175
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	60 81       	ld	r22, Z
    240c:	71 81       	ldd	r23, Z+1	; 0x01
    240e:	82 81       	ldd	r24, Z+2	; 0x02
    2410:	93 81       	ldd	r25, Z+3	; 0x03
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a ef       	ldi	r20, 0xFA	; 250
    2418:	54 e4       	ldi	r21, 0x44	; 68
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	f8 01       	movw	r30, r16
    2424:	80 83       	st	Z, r24
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	a2 83       	std	Z+2, r26	; 0x02
    242a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242c:	fe 01       	movw	r30, r28
    242e:	e3 5b       	subi	r30, 0xB3	; 179
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	44 f4       	brge	.+16     	; 0x245a <main+0x874>
		__ticks = 1;
    244a:	fe 01       	movw	r30, r28
    244c:	e5 5b       	subi	r30, 0xB5	; 181
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    2458:	64 c0       	rjmp	.+200    	; 0x2522 <main+0x93c>
	else if (__tmp > 65535)
    245a:	fe 01       	movw	r30, r28
    245c:	e3 5b       	subi	r30, 0xB3	; 179
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	0c f0       	brlt	.+2      	; 0x247a <main+0x894>
    2478:	43 c0       	rjmp	.+134    	; 0x2500 <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	fe 01       	movw	r30, r28
    247c:	ef 5a       	subi	r30, 0xAF	; 175
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8e 01       	movw	r16, r28
    249a:	05 5b       	subi	r16, 0xB5	; 181
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    24b0:	1f c0       	rjmp	.+62     	; 0x24f0 <main+0x90a>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 5b       	subi	r30, 0xB7	; 183
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	88 ec       	ldi	r24, 0xC8	; 200
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	fe 01       	movw	r30, r28
    24c2:	e7 5b       	subi	r30, 0xB7	; 183
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <main+0x8e4>
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d8:	de 01       	movw	r26, r28
    24da:	a5 5b       	subi	r26, 0xB5	; 181
    24dc:	bf 4f       	sbci	r27, 0xFF	; 255
    24de:	fe 01       	movw	r30, r28
    24e0:	e5 5b       	subi	r30, 0xB5	; 181
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	9c 93       	st	X, r25
    24ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f0:	fe 01       	movw	r30, r28
    24f2:	e5 5b       	subi	r30, 0xB5	; 181
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	d1 f6       	brne	.-76     	; 0x24b2 <main+0x8cc>
    24fe:	cf c0       	rjmp	.+414    	; 0x269e <main+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	8e 01       	movw	r16, r28
    2502:	05 5b       	subi	r16, 0xB5	; 181
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	e3 5b       	subi	r30, 0xB3	; 179
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	f8 01       	movw	r30, r16
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	80 83       	st	Z, r24
    2522:	de 01       	movw	r26, r28
    2524:	a9 5b       	subi	r26, 0xB9	; 185
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	11 96       	adiw	r26, 0x01	; 1
    2534:	9c 93       	st	X, r25
    2536:	8e 93       	st	-X, r24
    2538:	fe 01       	movw	r30, r28
    253a:	e9 5b       	subi	r30, 0xB9	; 185
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <main+0x95c>
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5b       	subi	r30, 0xB9	; 185
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
    2550:	a6 c0       	rjmp	.+332    	; 0x269e <main+0xab8>
							_delay_ms(1000);
						}else if(Local_u8Secs_Count <= 9)
    2552:	fe 01       	movw	r30, r28
    2554:	e8 5a       	subi	r30, 0xA8	; 168
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	8a 30       	cpi	r24, 0x0A	; 10
    255c:	08 f0       	brcs	.+2      	; 0x2560 <main+0x97a>
    255e:	9f c0       	rjmp	.+318    	; 0x269e <main+0xab8>
						{
							CLCD_voidGoToXY(6,0);
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
							CLCD_voidSendNumber(0);
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
							CLCD_voidGoToXY(7,0);
    2574:	87 e0       	ldi	r24, 0x07	; 7
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
							CLCD_voidSendNumber(Local_u8Secs_Count);
    257c:	fe 01       	movw	r30, r28
    257e:	e8 5a       	subi	r30, 0xA8	; 168
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e0       	ldi	r26, 0x00	; 0
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2594:	fe 01       	movw	r30, r28
    2596:	ed 5b       	subi	r30, 0xBD	; 189
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	aa e7       	ldi	r26, 0x7A	; 122
    25a0:	b4 e4       	ldi	r27, 0x44	; 68
    25a2:	80 83       	st	Z, r24
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	a2 83       	std	Z+2, r26	; 0x02
    25a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25aa:	8e 01       	movw	r16, r28
    25ac:	01 5c       	subi	r16, 0xC1	; 193
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	ed 5b       	subi	r30, 0xBD	; 189
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a ef       	ldi	r20, 0xFA	; 250
    25c4:	54 e4       	ldi	r21, 0x44	; 68
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	80 83       	st	Z, r24
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	a2 83       	std	Z+2, r26	; 0x02
    25d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d8:	fe 01       	movw	r30, r28
    25da:	ff 96       	adiw	r30, 0x3f	; 63
    25dc:	60 81       	ld	r22, Z
    25de:	71 81       	ldd	r23, Z+1	; 0x01
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	93 81       	ldd	r25, Z+3	; 0x03
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <main+0xa18>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9e af       	std	Y+62, r25	; 0x3e
    25fa:	8d af       	std	Y+61, r24	; 0x3d
    25fc:	46 c0       	rjmp	.+140    	; 0x268a <main+0xaa4>
	else if (__tmp > 65535)
    25fe:	fe 01       	movw	r30, r28
    2600:	ff 96       	adiw	r30, 0x3f	; 63
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	64 f5       	brge	.+88     	; 0x2672 <main+0xa8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	fe 01       	movw	r30, r28
    261c:	ed 5b       	subi	r30, 0xBD	; 189
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9e af       	std	Y+62, r25	; 0x3e
    2646:	8d af       	std	Y+61, r24	; 0x3d
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <main+0xa82>
    264a:	88 ec       	ldi	r24, 0xC8	; 200
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c af       	std	Y+60, r25	; 0x3c
    2650:	8b af       	std	Y+59, r24	; 0x3b
    2652:	8b ad       	ldd	r24, Y+59	; 0x3b
    2654:	9c ad       	ldd	r25, Y+60	; 0x3c
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <main+0xa70>
    265a:	9c af       	std	Y+60, r25	; 0x3c
    265c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2660:	9e ad       	ldd	r25, Y+62	; 0x3e
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9e af       	std	Y+62, r25	; 0x3e
    2666:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8d ad       	ldd	r24, Y+61	; 0x3d
    266a:	9e ad       	ldd	r25, Y+62	; 0x3e
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <main+0xa64>
    2670:	16 c0       	rjmp	.+44     	; 0x269e <main+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	fe 01       	movw	r30, r28
    2674:	ff 96       	adiw	r30, 0x3f	; 63
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e af       	std	Y+62, r25	; 0x3e
    2688:	8d af       	std	Y+61, r24	; 0x3d
    268a:	8d ad       	ldd	r24, Y+61	; 0x3d
    268c:	9e ad       	ldd	r25, Y+62	; 0x3e
    268e:	9a af       	std	Y+58, r25	; 0x3a
    2690:	89 af       	std	Y+57, r24	; 0x39
    2692:	89 ad       	ldd	r24, Y+57	; 0x39
    2694:	9a ad       	ldd	r25, Y+58	; 0x3a
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <main+0xab0>
    269a:	9a af       	std	Y+58, r25	; 0x3a
    269c:	89 af       	std	Y+57, r24	; 0x39
				CLCD_voidSendSpecialCharacter(Local_u8ArrowPatternDeletedArr,Local_u8ArrowwCount,Local_u8ArrowwCount,1);

				/* Local_u8Secs_Count not equal 0 */
				if(Local_u8Secs_Count != 0)
				{
					for(Local_u8Count_K = Local_u8Secs_Count ; Local_u8Count_K > 0 ; Local_u8Count_K--)
    269e:	de 01       	movw	r26, r28
    26a0:	aa 5a       	subi	r26, 0xAA	; 170
    26a2:	bf 4f       	sbci	r27, 0xFF	; 255
    26a4:	fe 01       	movw	r30, r28
    26a6:	ea 5a       	subi	r30, 0xAA	; 170
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	81 50       	subi	r24, 0x01	; 1
    26ae:	8c 93       	st	X, r24
    26b0:	fe 01       	movw	r30, r28
    26b2:	ea 5a       	subi	r30, 0xAA	; 170
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	09 f0       	breq	.+2      	; 0x26be <main+0xad8>
    26bc:	75 ce       	rjmp	.-790    	; 0x23a8 <main+0x7c2>

					}

				}
				/* Local_u8Secs_Count equals 0 */
				if(Local_u8Secs_Count == 0)
    26be:	fe 01       	movw	r30, r28
    26c0:	e8 5a       	subi	r30, 0xA8	; 168
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	88 23       	and	r24, r24
    26c8:	09 f0       	breq	.+2      	; 0x26cc <main+0xae6>
    26ca:	d3 c3       	rjmp	.+1958   	; 0x2e72 <main+0x128c>
				{
					if(Local_u8Mins_Count != 0)
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5a       	subi	r30, 0xA7	; 167
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	88 23       	and	r24, r24
    26d6:	09 f4       	brne	.+2      	; 0x26da <main+0xaf4>
    26d8:	9a c1       	rjmp	.+820    	; 0x2a0e <main+0xe28>
					{
						/* change the value of secs */

						for(Local_u8Count_L = Local_u8Mins_Count ; Local_u8Count_L > 0 ;Local_u8Count_L--)
    26da:	fe 01       	movw	r30, r28
    26dc:	eb 5a       	subi	r30, 0xAB	; 171
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	de 01       	movw	r26, r28
    26e2:	a7 5a       	subi	r26, 0xA7	; 167
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	8c 91       	ld	r24, X
    26e8:	80 83       	st	Z, r24
    26ea:	8a c1       	rjmp	.+788    	; 0x2a00 <main+0xe1a>
						{
							Local_u8Mins_Count--;
    26ec:	de 01       	movw	r26, r28
    26ee:	a7 5a       	subi	r26, 0xA7	; 167
    26f0:	bf 4f       	sbci	r27, 0xFF	; 255
    26f2:	fe 01       	movw	r30, r28
    26f4:	e7 5a       	subi	r30, 0xA7	; 167
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	8c 93       	st	X, r24

							if(Local_u8Mins_Count >9)
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 5a       	subi	r30, 0xA7	; 167
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	8a 30       	cpi	r24, 0x0A	; 10
    2708:	88 f0       	brcs	.+34     	; 0x272c <main+0xb46>
							{
								CLCD_voidGoToXY(3,0);
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(Local_u8Mins_Count);
    2712:	fe 01       	movw	r30, r28
    2714:	e7 5a       	subi	r30, 0xA7	; 167
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e0       	ldi	r26, 0x00	; 0
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    272a:	20 c0       	rjmp	.+64     	; 0x276c <main+0xb86>
							}else if(Local_u8Mins_Count <= 9)
    272c:	fe 01       	movw	r30, r28
    272e:	e7 5a       	subi	r30, 0xA7	; 167
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	8a 30       	cpi	r24, 0x0A	; 10
    2736:	d0 f4       	brcc	.+52     	; 0x276c <main+0xb86>
							{
								CLCD_voidGoToXY(3,0);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(0);
    2740:	60 e0       	ldi	r22, 0x00	; 0
    2742:	70 e0       	ldi	r23, 0x00	; 0
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
								CLCD_voidGoToXY(4,0);
    274c:	84 e0       	ldi	r24, 0x04	; 4
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(Local_u8Mins_Count);
    2754:	fe 01       	movw	r30, r28
    2756:	e7 5a       	subi	r30, 0xA7	; 167
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	88 2f       	mov	r24, r24
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a0 e0       	ldi	r26, 0x00	; 0
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
							}
							Local_u8Secs_Count=60;
    276c:	fe 01       	movw	r30, r28
    276e:	e8 5a       	subi	r30, 0xA8	; 168
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	8c e3       	ldi	r24, 0x3C	; 60
    2774:	80 83       	st	Z, r24
							for(Local_u8Count_I = 60 ;Local_u8Count_I > 0 ; Local_u8Count_I-- )
    2776:	fe 01       	movw	r30, r28
    2778:	e9 5a       	subi	r30, 0xA9	; 169
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	8c e3       	ldi	r24, 0x3C	; 60
    277e:	80 83       	st	Z, r24
    2780:	2f c1       	rjmp	.+606    	; 0x29e0 <main+0xdfa>
							{

								Local_u8Secs_Count--;
    2782:	de 01       	movw	r26, r28
    2784:	a8 5a       	subi	r26, 0xA8	; 168
    2786:	bf 4f       	sbci	r27, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	e8 5a       	subi	r30, 0xA8	; 168
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	81 50       	subi	r24, 0x01	; 1
    2792:	8c 93       	st	X, r24
								if(Local_u8Secs_Count > 9)
    2794:	fe 01       	movw	r30, r28
    2796:	e8 5a       	subi	r30, 0xA8	; 168
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	8a 30       	cpi	r24, 0x0A	; 10
    279e:	08 f4       	brcc	.+2      	; 0x27a2 <main+0xbbc>
    27a0:	83 c0       	rjmp	.+262    	; 0x28a8 <main+0xcc2>
								{
									CLCD_voidGoToXY(6,0);
    27a2:	86 e0       	ldi	r24, 0x06	; 6
    27a4:	60 e0       	ldi	r22, 0x00	; 0
    27a6:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(Local_u8Secs_Count);
    27aa:	fe 01       	movw	r30, r28
    27ac:	e8 5a       	subi	r30, 0xA8	; 168
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e0       	ldi	r26, 0x00	; 0
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	aa e7       	ldi	r26, 0x7A	; 122
    27c8:	b4 e4       	ldi	r27, 0x44	; 68
    27ca:	8d ab       	std	Y+53, r24	; 0x35
    27cc:	9e ab       	std	Y+54, r25	; 0x36
    27ce:	af ab       	std	Y+55, r26	; 0x37
    27d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	6d a9       	ldd	r22, Y+53	; 0x35
    27d4:	7e a9       	ldd	r23, Y+54	; 0x36
    27d6:	8f a9       	ldd	r24, Y+55	; 0x37
    27d8:	98 ad       	ldd	r25, Y+56	; 0x38
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a ef       	ldi	r20, 0xFA	; 250
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	89 ab       	std	Y+49, r24	; 0x31
    27ec:	9a ab       	std	Y+50, r25	; 0x32
    27ee:	ab ab       	std	Y+51, r26	; 0x33
    27f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f2:	69 a9       	ldd	r22, Y+49	; 0x31
    27f4:	7a a9       	ldd	r23, Y+50	; 0x32
    27f6:	8b a9       	ldd	r24, Y+51	; 0x33
    27f8:	9c a9       	ldd	r25, Y+52	; 0x34
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <main+0xc2e>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	98 ab       	std	Y+48, r25	; 0x30
    2810:	8f a7       	std	Y+47, r24	; 0x2f
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <main+0xcac>
	else if (__tmp > 65535)
    2814:	69 a9       	ldd	r22, Y+49	; 0x31
    2816:	7a a9       	ldd	r23, Y+50	; 0x32
    2818:	8b a9       	ldd	r24, Y+51	; 0x33
    281a:	9c a9       	ldd	r25, Y+52	; 0x34
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <main+0xc98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	6d a9       	ldd	r22, Y+53	; 0x35
    282e:	7e a9       	ldd	r23, Y+54	; 0x36
    2830:	8f a9       	ldd	r24, Y+55	; 0x37
    2832:	98 ad       	ldd	r25, Y+56	; 0x38
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	98 ab       	std	Y+48, r25	; 0x30
    2852:	8f a7       	std	Y+47, r24	; 0x2f
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <main+0xc8e>
    2856:	88 ec       	ldi	r24, 0xC8	; 200
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9e a7       	std	Y+46, r25	; 0x2e
    285c:	8d a7       	std	Y+45, r24	; 0x2d
    285e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2860:	9e a5       	ldd	r25, Y+46	; 0x2e
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <main+0xc7c>
    2866:	9e a7       	std	Y+46, r25	; 0x2e
    2868:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8f a5       	ldd	r24, Y+47	; 0x2f
    286c:	98 a9       	ldd	r25, Y+48	; 0x30
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	98 ab       	std	Y+48, r25	; 0x30
    2872:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8f a5       	ldd	r24, Y+47	; 0x2f
    2876:	98 a9       	ldd	r25, Y+48	; 0x30
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <main+0xc70>
    287c:	a8 c0       	rjmp	.+336    	; 0x29ce <main+0xde8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	69 a9       	ldd	r22, Y+49	; 0x31
    2880:	7a a9       	ldd	r23, Y+50	; 0x32
    2882:	8b a9       	ldd	r24, Y+51	; 0x33
    2884:	9c a9       	ldd	r25, Y+52	; 0x34
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	98 ab       	std	Y+48, r25	; 0x30
    2890:	8f a7       	std	Y+47, r24	; 0x2f
    2892:	8f a5       	ldd	r24, Y+47	; 0x2f
    2894:	98 a9       	ldd	r25, Y+48	; 0x30
    2896:	9c a7       	std	Y+44, r25	; 0x2c
    2898:	8b a7       	std	Y+43, r24	; 0x2b
    289a:	8b a5       	ldd	r24, Y+43	; 0x2b
    289c:	9c a5       	ldd	r25, Y+44	; 0x2c
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0xcb8>
    28a2:	9c a7       	std	Y+44, r25	; 0x2c
    28a4:	8b a7       	std	Y+43, r24	; 0x2b
    28a6:	93 c0       	rjmp	.+294    	; 0x29ce <main+0xde8>
									_delay_ms(1000);
								}else if(Local_u8Secs_Count <= 9)
    28a8:	fe 01       	movw	r30, r28
    28aa:	e8 5a       	subi	r30, 0xA8	; 168
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	8a 30       	cpi	r24, 0x0A	; 10
    28b2:	08 f0       	brcs	.+2      	; 0x28b6 <main+0xcd0>
    28b4:	8c c0       	rjmp	.+280    	; 0x29ce <main+0xde8>
								{
									CLCD_voidGoToXY(6,0);
    28b6:	86 e0       	ldi	r24, 0x06	; 6
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(0);
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
									CLCD_voidGoToXY(7,0);
    28ca:	87 e0       	ldi	r24, 0x07	; 7
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(Local_u8Secs_Count);
    28d2:	fe 01       	movw	r30, r28
    28d4:	e8 5a       	subi	r30, 0xA8	; 168
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a0 e0       	ldi	r26, 0x00	; 0
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	aa e7       	ldi	r26, 0x7A	; 122
    28f0:	b4 e4       	ldi	r27, 0x44	; 68
    28f2:	8f a3       	std	Y+39, r24	; 0x27
    28f4:	98 a7       	std	Y+40, r25	; 0x28
    28f6:	a9 a7       	std	Y+41, r26	; 0x29
    28f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6f a1       	ldd	r22, Y+39	; 0x27
    28fc:	78 a5       	ldd	r23, Y+40	; 0x28
    28fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2900:	9a a5       	ldd	r25, Y+42	; 0x2a
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8b a3       	std	Y+35, r24	; 0x23
    2914:	9c a3       	std	Y+36, r25	; 0x24
    2916:	ad a3       	std	Y+37, r26	; 0x25
    2918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    291a:	6b a1       	ldd	r22, Y+35	; 0x23
    291c:	7c a1       	ldd	r23, Y+36	; 0x24
    291e:	8d a1       	ldd	r24, Y+37	; 0x25
    2920:	9e a1       	ldd	r25, Y+38	; 0x26
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <main+0xd56>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9a a3       	std	Y+34, r25	; 0x22
    2938:	89 a3       	std	Y+33, r24	; 0x21
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <main+0xdd4>
	else if (__tmp > 65535)
    293c:	6b a1       	ldd	r22, Y+35	; 0x23
    293e:	7c a1       	ldd	r23, Y+36	; 0x24
    2940:	8d a1       	ldd	r24, Y+37	; 0x25
    2942:	9e a1       	ldd	r25, Y+38	; 0x26
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <main+0xdc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6f a1       	ldd	r22, Y+39	; 0x27
    2956:	78 a5       	ldd	r23, Y+40	; 0x28
    2958:	89 a5       	ldd	r24, Y+41	; 0x29
    295a:	9a a5       	ldd	r25, Y+42	; 0x2a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9a a3       	std	Y+34, r25	; 0x22
    297a:	89 a3       	std	Y+33, r24	; 0x21
    297c:	0f c0       	rjmp	.+30     	; 0x299c <main+0xdb6>
    297e:	88 ec       	ldi	r24, 0xC8	; 200
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	98 a3       	std	Y+32, r25	; 0x20
    2984:	8f 8f       	std	Y+31, r24	; 0x1f
    2986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2988:	98 a1       	ldd	r25, Y+32	; 0x20
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <main+0xda4>
    298e:	98 a3       	std	Y+32, r25	; 0x20
    2990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	89 a1       	ldd	r24, Y+33	; 0x21
    2994:	9a a1       	ldd	r25, Y+34	; 0x22
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9a a3       	std	Y+34, r25	; 0x22
    299a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	89 a1       	ldd	r24, Y+33	; 0x21
    299e:	9a a1       	ldd	r25, Y+34	; 0x22
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <main+0xd98>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <main+0xde8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6b a1       	ldd	r22, Y+35	; 0x23
    29a8:	7c a1       	ldd	r23, Y+36	; 0x24
    29aa:	8d a1       	ldd	r24, Y+37	; 0x25
    29ac:	9e a1       	ldd	r25, Y+38	; 0x26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9a a3       	std	Y+34, r25	; 0x22
    29b8:	89 a3       	std	Y+33, r24	; 0x21
    29ba:	89 a1       	ldd	r24, Y+33	; 0x21
    29bc:	9a a1       	ldd	r25, Y+34	; 0x22
    29be:	9e 8f       	std	Y+30, r25	; 0x1e
    29c0:	8d 8f       	std	Y+29, r24	; 0x1d
    29c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <main+0xde0>
    29ca:	9e 8f       	std	Y+30, r25	; 0x1e
    29cc:	8d 8f       	std	Y+29, r24	; 0x1d
								CLCD_voidSendNumber(0);
								CLCD_voidGoToXY(4,0);
								CLCD_voidSendNumber(Local_u8Mins_Count);
							}
							Local_u8Secs_Count=60;
							for(Local_u8Count_I = 60 ;Local_u8Count_I > 0 ; Local_u8Count_I-- )
    29ce:	de 01       	movw	r26, r28
    29d0:	a9 5a       	subi	r26, 0xA9	; 169
    29d2:	bf 4f       	sbci	r27, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	e9 5a       	subi	r30, 0xA9	; 169
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	8c 93       	st	X, r24
    29e0:	fe 01       	movw	r30, r28
    29e2:	e9 5a       	subi	r30, 0xA9	; 169
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <main+0xe08>
    29ec:	ca ce       	rjmp	.-620    	; 0x2782 <main+0xb9c>
				{
					if(Local_u8Mins_Count != 0)
					{
						/* change the value of secs */

						for(Local_u8Count_L = Local_u8Mins_Count ; Local_u8Count_L > 0 ;Local_u8Count_L--)
    29ee:	de 01       	movw	r26, r28
    29f0:	ab 5a       	subi	r26, 0xAB	; 171
    29f2:	bf 4f       	sbci	r27, 0xFF	; 255
    29f4:	fe 01       	movw	r30, r28
    29f6:	eb 5a       	subi	r30, 0xAB	; 171
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	81 50       	subi	r24, 0x01	; 1
    29fe:	8c 93       	st	X, r24
    2a00:	fe 01       	movw	r30, r28
    2a02:	eb 5a       	subi	r30, 0xAB	; 171
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	88 23       	and	r24, r24
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <main+0xe28>
    2a0c:	6f ce       	rjmp	.-802    	; 0x26ec <main+0xb06>
									_delay_ms(1000);
								}
							}
						}
					}
					if( Local_u8Hrs_Count !=0)
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e6 5a       	subi	r30, 0xA6	; 166
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	80 81       	ld	r24, Z
    2a16:	88 23       	and	r24, r24
    2a18:	09 f4       	brne	.+2      	; 0x2a1c <main+0xe36>
    2a1a:	f5 c1       	rjmp	.+1002   	; 0x2e06 <main+0x1220>
					{

						for(Local_u8Count_I = Local_u8Hrs_Count;Local_u8Count_I>0;Local_u8Count_I--)
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e9 5a       	subi	r30, 0xA9	; 169
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	de 01       	movw	r26, r28
    2a24:	a6 5a       	subi	r26, 0xA6	; 166
    2a26:	bf 4f       	sbci	r27, 0xFF	; 255
    2a28:	8c 91       	ld	r24, X
    2a2a:	80 83       	st	Z, r24
    2a2c:	e5 c1       	rjmp	.+970    	; 0x2df8 <main+0x1212>
						{
							Local_u8Hrs_Count--;
    2a2e:	de 01       	movw	r26, r28
    2a30:	a6 5a       	subi	r26, 0xA6	; 166
    2a32:	bf 4f       	sbci	r27, 0xFF	; 255
    2a34:	fe 01       	movw	r30, r28
    2a36:	e6 5a       	subi	r30, 0xA6	; 166
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 81       	ld	r24, Z
    2a3c:	81 50       	subi	r24, 0x01	; 1
    2a3e:	8c 93       	st	X, r24
							if(Local_u8Hrs_Count >9)
    2a40:	fe 01       	movw	r30, r28
    2a42:	e6 5a       	subi	r30, 0xA6	; 166
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	8a 30       	cpi	r24, 0x0A	; 10
    2a4a:	88 f0       	brcs	.+34     	; 0x2a6e <main+0xe88>
							{
								CLCD_voidGoToXY(0,0);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(Local_u8Hrs_Count);
    2a54:	fe 01       	movw	r30, r28
    2a56:	e6 5a       	subi	r30, 0xA6	; 166
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 e0       	ldi	r26, 0x00	; 0
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2a6c:	20 c0       	rjmp	.+64     	; 0x2aae <main+0xec8>
							}else if(Local_u8Hrs_Count <= 9)
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e6 5a       	subi	r30, 0xA6	; 166
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	8a 30       	cpi	r24, 0x0A	; 10
    2a78:	d0 f4       	brcc	.+52     	; 0x2aae <main+0xec8>
							{
								CLCD_voidGoToXY(0,0);
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(0);
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
								CLCD_voidGoToXY(1,0);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
								CLCD_voidSendNumber(Local_u8Hrs_Count);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e6 5a       	subi	r30, 0xA6	; 166
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	88 2f       	mov	r24, r24
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e0       	ldi	r26, 0x00	; 0
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
							}
							Local_u8Mins_Count = 60;
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e7 5a       	subi	r30, 0xA7	; 167
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	8c e3       	ldi	r24, 0x3C	; 60
    2ab6:	80 83       	st	Z, r24

							for(Local_u8Count_L = 60 ; Local_u8Count_L > 0 ;Local_u8Count_L--)
    2ab8:	fe 01       	movw	r30, r28
    2aba:	eb 5a       	subi	r30, 0xAB	; 171
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	8c e3       	ldi	r24, 0x3C	; 60
    2ac0:	80 83       	st	Z, r24
    2ac2:	8a c1       	rjmp	.+788    	; 0x2dd8 <main+0x11f2>
							{
								Local_u8Mins_Count--;
    2ac4:	de 01       	movw	r26, r28
    2ac6:	a7 5a       	subi	r26, 0xA7	; 167
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 5a       	subi	r30, 0xA7	; 167
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	81 50       	subi	r24, 0x01	; 1
    2ad4:	8c 93       	st	X, r24
								if(Local_u8Mins_Count >9)
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 5a       	subi	r30, 0xA7	; 167
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 81       	ld	r24, Z
    2ade:	8a 30       	cpi	r24, 0x0A	; 10
    2ae0:	88 f0       	brcs	.+34     	; 0x2b04 <main+0xf1e>
								{
									CLCD_voidGoToXY(3,0);
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(Local_u8Mins_Count);
    2aea:	fe 01       	movw	r30, r28
    2aec:	e7 5a       	subi	r30, 0xA7	; 167
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a0 e0       	ldi	r26, 0x00	; 0
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2b02:	20 c0       	rjmp	.+64     	; 0x2b44 <main+0xf5e>
								}else if(Local_u8Mins_Count <= 9)
    2b04:	fe 01       	movw	r30, r28
    2b06:	e7 5a       	subi	r30, 0xA7	; 167
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8a 30       	cpi	r24, 0x0A	; 10
    2b0e:	d0 f4       	brcc	.+52     	; 0x2b44 <main+0xf5e>
								{
									CLCD_voidGoToXY(3,0);
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	60 e0       	ldi	r22, 0x00	; 0
    2b14:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(0);
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
									CLCD_voidGoToXY(4,0);
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
									CLCD_voidSendNumber(Local_u8Mins_Count);
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5a       	subi	r30, 0xA7	; 167
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	80 81       	ld	r24, Z
    2b34:	88 2f       	mov	r24, r24
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
								}
								Local_u8Secs_Count = 60;
    2b44:	fe 01       	movw	r30, r28
    2b46:	e8 5a       	subi	r30, 0xA8	; 168
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	8c e3       	ldi	r24, 0x3C	; 60
    2b4c:	80 83       	st	Z, r24
								for(Local_u8Count_I = 60 ;Local_u8Count_I > 0 ; Local_u8Count_I-- )
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 5a       	subi	r30, 0xA9	; 169
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	8c e3       	ldi	r24, 0x3C	; 60
    2b56:	80 83       	st	Z, r24
    2b58:	2f c1       	rjmp	.+606    	; 0x2db8 <main+0x11d2>
								{

									Local_u8Secs_Count--;
    2b5a:	de 01       	movw	r26, r28
    2b5c:	a8 5a       	subi	r26, 0xA8	; 168
    2b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	e8 5a       	subi	r30, 0xA8	; 168
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	81 50       	subi	r24, 0x01	; 1
    2b6a:	8c 93       	st	X, r24
									if(Local_u8Secs_Count > 9)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e8 5a       	subi	r30, 0xA8	; 168
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	8a 30       	cpi	r24, 0x0A	; 10
    2b76:	08 f4       	brcc	.+2      	; 0x2b7a <main+0xf94>
    2b78:	83 c0       	rjmp	.+262    	; 0x2c80 <main+0x109a>
									{
										CLCD_voidGoToXY(6,0);
    2b7a:	86 e0       	ldi	r24, 0x06	; 6
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
										CLCD_voidSendNumber(Local_u8Secs_Count);
    2b82:	fe 01       	movw	r30, r28
    2b84:	e8 5a       	subi	r30, 0xA8	; 168
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e0       	ldi	r26, 0x00	; 0
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	bc 01       	movw	r22, r24
    2b94:	cd 01       	movw	r24, r26
    2b96:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	aa e7       	ldi	r26, 0x7A	; 122
    2ba0:	b4 e4       	ldi	r27, 0x44	; 68
    2ba2:	89 8f       	std	Y+25, r24	; 0x19
    2ba4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ba6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ba8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	69 8d       	ldd	r22, Y+25	; 0x19
    2bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4a ef       	ldi	r20, 0xFA	; 250
    2bb8:	54 e4       	ldi	r21, 0x44	; 68
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	8d 8b       	std	Y+21, r24	; 0x15
    2bc4:	9e 8b       	std	Y+22, r25	; 0x16
    2bc6:	af 8b       	std	Y+23, r26	; 0x17
    2bc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bca:	6d 89       	ldd	r22, Y+21	; 0x15
    2bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bce:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	2c f4       	brge	.+10     	; 0x2bec <main+0x1006>
		__ticks = 1;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9c 8b       	std	Y+20, r25	; 0x14
    2be8:	8b 8b       	std	Y+19, r24	; 0x13
    2bea:	3f c0       	rjmp	.+126    	; 0x2c6a <main+0x1084>
	else if (__tmp > 65535)
    2bec:	6d 89       	ldd	r22, Y+21	; 0x15
    2bee:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	4c f5       	brge	.+82     	; 0x2c56 <main+0x1070>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c04:	69 8d       	ldd	r22, Y+25	; 0x19
    2c06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e2       	ldi	r20, 0x20	; 32
    2c12:	51 e4       	ldi	r21, 0x41	; 65
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9c 8b       	std	Y+20, r25	; 0x14
    2c2a:	8b 8b       	std	Y+19, r24	; 0x13
    2c2c:	0f c0       	rjmp	.+30     	; 0x2c4c <main+0x1066>
    2c2e:	88 ec       	ldi	r24, 0xC8	; 200
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	9a 8b       	std	Y+18, r25	; 0x12
    2c34:	89 8b       	std	Y+17, r24	; 0x11
    2c36:	89 89       	ldd	r24, Y+17	; 0x11
    2c38:	9a 89       	ldd	r25, Y+18	; 0x12
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <main+0x1054>
    2c3e:	9a 8b       	std	Y+18, r25	; 0x12
    2c40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	8b 89       	ldd	r24, Y+19	; 0x13
    2c44:	9c 89       	ldd	r25, Y+20	; 0x14
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	69 f7       	brne	.-38     	; 0x2c2e <main+0x1048>
    2c54:	a8 c0       	rjmp	.+336    	; 0x2da6 <main+0x11c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9c 8b       	std	Y+20, r25	; 0x14
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6e:	98 8b       	std	Y+16, r25	; 0x10
    2c70:	8f 87       	std	Y+15, r24	; 0x0f
    2c72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c74:	98 89       	ldd	r25, Y+16	; 0x10
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <main+0x1090>
    2c7a:	98 8b       	std	Y+16, r25	; 0x10
    2c7c:	8f 87       	std	Y+15, r24	; 0x0f
    2c7e:	93 c0       	rjmp	.+294    	; 0x2da6 <main+0x11c0>
										_delay_ms(1000);
									}else if(Local_u8Secs_Count <= 9)
    2c80:	fe 01       	movw	r30, r28
    2c82:	e8 5a       	subi	r30, 0xA8	; 168
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	8a 30       	cpi	r24, 0x0A	; 10
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <main+0x10a8>
    2c8c:	8c c0       	rjmp	.+280    	; 0x2da6 <main+0x11c0>
									{
										CLCD_voidGoToXY(6,0);
    2c8e:	86 e0       	ldi	r24, 0x06	; 6
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
										CLCD_voidSendNumber(0);
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
										CLCD_voidGoToXY(7,0);
    2ca2:	87 e0       	ldi	r24, 0x07	; 7
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
										CLCD_voidSendNumber(Local_u8Secs_Count);
    2caa:	fe 01       	movw	r30, r28
    2cac:	e8 5a       	subi	r30, 0xA8	; 168
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a0 e0       	ldi	r26, 0x00	; 0
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 27 07 	call	0xe4e	; 0xe4e <CLCD_voidSendNumber>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	aa e7       	ldi	r26, 0x7A	; 122
    2cc8:	b4 e4       	ldi	r27, 0x44	; 68
    2cca:	8b 87       	std	Y+11, r24	; 0x0b
    2ccc:	9c 87       	std	Y+12, r25	; 0x0c
    2cce:	ad 87       	std	Y+13, r26	; 0x0d
    2cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	4a ef       	ldi	r20, 0xFA	; 250
    2ce0:	54 e4       	ldi	r21, 0x44	; 68
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8f 83       	std	Y+7, r24	; 0x07
    2cec:	98 87       	std	Y+8, r25	; 0x08
    2cee:	a9 87       	std	Y+9, r26	; 0x09
    2cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf4:	78 85       	ldd	r23, Y+8	; 0x08
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e8       	ldi	r20, 0x80	; 128
    2d00:	5f e3       	ldi	r21, 0x3F	; 63
    2d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d06:	88 23       	and	r24, r24
    2d08:	2c f4       	brge	.+10     	; 0x2d14 <main+0x112e>
		__ticks = 1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <main+0x11ac>
	else if (__tmp > 65535)
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	3f ef       	ldi	r19, 0xFF	; 255
    2d20:	4f e7       	ldi	r20, 0x7F	; 127
    2d22:	57 e4       	ldi	r21, 0x47	; 71
    2d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d28:	18 16       	cp	r1, r24
    2d2a:	4c f5       	brge	.+82     	; 0x2d7e <main+0x1198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e2       	ldi	r20, 0x20	; 32
    2d3a:	51 e4       	ldi	r21, 0x41	; 65
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	9e 83       	std	Y+6, r25	; 0x06
    2d52:	8d 83       	std	Y+5, r24	; 0x05
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <main+0x118e>
    2d56:	88 ec       	ldi	r24, 0xC8	; 200
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	9c 81       	ldd	r25, Y+4	; 0x04
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <main+0x117c>
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	9e 83       	std	Y+6, r25	; 0x06
    2d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d74:	8d 81       	ldd	r24, Y+5	; 0x05
    2d76:	9e 81       	ldd	r25, Y+6	; 0x06
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	69 f7       	brne	.-38     	; 0x2d56 <main+0x1170>
    2d7c:	14 c0       	rjmp	.+40     	; 0x2da6 <main+0x11c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	9e 83       	std	Y+6, r25	; 0x06
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	9e 81       	ldd	r25, Y+6	; 0x06
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <main+0x11b8>
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
									CLCD_voidSendNumber(0);
									CLCD_voidGoToXY(4,0);
									CLCD_voidSendNumber(Local_u8Mins_Count);
								}
								Local_u8Secs_Count = 60;
								for(Local_u8Count_I = 60 ;Local_u8Count_I > 0 ; Local_u8Count_I-- )
    2da6:	de 01       	movw	r26, r28
    2da8:	a9 5a       	subi	r26, 0xA9	; 169
    2daa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 5a       	subi	r30, 0xA9	; 169
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	81 50       	subi	r24, 0x01	; 1
    2db6:	8c 93       	st	X, r24
    2db8:	fe 01       	movw	r30, r28
    2dba:	e9 5a       	subi	r30, 0xA9	; 169
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	80 81       	ld	r24, Z
    2dc0:	88 23       	and	r24, r24
    2dc2:	09 f0       	breq	.+2      	; 0x2dc6 <main+0x11e0>
    2dc4:	ca ce       	rjmp	.-620    	; 0x2b5a <main+0xf74>
								CLCD_voidGoToXY(1,0);
								CLCD_voidSendNumber(Local_u8Hrs_Count);
							}
							Local_u8Mins_Count = 60;

							for(Local_u8Count_L = 60 ; Local_u8Count_L > 0 ;Local_u8Count_L--)
    2dc6:	de 01       	movw	r26, r28
    2dc8:	ab 5a       	subi	r26, 0xAB	; 171
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 5a       	subi	r30, 0xAB	; 171
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	81 50       	subi	r24, 0x01	; 1
    2dd6:	8c 93       	st	X, r24
    2dd8:	fe 01       	movw	r30, r28
    2dda:	eb 5a       	subi	r30, 0xAB	; 171
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	88 23       	and	r24, r24
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <main+0x1200>
    2de4:	6f ce       	rjmp	.-802    	; 0x2ac4 <main+0xede>
						}
					}
					if( Local_u8Hrs_Count !=0)
					{

						for(Local_u8Count_I = Local_u8Hrs_Count;Local_u8Count_I>0;Local_u8Count_I--)
    2de6:	de 01       	movw	r26, r28
    2de8:	a9 5a       	subi	r26, 0xA9	; 169
    2dea:	bf 4f       	sbci	r27, 0xFF	; 255
    2dec:	fe 01       	movw	r30, r28
    2dee:	e9 5a       	subi	r30, 0xA9	; 169
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	81 50       	subi	r24, 0x01	; 1
    2df6:	8c 93       	st	X, r24
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e9 5a       	subi	r30, 0xA9	; 169
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 23       	and	r24, r24
    2e02:	09 f0       	breq	.+2      	; 0x2e06 <main+0x1220>
    2e04:	14 ce       	rjmp	.-984    	; 0x2a2e <main+0xe48>
								}
							}
						}
					}

					if(Local_u8Mins_Count == 0 && Local_u8Hrs_Count ==0 && Local_u8Secs_Count ==0)
    2e06:	fe 01       	movw	r30, r28
    2e08:	e7 5a       	subi	r30, 0xA7	; 167
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	80 81       	ld	r24, Z
    2e0e:	88 23       	and	r24, r24
    2e10:	81 f5       	brne	.+96     	; 0x2e72 <main+0x128c>
    2e12:	fe 01       	movw	r30, r28
    2e14:	e6 5a       	subi	r30, 0xA6	; 166
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	80 81       	ld	r24, Z
    2e1a:	88 23       	and	r24, r24
    2e1c:	51 f5       	brne	.+84     	; 0x2e72 <main+0x128c>
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e8 5a       	subi	r30, 0xA8	; 168
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	88 23       	and	r24, r24
    2e28:	21 f5       	brne	.+72     	; 0x2e72 <main+0x128c>
					{
						/* Time is up */
						CLCD_voidGoToXY(1,1);
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	61 e0       	ldi	r22, 0x01	; 1
    2e2e:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
						CLCD_voidSendSpecialCharacter(Local_u8HamokshaArr,1,1,1);
    2e32:	83 e9       	ldi	r24, 0x93	; 147
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	61 e0       	ldi	r22, 0x01	; 1
    2e38:	41 e0       	ldi	r20, 0x01	; 1
    2e3a:	21 e0       	ldi	r18, 0x01	; 1
    2e3c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <CLCD_voidSendSpecialCharacter>
						CLCD_voidGoToXY(3,1);
    2e40:	83 e0       	ldi	r24, 0x03	; 3
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	0e 94 b4 07 	call	0xf68	; 0xf68 <CLCD_voidGoToXY>
						CLCD_u8SendString("Time is up");
    2e48:	80 e6       	ldi	r24, 0x60	; 96
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 f4 06 	call	0xde8	; 0xde8 <CLCD_u8SendString>
						DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN7,DIO_u8PIN_HIGH);
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	67 e0       	ldi	r22, 0x07	; 7
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8SetPinValue>
			}
			Local_u8PressedKey = 0xff ;

		}
	}
}
    2e5a:	c4 5a       	subi	r28, 0xA4	; 164
    2e5c:	df 4f       	sbci	r29, 0xFF	; 255
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret
					}

				}

			}
			Local_u8PressedKey = 0xff ;
    2e72:	fe 01       	movw	r30, r28
    2e74:	e4 5a       	subi	r30, 0xA4	; 164
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	8f ef       	ldi	r24, 0xFF	; 255
    2e7a:	80 83       	st	Z, r24
    2e7c:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <main+0x8a>

00002e80 <__divmodsi4>:
    2e80:	97 fb       	bst	r25, 7
    2e82:	09 2e       	mov	r0, r25
    2e84:	05 26       	eor	r0, r21
    2e86:	0e d0       	rcall	.+28     	; 0x2ea4 <__divmodsi4_neg1>
    2e88:	57 fd       	sbrc	r21, 7
    2e8a:	04 d0       	rcall	.+8      	; 0x2e94 <__divmodsi4_neg2>
    2e8c:	14 d0       	rcall	.+40     	; 0x2eb6 <__udivmodsi4>
    2e8e:	0a d0       	rcall	.+20     	; 0x2ea4 <__divmodsi4_neg1>
    2e90:	00 1c       	adc	r0, r0
    2e92:	38 f4       	brcc	.+14     	; 0x2ea2 <__divmodsi4_exit>

00002e94 <__divmodsi4_neg2>:
    2e94:	50 95       	com	r21
    2e96:	40 95       	com	r20
    2e98:	30 95       	com	r19
    2e9a:	21 95       	neg	r18
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	4f 4f       	sbci	r20, 0xFF	; 255
    2ea0:	5f 4f       	sbci	r21, 0xFF	; 255

00002ea2 <__divmodsi4_exit>:
    2ea2:	08 95       	ret

00002ea4 <__divmodsi4_neg1>:
    2ea4:	f6 f7       	brtc	.-4      	; 0x2ea2 <__divmodsi4_exit>
    2ea6:	90 95       	com	r25
    2ea8:	80 95       	com	r24
    2eaa:	70 95       	com	r23
    2eac:	61 95       	neg	r22
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb4:	08 95       	ret

00002eb6 <__udivmodsi4>:
    2eb6:	a1 e2       	ldi	r26, 0x21	; 33
    2eb8:	1a 2e       	mov	r1, r26
    2eba:	aa 1b       	sub	r26, r26
    2ebc:	bb 1b       	sub	r27, r27
    2ebe:	fd 01       	movw	r30, r26
    2ec0:	0d c0       	rjmp	.+26     	; 0x2edc <__udivmodsi4_ep>

00002ec2 <__udivmodsi4_loop>:
    2ec2:	aa 1f       	adc	r26, r26
    2ec4:	bb 1f       	adc	r27, r27
    2ec6:	ee 1f       	adc	r30, r30
    2ec8:	ff 1f       	adc	r31, r31
    2eca:	a2 17       	cp	r26, r18
    2ecc:	b3 07       	cpc	r27, r19
    2ece:	e4 07       	cpc	r30, r20
    2ed0:	f5 07       	cpc	r31, r21
    2ed2:	20 f0       	brcs	.+8      	; 0x2edc <__udivmodsi4_ep>
    2ed4:	a2 1b       	sub	r26, r18
    2ed6:	b3 0b       	sbc	r27, r19
    2ed8:	e4 0b       	sbc	r30, r20
    2eda:	f5 0b       	sbc	r31, r21

00002edc <__udivmodsi4_ep>:
    2edc:	66 1f       	adc	r22, r22
    2ede:	77 1f       	adc	r23, r23
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	99 1f       	adc	r25, r25
    2ee4:	1a 94       	dec	r1
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <__udivmodsi4_loop>
    2ee8:	60 95       	com	r22
    2eea:	70 95       	com	r23
    2eec:	80 95       	com	r24
    2eee:	90 95       	com	r25
    2ef0:	9b 01       	movw	r18, r22
    2ef2:	ac 01       	movw	r20, r24
    2ef4:	bd 01       	movw	r22, r26
    2ef6:	cf 01       	movw	r24, r30
    2ef8:	08 95       	ret

00002efa <__prologue_saves__>:
    2efa:	2f 92       	push	r2
    2efc:	3f 92       	push	r3
    2efe:	4f 92       	push	r4
    2f00:	5f 92       	push	r5
    2f02:	6f 92       	push	r6
    2f04:	7f 92       	push	r7
    2f06:	8f 92       	push	r8
    2f08:	9f 92       	push	r9
    2f0a:	af 92       	push	r10
    2f0c:	bf 92       	push	r11
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	ca 1b       	sub	r28, r26
    2f24:	db 0b       	sbc	r29, r27
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	09 94       	ijmp

00002f32 <__epilogue_restores__>:
    2f32:	2a 88       	ldd	r2, Y+18	; 0x12
    2f34:	39 88       	ldd	r3, Y+17	; 0x11
    2f36:	48 88       	ldd	r4, Y+16	; 0x10
    2f38:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f40:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f42:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f44:	b9 84       	ldd	r11, Y+9	; 0x09
    2f46:	c8 84       	ldd	r12, Y+8	; 0x08
    2f48:	df 80       	ldd	r13, Y+7	; 0x07
    2f4a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f4c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f4e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f50:	1b 81       	ldd	r17, Y+3	; 0x03
    2f52:	aa 81       	ldd	r26, Y+2	; 0x02
    2f54:	b9 81       	ldd	r27, Y+1	; 0x01
    2f56:	ce 0f       	add	r28, r30
    2f58:	d1 1d       	adc	r29, r1
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	ed 01       	movw	r28, r26
    2f66:	08 95       	ret

00002f68 <_exit>:
    2f68:	f8 94       	cli

00002f6a <__stop_program>:
    2f6a:	ff cf       	rjmp	.-2      	; 0x2f6a <__stop_program>
