
LogIn_Sys_ADC_And_DCmotorAPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00003a9c  00003b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000fe  008000fe  00003bce  2**0
                  ALLOC
  3 .stab         000038f4  00000000  00000000  00003bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015aa  00000000  00000000  000074c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a967  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b852  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c600  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d1bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 13 	call	0x26f0	; 0x26f0 <main>
      8a:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 eb       	ldi	r26, 0xB6	; 182
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 eb       	ldi	r24, 0xB6	; 182
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 41 1d 	jmp	0x3a82	; 0x3a82 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

static uint8 ADC_u8IntSource_Falg;


void  ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(ADMUX,ADC_u8ADMUX_REFS1);
	CLR_BIT(ADMUX,ADC_u8ADMUX_REFS0);

#elif ADC_u8REF_VOLT == AVCC_REF
	CLR_BIT(ADMUX,ADC_u8ADMUX_REFS1);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADC_u8ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

#endif

/* configure the resolution of ADC ==> Left adjust(EIGHT_BITS) or right adjust */
#if   ADC_u8RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX,ADC_u8ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
/* ADC Perphral INTERRUPT ===> ENABLED OR DISABLED */
#if   ADC_u8INT_ENABLE == ENABLED

	SET_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
#elif ADC_u8INT_ENABLE == DISABLED
	CLR_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	8c 93       	st	X, r24

#endif


	/* Set prescaler  */
	ADCSRA &= PRESCALER_MASK; /* this line to avoid any error value in the first three bits  */
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PRESCALER_VAL; /* at all time i am sure that the first three bits have the value of prescaler */
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	87 60       	ori	r24, 0x07	; 7
     ba0:	8c 93       	st	X, r24


	/* Enable ADC */
	SET_BIT(ADCSRA,ADC_u8ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8StartConversionSynch>:

uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel ,uint16* Copy_pu16Result)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	28 97       	sbiw	r28, 0x08	; 8
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	78 87       	std	Y+8, r23	; 0x08
     bce:	6f 83       	std	Y+7, r22	; 0x07
	/* define local error state */
	uint8 Local_u8ErrorState =OK;
     bd0:	1d 82       	std	Y+5, r1	; 0x05


	/* check on the value of pointer Copy_pu16Result is equal NULL Or Not */
	if(Copy_pu16Result != NULL)
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	09 f4       	brne	.+2      	; 0xbdc <ADC_u8StartConversionSynch+0x26>
     bda:	6a c0       	rjmp	.+212    	; 0xcb0 <ADC_u8StartConversionSynch+0xfa>
	{
		/* if ADC is not BUSY */
		if (ADC_u8BusyFlag == IDLE)
     bdc:	80 91 be 00 	lds	r24, 0x00BE
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <ADC_u8StartConversionSynch+0x30>
     be4:	62 c0       	rjmp	.+196    	; 0xcaa <ADC_u8StartConversionSynch+0xf4>
		{
			/* This variable for TimeOutCounter */
			uint32 Local_u32TimeOutCounter=0u;
     be6:	19 82       	std	Y+1, r1	; 0x01
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	1b 82       	std	Y+3, r1	; 0x03
     bec:	1c 82       	std	Y+4, r1	; 0x04
			/* ADC is now BUSY  */
			ADC_u8BusyFlag = BUSY;
     bee:	10 92 be 00 	sts	0x00BE, r1

			/* configure the analog channel */
			ADMUX &= CHANNEL_MASK;/* this line to avoid any error value in the first five bits  */
     bf2:	a7 e2       	ldi	r26, 0x27	; 39
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e7 e2       	ldi	r30, 0x27	; 39
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;/* at all time i am sure that the first five bits have the value of Copy_u8Channel */
     c00:	a7 e2       	ldi	r26, 0x27	; 39
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e7 e2       	ldi	r30, 0x27	; 39
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	90 81       	ld	r25, Z
     c0a:	8e 81       	ldd	r24, Y+6	; 0x06
     c0c:	89 2b       	or	r24, r25
     c0e:	8c 93       	st	X, r24

			/* Set start conversion bit  */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADSC);
     c10:	a6 e2       	ldi	r26, 0x26	; 38
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e6 e2       	ldi	r30, 0x26	; 38
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 64       	ori	r24, 0x40	; 64
     c1c:	8c 93       	st	X, r24
     c1e:	0b c0       	rjmp	.+22     	; 0xc36 <ADC_u8StartConversionSynch+0x80>

			/* Polling method : wait until the conversion complete or the timeout is passed  */
			while((GET_BIT(ADCSRA,ADC_u8ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32TIMEOUT ))
			{
				/* increment by 1 */
				Local_u32TimeOutCounter++;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	ab 81       	ldd	r26, Y+3	; 0x03
     c26:	bc 81       	ldd	r27, Y+4	; 0x04
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	a1 1d       	adc	r26, r1
     c2c:	b1 1d       	adc	r27, r1
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	ab 83       	std	Y+3, r26	; 0x03
     c34:	bc 83       	std	Y+4, r27	; 0x04

			/* Set start conversion bit  */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADSC);

			/* Polling method : wait until the conversion complete or the timeout is passed  */
			while((GET_BIT(ADCSRA,ADC_u8ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32TIMEOUT ))
     c36:	e6 e2       	ldi	r30, 0x26	; 38
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	82 95       	swap	r24
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	81 70       	andi	r24, 0x01	; 1
     c46:	90 70       	andi	r25, 0x00	; 0
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	61 f4       	brne	.+24     	; 0xc64 <ADC_u8StartConversionSynch+0xae>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	ab 81       	ldd	r26, Y+3	; 0x03
     c52:	bc 81       	ldd	r27, Y+4	; 0x04
     c54:	80 35       	cpi	r24, 0x50	; 80
     c56:	23 ec       	ldi	r18, 0xC3	; 195
     c58:	92 07       	cpc	r25, r18
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	a2 07       	cpc	r26, r18
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	b2 07       	cpc	r27, r18
     c62:	f0 f2       	brcs	.-68     	; 0xc20 <ADC_u8StartConversionSynch+0x6a>
			{
				/* increment by 1 */
				Local_u32TimeOutCounter++;
			}

			if(Local_u32TimeOutCounter >= ADC_u32TIMEOUT)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	ab 81       	ldd	r26, Y+3	; 0x03
     c6a:	bc 81       	ldd	r27, Y+4	; 0x04
     c6c:	80 35       	cpi	r24, 0x50	; 80
     c6e:	23 ec       	ldi	r18, 0xC3	; 195
     c70:	92 07       	cpc	r25, r18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	a2 07       	cpc	r26, r18
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	b2 07       	cpc	r27, r18
     c7a:	18 f0       	brcs	.+6      	; 0xc82 <ADC_u8StartConversionSynch+0xcc>
			{
				/* loop is broken because flag isn't raised until timeout is passed */
				Local_u8ErrorState = TIMEOUT_ERR;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	19 c0       	rjmp	.+50     	; 0xcb4 <ADC_u8StartConversionSynch+0xfe>
			}else
			{
				/* loop is broken because flag isn raised until timeout is passed */
				/* clear the conversion complete flag by writing 1 in ADC_u8ADCSRA_ADIF */
				SET_BIT(ADCSRA,ADC_u8ADCSRA_ADIF);
     c82:	a6 e2       	ldi	r26, 0x26	; 38
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e6 e2       	ldi	r30, 0x26	; 38
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 61       	ori	r24, 0x10	; 16
     c8e:	8c 93       	st	X, r24
				/* read data  */
#if ADC_u8RESOLUTION == EIGHT_BITS
				*Copy_pu16Result = ADCH;
     c90:	e5 e2       	ldi	r30, 0x25	; 37
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	ef 81       	ldd	r30, Y+7	; 0x07
     c9c:	f8 85       	ldd	r31, Y+8	; 0x08
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24

#elif  ADC_u8RESOLUTION == TEN_BITS
				*Copy_pu16Result = ADC;
#endif
				/* ADC Is now IDLE */
				ADC_u8BusyFlag = IDLE;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	80 93 be 00 	sts	0x00BE, r24
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <ADC_u8StartConversionSynch+0xfe>
			}
		}
		else
		{
			/* ADC was busy , assign the error state */
			Local_u8ErrorState = BUSY_ATATE_ERR;
     caa:	84 e0       	ldi	r24, 0x04	; 4
     cac:	8d 83       	std	Y+5, r24	; 0x05
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <ADC_u8StartConversionSynch+0xfe>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState;
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cb6:	28 96       	adiw	r28, 0x08	; 8
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <ADC_u8StartConversionASynch>:

uint8 ADC_u8StartConversionASynch(uint8 Copy_u8Channel ,uint16* Copy_pu16Result , void(*Copy_puNotificationFunc)(void))
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <ADC_u8StartConversionASynch+0x6>
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <ADC_u8StartConversionASynch+0x8>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <ADC_u8StartConversionASynch+0xa>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	8a 83       	std	Y+2, r24	; 0x02
     cd8:	7c 83       	std	Y+4, r23	; 0x04
     cda:	6b 83       	std	Y+3, r22	; 0x03
     cdc:	5e 83       	std	Y+6, r21	; 0x06
     cde:	4d 83       	std	Y+5, r20	; 0x05
	/* define local error state */
	uint8 Local_u8ErrorState =OK;
     ce0:	19 82       	std	Y+1, r1	; 0x01

	/* check on the value of pointer Copy_pu16Result is equal NULL Or Not */
	if((Copy_pu16Result != NULL) && (Copy_puNotificationFunc != NULL))
     ce2:	8b 81       	ldd	r24, Y+3	; 0x03
     ce4:	9c 81       	ldd	r25, Y+4	; 0x04
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	d1 f1       	breq	.+116    	; 0xd5e <ADC_u8StartConversionASynch+0x96>
     cea:	8d 81       	ldd	r24, Y+5	; 0x05
     cec:	9e 81       	ldd	r25, Y+6	; 0x06
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	b1 f1       	breq	.+108    	; 0xd5e <ADC_u8StartConversionASynch+0x96>
	{
		/* if ADC is not BUSY */
		if (ADC_u8BusyFlag == IDLE)
     cf2:	80 91 be 00 	lds	r24, 0x00BE
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	79 f5       	brne	.+94     	; 0xd58 <ADC_u8StartConversionASynch+0x90>
		{
			/* ADC is now BUSY  */
			ADC_u8BusyFlag = BUSY;
     cfa:	10 92 be 00 	sts	0x00BE, r1


			/* Initialize the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	90 93 ff 00 	sts	0x00FF, r25
     d06:	80 93 fe 00 	sts	0x00FE, r24

			/*  Initialize the notification function globally */
			ADC_puNotificationFunc = Copy_puNotificationFunc;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	9e 81       	ldd	r25, Y+6	; 0x06
     d0e:	90 93 01 01 	sts	0x0101, r25
     d12:	80 93 00 01 	sts	0x0100, r24

			/*	this flag we use it in ISR to know we work on StartConversionASynch func */
			ADC_u8IntSource_Falg = CONV_ASYNCH;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 05 01 	sts	0x0105, r24
			/* configure the analog channel */
			ADMUX &= CHANNEL_MASK;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24

			/* Set start conversion bit  */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADSC);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24

			/*	this interrupt we use it to start ISR implementation */
			/* Enable ADC conversion complete interrupt */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
     d48:	a6 e2       	ldi	r26, 0x26	; 38
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e6 e2       	ldi	r30, 0x26	; 38
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 60       	ori	r24, 0x08	; 8
     d54:	8c 93       	st	X, r24
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <ADC_u8StartConversionASynch+0x9a>

		}else
		{
			/* ADC was busy , assign the error state */
			Local_u8ErrorState = BUSY_ATATE_ERR;
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <ADC_u8StartConversionASynch+0x9a>
		}
	}else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
}
     d64:	26 96       	adiw	r28, 0x06	; 6
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <ADC_u8StartChainConversionASynch>:


uint8 ADC_u8StartChainConversionASynch(ADC_Chain_Struct *puFrom_ADC_Chain_Struct)
{
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <ADC_u8StartChainConversionASynch+0x6>
     d7c:	0f 92       	push	r0
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02
	/* define local error state */
	uint8 Local_u8ErrorState =OK;
     d86:	19 82       	std	Y+1, r1	; 0x01

	/* check on the value of pointer Copy_pu16Result is equal NULL Or Not */
	if(( puFrom_ADC_Chain_Struct->Local_pu8ChannelArr != NULL) && (puFrom_ADC_Chain_Struct-> Local_pu16ResultArr != NULL) && (puFrom_ADC_Chain_Struct-> Copy_puNotificationFunc != NULL))
     d88:	ea 81       	ldd	r30, Y+2	; 0x02
     d8a:	fb 81       	ldd	r31, Y+3	; 0x03
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	92 81       	ldd	r25, Z+2	; 0x02
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	09 f4       	brne	.+2      	; 0xd96 <ADC_u8StartChainConversionASynch+0x20>
     d94:	4d c0       	rjmp	.+154    	; 0xe30 <ADC_u8StartChainConversionASynch+0xba>
     d96:	ea 81       	ldd	r30, Y+2	; 0x02
     d98:	fb 81       	ldd	r31, Y+3	; 0x03
     d9a:	83 81       	ldd	r24, Z+3	; 0x03
     d9c:	94 81       	ldd	r25, Z+4	; 0x04
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	09 f4       	brne	.+2      	; 0xda4 <ADC_u8StartChainConversionASynch+0x2e>
     da2:	46 c0       	rjmp	.+140    	; 0xe30 <ADC_u8StartChainConversionASynch+0xba>
     da4:	ea 81       	ldd	r30, Y+2	; 0x02
     da6:	fb 81       	ldd	r31, Y+3	; 0x03
     da8:	85 81       	ldd	r24, Z+5	; 0x05
     daa:	96 81       	ldd	r25, Z+6	; 0x06
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	09 f4       	brne	.+2      	; 0xdb2 <ADC_u8StartChainConversionASynch+0x3c>
     db0:	3f c0       	rjmp	.+126    	; 0xe30 <ADC_u8StartChainConversionASynch+0xba>
	{
		/* if ADC is not BUSY */
		if (ADC_u8BusyFlag == IDLE)
     db2:	80 91 be 00 	lds	r24, 0x00BE
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	c1 f5       	brne	.+112    	; 0xe2a <ADC_u8StartChainConversionASynch+0xb4>
		{
			/* ADC is now BUSY  */
			ADC_u8BusyFlag = BUSY;
     dba:	10 92 be 00 	sts	0x00BE, r1

			/* Initailze the struct globally*/
			ADC_pstChainDataGlobally = puFrom_ADC_Chain_Struct;
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	90 93 03 01 	sts	0x0103, r25
     dc6:	80 93 02 01 	sts	0x0102, r24

			/* Initialize the counter value */
			ADC_u8ChainChannelCounter =0u;
     dca:	10 92 04 01 	sts	0x0104, r1

			/*	this flag we use it in ISR to know we work on ADC_u8StartChainConversionASynch func   */
			ADC_u8IntSource_Falg = CHAIN_CONV_ASYNCH;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	80 93 05 01 	sts	0x0105, r24

			/* configure the analog channel */
			ADMUX &= CHANNEL_MASK;
     dd4:	a7 e2       	ldi	r26, 0x27	; 39
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e2       	ldi	r30, 0x27	; 39
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 7e       	andi	r24, 0xE0	; 224
     de0:	8c 93       	st	X, r24
			ADMUX |= ADC_pstChainDataGlobally->Local_pu8ChannelArr[ADC_u8ChainChannelCounter];
     de2:	a7 e2       	ldi	r26, 0x27	; 39
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e7 e2       	ldi	r30, 0x27	; 39
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	40 81       	ld	r20, Z
     dec:	e0 91 02 01 	lds	r30, 0x0102
     df0:	f0 91 03 01 	lds	r31, 0x0103
     df4:	21 81       	ldd	r18, Z+1	; 0x01
     df6:	32 81       	ldd	r19, Z+2	; 0x02
     df8:	80 91 04 01 	lds	r24, 0x0104
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	e8 0f       	add	r30, r24
     e04:	f9 1f       	adc	r31, r25
     e06:	80 81       	ld	r24, Z
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24


			/* Set start conversion bit  */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADSC);
     e0c:	a6 e2       	ldi	r26, 0x26	; 38
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e6 e2       	ldi	r30, 0x26	; 38
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 64       	ori	r24, 0x40	; 64
     e18:	8c 93       	st	X, r24

			/* Enable ADC conversion complete interrupt */
			SET_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
     e1a:	a6 e2       	ldi	r26, 0x26	; 38
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e6 e2       	ldi	r30, 0x26	; 38
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	8c 93       	st	X, r24
     e28:	05 c0       	rjmp	.+10     	; 0xe34 <ADC_u8StartChainConversionASynch+0xbe>

		}else
		{
			/* ADC was busy , assign the error state */
			Local_u8ErrorState = BUSY_ATATE_ERR;
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <ADC_u8StartChainConversionASynch+0xbe>
		}

	}else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
}
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <__vector_16>:
/**
 * @brief ADC conversion complete ISR
 */
void __vector_16 (void)  __attribute__((signal));
void __vector_16 (void)
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62

	/* we must read the result firstly then call notification func */
	if(ADC_u8IntSource_Falg == CONV_ASYNCH)
     e6c:	80 91 05 01 	lds	r24, 0x0105
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	49 f5       	brne	.+82     	; 0xec6 <__vector_16+0x84>
	{
		if(ADC_pu16ConversionResult != NULL)
     e74:	80 91 fe 00 	lds	r24, 0x00FE
     e78:	90 91 ff 00 	lds	r25, 0x00FF
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	09 f4       	brne	.+2      	; 0xe82 <__vector_16+0x40>
     e80:	9b c0       	rjmp	.+310    	; 0xfb8 <__vector_16+0x176>
		{
#if ADC_u8RESOLUTION == EIGHT_BITS
			*ADC_pu16ConversionResult = ADCH;
     e82:	a0 91 fe 00 	lds	r26, 0x00FE
     e86:	b0 91 ff 00 	lds	r27, 0x00FF
     e8a:	e5 e2       	ldi	r30, 0x25	; 37
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	8d 93       	st	X+, r24
     e96:	9c 93       	st	X, r25
#elif  ADC_u8RESOLUTION == TEN_BITS
			*ADC_pu16ConversionResult = ADC;
#endif

			/* Disable the ADC conversion complete interrupt  */
			CLR_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	87 7f       	andi	r24, 0xF7	; 247
     ea4:	8c 93       	st	X, r24

			/* ADC Is now IDLE */
			ADC_u8BusyFlag = IDLE;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 be 00 	sts	0x00BE, r24

			/* check on ADC_puNotificationFunc if overwrite on it or not */
			if(ADC_puNotificationFunc != NULL)
     eac:	80 91 00 01 	lds	r24, 0x0100
     eb0:	90 91 01 01 	lds	r25, 0x0101
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	09 f4       	brne	.+2      	; 0xeba <__vector_16+0x78>
     eb8:	7f c0       	rjmp	.+254    	; 0xfb8 <__vector_16+0x176>
			{
				/* notify */
				ADC_puNotificationFunc();
     eba:	e0 91 00 01 	lds	r30, 0x0100
     ebe:	f0 91 01 01 	lds	r31, 0x0101
     ec2:	09 95       	icall
     ec4:	79 c0       	rjmp	.+242    	; 0xfb8 <__vector_16+0x176>
			}
		}else
		{
			/* conversion result pointer is NULL */
		}
	}else if (ADC_u8IntSource_Falg == CHAIN_CONV_ASYNCH)
     ec6:	80 91 05 01 	lds	r24, 0x0105
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	09 f0       	breq	.+2      	; 0xed0 <__vector_16+0x8e>
     ece:	74 c0       	rjmp	.+232    	; 0xfb8 <__vector_16+0x176>
	{
		if(ADC_pstChainDataGlobally->Local_pu16ResultArr[ADC_u8ChainChannelCounter] != NULL)
     ed0:	e0 91 02 01 	lds	r30, 0x0102
     ed4:	f0 91 03 01 	lds	r31, 0x0103
     ed8:	23 81       	ldd	r18, Z+3	; 0x03
     eda:	34 81       	ldd	r19, Z+4	; 0x04
     edc:	80 91 04 01 	lds	r24, 0x0104
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	f9 01       	movw	r30, r18
     eea:	e8 0f       	add	r30, r24
     eec:	f9 1f       	adc	r31, r25
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	09 f4       	brne	.+2      	; 0xef8 <__vector_16+0xb6>
     ef6:	60 c0       	rjmp	.+192    	; 0xfb8 <__vector_16+0x176>
		{
#if ADC_u8RESOLUTION == EIGHT_BITS
			ADC_pstChainDataGlobally->Local_pu16ResultArr[ADC_u8ChainChannelCounter]  = ADCH;
     ef8:	e0 91 02 01 	lds	r30, 0x0102
     efc:	f0 91 03 01 	lds	r31, 0x0103
     f00:	23 81       	ldd	r18, Z+3	; 0x03
     f02:	34 81       	ldd	r19, Z+4	; 0x04
     f04:	80 91 04 01 	lds	r24, 0x0104
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	d9 01       	movw	r26, r18
     f12:	a8 0f       	add	r26, r24
     f14:	b9 1f       	adc	r27, r25
     f16:	e5 e2       	ldi	r30, 0x25	; 37
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	9c 93       	st	X, r25
     f24:	8e 93       	st	-X, r24
#elif  ADC_u8RESOLUTION == TEN_BITS
			ADC_pstChainDataGlobally->Local_pu16ResultArr[ADC_u8ChainChannelCounter] = ADC;
#endif

			/* update the counter  */
			ADC_u8ChainChannelCounter++;
     f26:	80 91 04 01 	lds	r24, 0x0104
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	80 93 04 01 	sts	0x0104, r24

			/* check on conversion chain finish or not */
			if(ADC_u8ChainChannelCounter < ADC_pstChainDataGlobally->Local_u8ChainSize )
     f30:	e0 91 02 01 	lds	r30, 0x0102
     f34:	f0 91 03 01 	lds	r31, 0x0103
     f38:	90 81       	ld	r25, Z
     f3a:	80 91 04 01 	lds	r24, 0x0104
     f3e:	89 17       	cp	r24, r25
     f40:	20 f5       	brcc	.+72     	; 0xf8a <__vector_16+0x148>
			{
				/* configure the analog channel */
				ADMUX &= CHANNEL_MASK;
     f42:	a7 e2       	ldi	r26, 0x27	; 39
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e7 e2       	ldi	r30, 0x27	; 39
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 7e       	andi	r24, 0xE0	; 224
     f4e:	8c 93       	st	X, r24
				ADMUX |= ADC_pstChainDataGlobally->Local_pu8ChannelArr[ADC_u8ChainChannelCounter];
     f50:	a7 e2       	ldi	r26, 0x27	; 39
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e2       	ldi	r30, 0x27	; 39
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	40 81       	ld	r20, Z
     f5a:	e0 91 02 01 	lds	r30, 0x0102
     f5e:	f0 91 03 01 	lds	r31, 0x0103
     f62:	21 81       	ldd	r18, Z+1	; 0x01
     f64:	32 81       	ldd	r19, Z+2	; 0x02
     f66:	80 91 04 01 	lds	r24, 0x0104
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	f9 01       	movw	r30, r18
     f70:	e8 0f       	add	r30, r24
     f72:	f9 1f       	adc	r31, r25
     f74:	80 81       	ld	r24, Z
     f76:	84 2b       	or	r24, r20
     f78:	8c 93       	st	X, r24

				/* Set start conversion bit  */
				SET_BIT(ADCSRA,ADC_u8ADCSRA_ADSC);
     f7a:	a6 e2       	ldi	r26, 0x26	; 38
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e6 e2       	ldi	r30, 0x26	; 38
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	8c 93       	st	X, r24
     f88:	17 c0       	rjmp	.+46     	; 0xfb8 <__vector_16+0x176>

			}else
			{
				/* Disable the ADC conversion complete interrupt  */
				CLR_BIT(ADCSRA,ADC_u8ADCSRA_ADIE);
     f8a:	a6 e2       	ldi	r26, 0x26	; 38
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e6 e2       	ldi	r30, 0x26	; 38
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	87 7f       	andi	r24, 0xF7	; 247
     f96:	8c 93       	st	X, r24

				/* ADC Is now IDLE */
				ADC_u8BusyFlag = IDLE;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 be 00 	sts	0x00BE, r24
				/*Invoke the application notification function*/

				if(ADC_pstChainDataGlobally ->Copy_puNotificationFunc != NULL)
     f9e:	e0 91 02 01 	lds	r30, 0x0102
     fa2:	f0 91 03 01 	lds	r31, 0x0103
     fa6:	85 81       	ldd	r24, Z+5	; 0x05
     fa8:	96 81       	ldd	r25, Z+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	29 f0       	breq	.+10     	; 0xfb8 <__vector_16+0x176>
				{
					/* notify */
					ADC_puNotificationFunc();
     fae:	e0 91 00 01 	lds	r30, 0x0100
     fb2:	f0 91 01 01 	lds	r31, 0x0101
     fb6:	09 95       	icall
			/* conversion result pointer is NULL */
		}


	}
}
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	ff 91       	pop	r31
     fbe:	ef 91       	pop	r30
     fc0:	bf 91       	pop	r27
     fc2:	af 91       	pop	r26
     fc4:	9f 91       	pop	r25
     fc6:	8f 91       	pop	r24
     fc8:	7f 91       	pop	r23
     fca:	6f 91       	pop	r22
     fcc:	5f 91       	pop	r21
     fce:	4f 91       	pop	r20
     fd0:	3f 91       	pop	r19
     fd2:	2f 91       	pop	r18
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <voidSendEnablePulse>:
#include "CLCD_interface.h"
#include "CLCD_prv.h"
#include "CLCD_cfg.h"

static void voidSendEnablePulse(void)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	2e 97       	sbiw	r28, 0x0e	; 14
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,DIO_u8PIN_HIGH);
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e4       	ldi	r27, 0x40	; 64
    1004:	8b 87       	std	Y+11, r24	; 0x0b
    1006:	9c 87       	std	Y+12, r25	; 0x0c
    1008:	ad 87       	std	Y+13, r26	; 0x0d
    100a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100c:	6b 85       	ldd	r22, Y+11	; 0x0b
    100e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1010:	8d 85       	ldd	r24, Y+13	; 0x0d
    1012:	9e 85       	ldd	r25, Y+14	; 0x0e
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	8f 83       	std	Y+7, r24	; 0x07
    1026:	98 87       	std	Y+8, r25	; 0x08
    1028:	a9 87       	std	Y+9, r26	; 0x09
    102a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <voidSendEnablePulse+0x70>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    104e:	6f 81       	ldd	r22, Y+7	; 0x07
    1050:	78 85       	ldd	r23, Y+8	; 0x08
    1052:	89 85       	ldd	r24, Y+9	; 0x09
    1054:	9a 85       	ldd	r25, Y+10	; 0x0a
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	4c f5       	brge	.+82     	; 0x10b8 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <voidSendEnablePulse+0xd0>
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <voidSendEnablePulse+0xbe>
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <voidSendEnablePulse+0xb2>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <voidSendEnablePulse+0xfa>
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,DIO_u8PIN_LOW);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
}
    10ea:	2e 96       	adiw	r28, 0x0e	; 14
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <CLCD_voidSendCmd>:
}

#endif

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

	/* this #if for option CLCD_RW_CTRL_EN ENABLED or DISABLED because in some M.C this pin not exist */
#if CLCD_RW_CTRL_EN	== ENABLED
	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
#endif

#if CLCD_OP_MODE == EIGHT_BIT_MODE
	/*Send the command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Cmd);
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	69 81       	ldd	r22, Y+1	; 0x01
    1120:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>

	voidSendEnablePulse();
    1124:	0e 94 ef 07 	call	0xfde	; 0xfde <voidSendEnablePulse>

	/*send the least 4 bits to the LCD*/
	voidSetLCDHalfDataPort(Copy_u8Cmd);
	voidSendEnablePulse();
#endif
}
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to high for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

	/* this #if for option CLCD_RW_CTRL_EN ENABLED or DISABLED because in some M.C this pin not exist */
#if CLCD_RW_CTRL_EN	== ENABLED
	/*Set RW pin to low for write operation*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
#endif

#if CLCD_OP_MODE == EIGHT_BIT_MODE
	/*Send the Data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	69 81       	ldd	r22, Y+1	; 0x01
    1154:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>

	voidSendEnablePulse();
    1158:	0e 94 ef 07 	call	0xfde	; 0xfde <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);	/*send the least 4 bits to the LCD*/
	voidSendEnablePulse();
#endif

}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	08 95       	ret

00001164 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1164:	df 93       	push	r29
    1166:	cf 93       	push	r28
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	2e 97       	sbiw	r28, 0x0e	; 14
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 e2       	ldi	r26, 0x20	; 32
    117e:	b2 e4       	ldi	r27, 0x42	; 66
    1180:	8b 87       	std	Y+11, r24	; 0x0b
    1182:	9c 87       	std	Y+12, r25	; 0x0c
    1184:	ad 87       	std	Y+13, r26	; 0x0d
    1186:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1188:	6b 85       	ldd	r22, Y+11	; 0x0b
    118a:	7c 85       	ldd	r23, Y+12	; 0x0c
    118c:	8d 85       	ldd	r24, Y+13	; 0x0d
    118e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	4a ef       	ldi	r20, 0xFA	; 250
    1196:	54 e4       	ldi	r21, 0x44	; 68
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	8f 83       	std	Y+7, r24	; 0x07
    11a2:	98 87       	std	Y+8, r25	; 0x08
    11a4:	a9 87       	std	Y+9, r26	; 0x09
    11a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a8:	6f 81       	ldd	r22, Y+7	; 0x07
    11aa:	78 85       	ldd	r23, Y+8	; 0x08
    11ac:	89 85       	ldd	r24, Y+9	; 0x09
    11ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e8       	ldi	r20, 0x80	; 128
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11bc:	88 23       	and	r24, r24
    11be:	2c f4       	brge	.+10     	; 0x11ca <CLCD_voidInit+0x66>
		__ticks = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	3f c0       	rjmp	.+126    	; 0x1248 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    11ca:	6f 81       	ldd	r22, Y+7	; 0x07
    11cc:	78 85       	ldd	r23, Y+8	; 0x08
    11ce:	89 85       	ldd	r24, Y+9	; 0x09
    11d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	4c f5       	brge	.+82     	; 0x1234 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	0f c0       	rjmp	.+30     	; 0x122a <CLCD_voidInit+0xc6>
    120c:	88 ec       	ldi	r24, 0xC8	; 200
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <CLCD_voidInit+0xb4>
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	9e 81       	ldd	r25, Y+6	; 0x06
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	69 f7       	brne	.-38     	; 0x120c <CLCD_voidInit+0xa8>
    1232:	14 c0       	rjmp	.+40     	; 0x125c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <CLCD_voidInit+0xf0>
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30ms after power on*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);
    125c:	88 e3       	ldi	r24, 0x38	; 56
    125e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

#endif

	/* internally it divided the command to 2 steps */
	/*Display on/off control: display enable, cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    1262:	8c e0       	ldi	r24, 0x0C	; 12
    1264:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	/* internally it divided the command to 2 steps */
	/*Display clear*/
	CLCD_voidSendCmd(1);
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    126e:	2e 96       	adiw	r28, 0x0e	; 14
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <CLCD_u8SendString>:

uint8 CLCD_u8SendString(const char* Copy_chString)
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <CLCD_u8SendString+0x6>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <CLCD_u8SendString+0x8>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
	/* define local variables */
	uint8 Local_u8ErrorState= OK;
    1290:	1a 82       	std	Y+2, r1	; 0x02

	/* 0u u: casting for uint8 */
	uint8 Local_u8Counter=0u;
    1292:	19 82       	std	Y+1, r1	; 0x01

	/* check on pointer if equal null or not */
	if(Copy_chString != NULL)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	d9 f0       	breq	.+54     	; 0x12d2 <CLCD_u8SendString+0x52>
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <CLCD_u8SendString+0x3a>
	{
		/* this loop for check on the end of string */
		while(Copy_chString[Local_u8Counter] != '\0')
		{
			/* send the character to CLCD */
			CLCD_voidSendData(Copy_chString[Local_u8Counter]);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	fc 01       	movw	r30, r24
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	80 81       	ld	r24, Z
    12b0:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
			/* count the variable Local_u8Counter by one */
			Local_u8Counter++;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	89 83       	std	Y+1, r24	; 0x01

	/* check on pointer if equal null or not */
	if(Copy_chString != NULL)
	{
		/* this loop for check on the end of string */
		while(Copy_chString[Local_u8Counter] != '\0')
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	fc 01       	movw	r30, r24
    12c6:	e2 0f       	add	r30, r18
    12c8:	f3 1f       	adc	r31, r19
    12ca:	80 81       	ld	r24, Z
    12cc:	88 23       	and	r24, r24
    12ce:	39 f7       	brne	.-50     	; 0x129e <CLCD_u8SendString+0x1e>
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <CLCD_u8SendString+0x56>
		}
	}
	else
	{
		/* if pointer is not equal null return NULL_PTR_ERR  */
		Local_u8ErrorState= NULL_PTR_ERR;
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	8a 83       	std	Y+2, r24	; 0x02
	}

	/* return NULL_PTR_ERR */
	return Local_u8ErrorState;
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	61 97       	sbiw	r28, 0x11	; 17
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	6e 87       	std	Y+14, r22	; 0x0e
    12fc:	7f 87       	std	Y+15, r23	; 0x0f
    12fe:	88 8b       	std	Y+16, r24	; 0x10
    1300:	99 8b       	std	Y+17, r25	; 0x11
	/* this is an char array to carry assci of Copy_s32Number for every digit */
	char Local_chNumberArr[10];

	/* define local variables */
	uint8 Local_u8RightDigit;
	uint8 Local_u8Counter=0;
    1302:	1a 82       	std	Y+2, r1	; 0x02
	sint8 Local_s8Counter2;

	/* check on Copy_s32Number equal 0 or not  */
	if (Copy_s32Number == 0)
    1304:	8e 85       	ldd	r24, Y+14	; 0x0e
    1306:	9f 85       	ldd	r25, Y+15	; 0x0f
    1308:	a8 89       	ldd	r26, Y+16	; 0x10
    130a:	b9 89       	ldd	r27, Y+17	; 0x11
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	a1 05       	cpc	r26, r1
    1310:	b1 05       	cpc	r27, r1
    1312:	21 f4       	brne	.+8      	; 0x131c <CLCD_voidSendNumber+0x36>
	{
		CLCD_voidSendData('0');
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
    131a:	69 c0       	rjmp	.+210    	; 0x13ee <CLCD_voidSendNumber+0x108>

		/* stop func */
		return ;
	}
	/* check on Copy_s32Number < 0  */
	else if(Copy_s32Number < 0)
    131c:	8e 85       	ldd	r24, Y+14	; 0x0e
    131e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1320:	a8 89       	ldd	r26, Y+16	; 0x10
    1322:	b9 89       	ldd	r27, Y+17	; 0x11
    1324:	bb 23       	and	r27, r27
    1326:	0c f0       	brlt	.+2      	; 0x132a <CLCD_voidSendNumber+0x44>
    1328:	43 c0       	rjmp	.+134    	; 0x13b0 <CLCD_voidSendNumber+0xca>
	{
		/* send to clcd sub operator  */
		CLCD_voidSendData('-');
    132a:	8d e2       	ldi	r24, 0x2D	; 45
    132c:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>

		/* multi Copy_s32Number by -1 to convert it to positive number */
		Copy_s32Number *= -1;
    1330:	8e 85       	ldd	r24, Y+14	; 0x0e
    1332:	9f 85       	ldd	r25, Y+15	; 0x0f
    1334:	a8 89       	ldd	r26, Y+16	; 0x10
    1336:	b9 89       	ldd	r27, Y+17	; 0x11
    1338:	b0 95       	com	r27
    133a:	a0 95       	com	r26
    133c:	90 95       	com	r25
    133e:	81 95       	neg	r24
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	af 4f       	sbci	r26, 0xFF	; 255
    1344:	bf 4f       	sbci	r27, 0xFF	; 255
    1346:	8e 87       	std	Y+14, r24	; 0x0e
    1348:	9f 87       	std	Y+15, r25	; 0x0f
    134a:	a8 8b       	std	Y+16, r26	; 0x10
    134c:	b9 8b       	std	Y+17, r27	; 0x11
    134e:	30 c0       	rjmp	.+96     	; 0x13b0 <CLCD_voidSendNumber+0xca>

	/* all condition Copy_s32Number is positive */
	while(Copy_s32Number != 0)
	{
		/*Extract the right most digit*/
		Local_u8RightDigit = Copy_s32Number%10;
    1350:	8e 85       	ldd	r24, Y+14	; 0x0e
    1352:	9f 85       	ldd	r25, Y+15	; 0x0f
    1354:	a8 89       	ldd	r26, Y+16	; 0x10
    1356:	b9 89       	ldd	r27, Y+17	; 0x11
    1358:	2a e0       	ldi	r18, 0x0A	; 10
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__divmodsi4>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8b 83       	std	Y+3, r24	; 0x03
		/*Get rid of the right most digit*/
		Copy_s32Number /=10;
    136e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1370:	9f 85       	ldd	r25, Y+15	; 0x0f
    1372:	a8 89       	ldd	r26, Y+16	; 0x10
    1374:	b9 89       	ldd	r27, Y+17	; 0x11
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__divmodsi4>
    1386:	da 01       	movw	r26, r20
    1388:	c9 01       	movw	r24, r18
    138a:	8e 87       	std	Y+14, r24	; 0x0e
    138c:	9f 87       	std	Y+15, r25	; 0x0f
    138e:	a8 8b       	std	Y+16, r26	; 0x10
    1390:	b9 8b       	std	Y+17, r27	; 0x11
		/*convert to ascii value and store it in the array*/
		Local_chNumberArr[Local_u8Counter]= Local_u8RightDigit + '0';
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	48 2f       	mov	r20, r24
    139c:	40 5d       	subi	r20, 0xD0	; 208
    139e:	ce 01       	movw	r24, r28
    13a0:	04 96       	adiw	r24, 0x04	; 4
    13a2:	fc 01       	movw	r30, r24
    13a4:	e2 0f       	add	r30, r18
    13a6:	f3 1f       	adc	r31, r19
    13a8:	40 83       	st	Z, r20
		/* increment the Local_u8Counter by 1 */
		Local_u8Counter++;
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	8a 83       	std	Y+2, r24	; 0x02
		Copy_s32Number *= -1;
	}


	/* all condition Copy_s32Number is positive */
	while(Copy_s32Number != 0)
    13b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13b4:	a8 89       	ldd	r26, Y+16	; 0x10
    13b6:	b9 89       	ldd	r27, Y+17	; 0x11
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	a1 05       	cpc	r26, r1
    13bc:	b1 05       	cpc	r27, r1
    13be:	41 f6       	brne	.-112    	; 0x1350 <CLCD_voidSendNumber+0x6a>
		/* increment the Local_u8Counter by 1 */
		Local_u8Counter++;
	}

	/* this loop to print the array and i use the sint8 Local_s8Counter2 to avoid infinite loop */
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	10 c0       	rjmp	.+32     	; 0x13e8 <CLCD_voidSendNumber+0x102>
	{
		/* send the ascii num from array  */
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	33 27       	eor	r19, r19
    13ce:	27 fd       	sbrc	r18, 7
    13d0:	30 95       	com	r19
    13d2:	ce 01       	movw	r24, r28
    13d4:	04 96       	adiw	r24, 0x04	; 4
    13d6:	fc 01       	movw	r30, r24
    13d8:	e2 0f       	add	r30, r18
    13da:	f3 1f       	adc	r31, r19
    13dc:	80 81       	ld	r24, Z
    13de:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
		/* increment the Local_u8Counter by 1 */
		Local_u8Counter++;
	}

	/* this loop to print the array and i use the sint8 Local_s8Counter2 to avoid infinite loop */
	for(Local_s8Counter2= Local_u8Counter-1; Local_s8Counter2>=0; Local_s8Counter2--)
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	81 50       	subi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 23       	and	r24, r24
    13ec:	6c f7       	brge	.-38     	; 0x13c8 <CLCD_voidSendNumber+0xe2>
	{
		/* send the ascii num from array  */
		CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	}
}
    13ee:	61 96       	adiw	r28, 0x11	; 17
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <CLCD_voidGoToXY+0x6>
    1406:	0f 92       	push	r0
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	8a 83       	std	Y+2, r24	; 0x02
    140e:	6b 83       	std	Y+3, r22	; 0x03
	/* define local variable to carry final address */
	uint8 Local_u8DDRamAdd;

	/* Y_position is equal 0 */
	if(Copy_u8YPos == 0u)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 23       	and	r24, r24
    1414:	19 f4       	brne	.+6      	; 0x141c <CLCD_voidGoToXY+0x1c>
	{
		/* Address is equal x_posiition */
		Local_u8DDRamAdd= Copy_u8XPos;
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	06 c0       	rjmp	.+12     	; 0x1428 <CLCD_voidGoToXY+0x28>
	}
	/* Y_position is equal 1 */
	else if (Copy_u8YPos == 1u)
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	19 f4       	brne	.+6      	; 0x1428 <CLCD_voidGoToXY+0x28>
	{
		/* Address is equal x_posiition + 0x40 */
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	80 5c       	subi	r24, 0xC0	; 192
    1426:	89 83       	std	Y+1, r24	; 0x01
	}

	/* from data sheet */
	/*Set bit 7 for Set DDRAM address command */
	Local_u8DDRamAdd |= 1<<7u;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	80 68       	ori	r24, 0x80	; 128
    142c:	89 83       	std	Y+1, r24	; 0x01

	/* send command for clcd */
	CLCD_voidSendCmd(Local_u8DDRamAdd);
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <CLCD_voidSendSpecialCharacter>:

void CLCD_voidSendSpecialCharacter(uint8 *Copy_pu8Pattern, uint8 Copy_u8PatternNum, uint8 Copy_u8XPos, uint8 Copy_u8YPos )
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	27 97       	sbiw	r28, 0x07	; 7
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	6d 83       	std	Y+5, r22	; 0x05
    145a:	4e 83       	std	Y+6, r20	; 0x06
    145c:	2f 83       	std	Y+7, r18	; 0x07
	/* define local variable to carry Start address of CGRAM of Copy_u8PatternNum*/
	uint8 Local_u8CGRAMAdd= Copy_u8PatternNum * 8u;
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	8a 83       	std	Y+2, r24	; 0x02
	/* define local variable */
	uint8 Local_u8LoopCounter;

	/* from data sheet */
	/*Set bit number 6 for Set CGRAM address command*/
	Local_u8CGRAMAdd |= 1<<6u;
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 64       	ori	r24, 0x40	; 64
    1476:	8a 83       	std	Y+2, r24	; 0x02

	/* send command for clcd to write in CGRAM*/
	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
    147e:	19 82       	std	Y+1, r1	; 0x01
    1480:	0e c0       	rjmp	.+28     	; 0x149e <CLCD_voidSendSpecialCharacter+0x5e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	fc 01       	movw	r30, r24
    148e:	e2 0f       	add	r30, r18
    1490:	f3 1f       	adc	r31, r19
    1492:	80 81       	ld	r24, Z
    1494:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
	/* send command for clcd to write in CGRAM*/
	/*Set CGRAM address*/
	CLCD_voidSendCmd(Local_u8CGRAMAdd);

	/*Write the pattern into CGRAM*/
	for(Local_u8LoopCounter=0; Local_u8LoopCounter<8u; Local_u8LoopCounter++)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	78 f3       	brcs	.-34     	; 0x1482 <CLCD_voidSendSpecialCharacter+0x42>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8LoopCounter]);
	}

	/*Goto DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	6f 81       	ldd	r22, Y+7	; 0x07
    14a8:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>

	/*Display the pattern written inside CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNum);
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
}
    14b2:	27 96       	adiw	r28, 0x07	; 7
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DCMOTOR_u8RotateClockWise>:

#include "DIO_Interfce.h"


void DCMOTOR_u8RotateClockWise(uint8 Copy_u8DCMOTORH_BRIDGE_PORT , uint8 Copy_u8H_BRIDGE_BASE_1 , uint8 Copy_u8H_BRIDGE_BASE_2)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DCMOTOR_u8RotateClockWise+0x6>
    14ca:	0f 92       	push	r0
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6a 83       	std	Y+2, r22	; 0x02
    14d4:	4b 83       	std	Y+3, r20	; 0x03
	/* must make DCMOTOR_u8H_BRIDGE_BASE_2 low firstly to avoid boom on DCMOTOR */

	/* set base 1 and 3 as LOW   */
	DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_1,DIO_u8PIN_LOW);
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	6a 81       	ldd	r22, Y+2	; 0x02
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

	/* set base 2 and 4 as HIGH  */
	DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_2,DIO_u8PIN_HIGH);
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	6b 81       	ldd	r22, Y+3	; 0x03
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>


}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <DCMOTOR_u8RotateCounterClockWise>:

void DCMOTOR_u8RotateCounterClockWise(uint8 Copy_u8DCMOTORH_BRIDGE_PORT , uint8 Copy_u8H_BRIDGE_BASE_1 , uint8 Copy_u8H_BRIDGE_BASE_2)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <DCMOTOR_u8RotateCounterClockWise+0x6>
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6a 83       	std	Y+2, r22	; 0x02
    1506:	4b 83       	std	Y+3, r20	; 0x03
	/* must make DCMOTOR_u8H_BRIDGE_BASE_1 low firstly to avoid boom on DCMOTOR */

	/* set base 2 and 4 as low   */
	DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_2,DIO_u8PIN_LOW);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	6b 81       	ldd	r22, Y+3	; 0x03
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

	/* set base 1 and 3 as high   */
		DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_1,DIO_u8PIN_HIGH);
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	6a 81       	ldd	r22, Y+2	; 0x02
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <DCMOTOR_u8Stop>:

void DCMOTOR_u8Stop(uint8 Copy_u8DCMOTORH_BRIDGE_PORT , uint8 Copy_u8H_BRIDGE_BASE_1 , uint8 Copy_u8H_BRIDGE_BASE_2)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <DCMOTOR_u8Stop+0x6>
    152e:	0f 92       	push	r0
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	89 83       	std	Y+1, r24	; 0x01
    1536:	6a 83       	std	Y+2, r22	; 0x02
    1538:	4b 83       	std	Y+3, r20	; 0x03
	/* set base 1,2,3,4 as LOW   */
	DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_1,DIO_u8PIN_LOW);
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	6a 81       	ldd	r22, Y+2	; 0x02
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_u8DCMOTORH_BRIDGE_PORT,Copy_u8H_BRIDGE_BASE_2,DIO_u8PIN_LOW);
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	6b 81       	ldd	r22, Y+3	; 0x03
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>


}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <DIO_u8SetPinDerection>:
#include "DIO_Cfg.h"
#include "DIO_Interfce.h"
#include "DIO_Private.h"

uint8 DIO_u8SetPinDerection(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8 Copy_u8Direction)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	28 97       	sbiw	r28, 0x08	; 8
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	8a 83       	std	Y+2, r24	; 0x02
    1570:	6b 83       	std	Y+3, r22	; 0x03
    1572:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1574:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	08 f0       	brcs	.+2      	; 0x157e <DIO_u8SetPinDerection+0x24>
    157c:	f4 c0       	rjmp	.+488    	; 0x1766 <DIO_u8SetPinDerection+0x20c>
	{
		if((Copy_u8Direction == DIO_u8PIN_INPUT))
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	88 23       	and	r24, r24
    1582:	09 f0       	breq	.+2      	; 0x1586 <DIO_u8SetPinDerection+0x2c>
    1584:	77 c0       	rjmp	.+238    	; 0x1674 <DIO_u8SetPinDerection+0x11a>
		{
			switch(Copy_u8Port)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	38 87       	std	Y+8, r19	; 0x08
    158e:	2f 83       	std	Y+7, r18	; 0x07
    1590:	8f 81       	ldd	r24, Y+7	; 0x07
    1592:	98 85       	ldd	r25, Y+8	; 0x08
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	59 f1       	breq	.+86     	; 0x15f0 <DIO_u8SetPinDerection+0x96>
    159a:	2f 81       	ldd	r18, Y+7	; 0x07
    159c:	38 85       	ldd	r19, Y+8	; 0x08
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <DIO_u8SetPinDerection+0x54>
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	98 85       	ldd	r25, Y+8	; 0x08
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <DIO_u8SetPinDerection+0x6c>
    15ac:	60 c0       	rjmp	.+192    	; 0x166e <DIO_u8SetPinDerection+0x114>
    15ae:	2f 81       	ldd	r18, Y+7	; 0x07
    15b0:	38 85       	ldd	r19, Y+8	; 0x08
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	89 f1       	breq	.+98     	; 0x161a <DIO_u8SetPinDerection+0xc0>
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <DIO_u8SetPinDerection+0x6a>
    15c2:	40 c0       	rjmp	.+128    	; 0x1644 <DIO_u8SetPinDerection+0xea>
    15c4:	54 c0       	rjmp	.+168    	; 0x166e <DIO_u8SetPinDerection+0x114>
			{
			case DIO_u8PORTA:CLR_BIT(DDRA,Copy_u8Pin);break;
    15c6:	aa e3       	ldi	r26, 0x3A	; 58
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ea e3       	ldi	r30, 0x3A	; 58
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_u8SetPinDerection+0x8a>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_u8SetPinDerection+0x86>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	bd c0       	rjmp	.+378    	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTB:CLR_BIT(DDRB,Copy_u8Pin);break;
    15f0:	a7 e3       	ldi	r26, 0x37	; 55
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e7 e3       	ldi	r30, 0x37	; 55
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_u8SetPinDerection+0xb4>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_u8SetPinDerection+0xb0>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	a8 c0       	rjmp	.+336    	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTC:CLR_BIT(DDRC,Copy_u8Pin);break;
    161a:	a4 e3       	ldi	r26, 0x34	; 52
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e4 e3       	ldi	r30, 0x34	; 52
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_u8SetPinDerection+0xde>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_u8SetPinDerection+0xda>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	93 c0       	rjmp	.+294    	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTD:CLR_BIT(DDRD,Copy_u8Pin);break;
    1644:	a1 e3       	ldi	r26, 0x31	; 49
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e1 e3       	ldi	r30, 0x31	; 49
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8SetPinDerection+0x108>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8SetPinDerection+0x104>
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	8c 93       	st	X, r24
    166c:	7e c0       	rjmp	.+252    	; 0x176a <DIO_u8SetPinDerection+0x210>
			default:Local_u8ErrorState = NOK;break;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	7b c0       	rjmp	.+246    	; 0x176a <DIO_u8SetPinDerection+0x210>
			}

		}else if((Copy_u8Direction == DIO_u8PIN_OUTPUT))
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	09 f0       	breq	.+2      	; 0x167c <DIO_u8SetPinDerection+0x122>
    167a:	72 c0       	rjmp	.+228    	; 0x1760 <DIO_u8SetPinDerection+0x206>
		{
			switch(Copy_u8Port)
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3e 83       	std	Y+6, r19	; 0x06
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	91 05       	cpc	r25, r1
    168e:	49 f1       	breq	.+82     	; 0x16e2 <DIO_u8SetPinDerection+0x188>
    1690:	2d 81       	ldd	r18, Y+5	; 0x05
    1692:	3e 81       	ldd	r19, Y+6	; 0x06
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <DIO_u8SetPinDerection+0x14a>
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 f0       	breq	.+24     	; 0x16ba <DIO_u8SetPinDerection+0x160>
    16a2:	5b c0       	rjmp	.+182    	; 0x175a <DIO_u8SetPinDerection+0x200>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	71 f1       	breq	.+92     	; 0x170a <DIO_u8SetPinDerection+0x1b0>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	91 05       	cpc	r25, r1
    16b6:	e9 f1       	breq	.+122    	; 0x1732 <DIO_u8SetPinDerection+0x1d8>
    16b8:	50 c0       	rjmp	.+160    	; 0x175a <DIO_u8SetPinDerection+0x200>
			{
			case DIO_u8PORTA:SET_BIT(DDRA,Copy_u8Pin);break;
    16ba:	aa e3       	ldi	r26, 0x3A	; 58
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8SetPinDerection+0x17e>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_u8SetPinDerection+0x17a>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	44 c0       	rjmp	.+136    	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin);break;
    16e2:	a7 e3       	ldi	r26, 0x37	; 55
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e7 e3       	ldi	r30, 0x37	; 55
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_u8SetPinDerection+0x1a6>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_u8SetPinDerection+0x1a2>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	30 c0       	rjmp	.+96     	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin);break;
    170a:	a4 e3       	ldi	r26, 0x34	; 52
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e4 e3       	ldi	r30, 0x34	; 52
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_u8SetPinDerection+0x1ce>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_u8SetPinDerection+0x1ca>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	1c c0       	rjmp	.+56     	; 0x176a <DIO_u8SetPinDerection+0x210>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin);break;
    1732:	a1 e3       	ldi	r26, 0x31	; 49
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e1 e3       	ldi	r30, 0x31	; 49
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_u8SetPinDerection+0x1f6>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_u8SetPinDerection+0x1f2>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	08 c0       	rjmp	.+16     	; 0x176a <DIO_u8SetPinDerection+0x210>
			default:Local_u8ErrorState = NOK;break;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	05 c0       	rjmp	.+10     	; 0x176a <DIO_u8SetPinDerection+0x210>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_u8SetPinDerection+0x210>

		}
	}else
	{

		Local_u8ErrorState = NOK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	28 96       	adiw	r28, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DIO_u8SetPinValue>:


uint8 DIO_u8SetPinValue(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8 Copy_u8Value)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	28 97       	sbiw	r28, 0x08	; 8
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	6b 83       	std	Y+3, r22	; 0x03
    1796:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    1798:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 30       	cpi	r24, 0x08	; 8
    179e:	08 f0       	brcs	.+2      	; 0x17a2 <DIO_u8SetPinValue+0x24>
    17a0:	f4 c0       	rjmp	.+488    	; 0x198a <DIO_u8SetPinValue+0x20c>
	{
		if((Copy_u8Value == DIO_u8PIN_LOW))
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	88 23       	and	r24, r24
    17a6:	09 f0       	breq	.+2      	; 0x17aa <DIO_u8SetPinValue+0x2c>
    17a8:	77 c0       	rjmp	.+238    	; 0x1898 <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	38 87       	std	Y+8, r19	; 0x08
    17b2:	2f 83       	std	Y+7, r18	; 0x07
    17b4:	8f 81       	ldd	r24, Y+7	; 0x07
    17b6:	98 85       	ldd	r25, Y+8	; 0x08
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	59 f1       	breq	.+86     	; 0x1814 <DIO_u8SetPinValue+0x96>
    17be:	2f 81       	ldd	r18, Y+7	; 0x07
    17c0:	38 85       	ldd	r19, Y+8	; 0x08
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <DIO_u8SetPinValue+0x54>
    17c8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ca:	98 85       	ldd	r25, Y+8	; 0x08
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f0       	breq	.+26     	; 0x17ea <DIO_u8SetPinValue+0x6c>
    17d0:	60 c0       	rjmp	.+192    	; 0x1892 <DIO_u8SetPinValue+0x114>
    17d2:	2f 81       	ldd	r18, Y+7	; 0x07
    17d4:	38 85       	ldd	r19, Y+8	; 0x08
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	89 f1       	breq	.+98     	; 0x183e <DIO_u8SetPinValue+0xc0>
    17dc:	8f 81       	ldd	r24, Y+7	; 0x07
    17de:	98 85       	ldd	r25, Y+8	; 0x08
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <DIO_u8SetPinValue+0x6a>
    17e6:	40 c0       	rjmp	.+128    	; 0x1868 <DIO_u8SetPinValue+0xea>
    17e8:	54 c0       	rjmp	.+168    	; 0x1892 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
    17ea:	ab e3       	ldi	r26, 0x3B	; 59
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8SetPinValue+0x8a>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_u8SetPinValue+0x86>
    180c:	80 95       	com	r24
    180e:	84 23       	and	r24, r20
    1810:	8c 93       	st	X, r24
    1812:	bd c0       	rjmp	.+378    	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
    1814:	a8 e3       	ldi	r26, 0x38	; 56
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e8 e3       	ldi	r30, 0x38	; 56
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	48 2f       	mov	r20, r24
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 2e       	mov	r0, r18
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <DIO_u8SetPinValue+0xb4>
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <DIO_u8SetPinValue+0xb0>
    1836:	80 95       	com	r24
    1838:	84 23       	and	r24, r20
    183a:	8c 93       	st	X, r24
    183c:	a8 c0       	rjmp	.+336    	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
    183e:	a5 e3       	ldi	r26, 0x35	; 53
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e3       	ldi	r30, 0x35	; 53
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_u8SetPinValue+0xde>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_u8SetPinValue+0xda>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
    1866:	93 c0       	rjmp	.+294    	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
    1868:	a2 e3       	ldi	r26, 0x32	; 50
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e2 e3       	ldi	r30, 0x32	; 50
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <DIO_u8SetPinValue+0x108>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <DIO_u8SetPinValue+0x104>
    188a:	80 95       	com	r24
    188c:	84 23       	and	r24, r20
    188e:	8c 93       	st	X, r24
    1890:	7e c0       	rjmp	.+252    	; 0x198e <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = NOK;break;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	7b c0       	rjmp	.+246    	; 0x198e <DIO_u8SetPinValue+0x210>
			}

		}else if((Copy_u8Value == DIO_u8PIN_HIGH))
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <DIO_u8SetPinValue+0x122>
    189e:	72 c0       	rjmp	.+228    	; 0x1984 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	3e 83       	std	Y+6, r19	; 0x06
    18a8:	2d 83       	std	Y+5, r18	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	81 30       	cpi	r24, 0x01	; 1
    18b0:	91 05       	cpc	r25, r1
    18b2:	49 f1       	breq	.+82     	; 0x1906 <DIO_u8SetPinValue+0x188>
    18b4:	2d 81       	ldd	r18, Y+5	; 0x05
    18b6:	3e 81       	ldd	r19, Y+6	; 0x06
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <DIO_u8SetPinValue+0x14a>
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	61 f0       	breq	.+24     	; 0x18de <DIO_u8SetPinValue+0x160>
    18c6:	5b c0       	rjmp	.+182    	; 0x197e <DIO_u8SetPinValue+0x200>
    18c8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ca:	3e 81       	ldd	r19, Y+6	; 0x06
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	71 f1       	breq	.+92     	; 0x192e <DIO_u8SetPinValue+0x1b0>
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	83 30       	cpi	r24, 0x03	; 3
    18d8:	91 05       	cpc	r25, r1
    18da:	e9 f1       	breq	.+122    	; 0x1956 <DIO_u8SetPinValue+0x1d8>
    18dc:	50 c0       	rjmp	.+160    	; 0x197e <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
    18de:	ab e3       	ldi	r26, 0x3B	; 59
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	eb e3       	ldi	r30, 0x3B	; 59
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	48 2f       	mov	r20, r24
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_u8SetPinValue+0x17e>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_u8SetPinValue+0x17a>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	44 c0       	rjmp	.+136    	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
    1906:	a8 e3       	ldi	r26, 0x38	; 56
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e8 e3       	ldi	r30, 0x38	; 56
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	48 2f       	mov	r20, r24
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 2e       	mov	r0, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_u8SetPinValue+0x1a6>
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	0a 94       	dec	r0
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_u8SetPinValue+0x1a2>
    1928:	84 2b       	or	r24, r20
    192a:	8c 93       	st	X, r24
    192c:	30 c0       	rjmp	.+96     	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
    192e:	a5 e3       	ldi	r26, 0x35	; 53
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e3       	ldi	r30, 0x35	; 53
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 2e       	mov	r0, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_u8SetPinValue+0x1ce>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	0a 94       	dec	r0
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <DIO_u8SetPinValue+0x1ca>
    1950:	84 2b       	or	r24, r20
    1952:	8c 93       	st	X, r24
    1954:	1c c0       	rjmp	.+56     	; 0x198e <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
    1956:	a2 e3       	ldi	r26, 0x32	; 50
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e2 e3       	ldi	r30, 0x32	; 50
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 2e       	mov	r0, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <DIO_u8SetPinValue+0x1f6>
    1970:	88 0f       	add	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	0a 94       	dec	r0
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <DIO_u8SetPinValue+0x1f2>
    1978:	84 2b       	or	r24, r20
    197a:	8c 93       	st	X, r24
    197c:	08 c0       	rjmp	.+16     	; 0x198e <DIO_u8SetPinValue+0x210>
			default:Local_u8ErrorState = NOK;break;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	05 c0       	rjmp	.+10     	; 0x198e <DIO_u8SetPinValue+0x210>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	02 c0       	rjmp	.+4      	; 0x198e <DIO_u8SetPinValue+0x210>

		}
	}else
	{

		Local_u8ErrorState = NOK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1990:	28 96       	adiw	r28, 0x08	; 8
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <DIO_u8GetPinValue>:

uint8 DIO_u8GetPinValue(uint8 Copy_u8Port ,uint8 Copy_u8Pin ,uint8* Copy_pu8Value)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	27 97       	sbiw	r28, 0x07	; 7
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	8a 83       	std	Y+2, r24	; 0x02
    19b8:	6b 83       	std	Y+3, r22	; 0x03
    19ba:	5d 83       	std	Y+5, r21	; 0x05
    19bc:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    19be:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	09 f4       	brne	.+2      	; 0x19ca <DIO_u8GetPinValue+0x28>
    19c8:	7b c0       	rjmp	.+246    	; 0x1ac0 <DIO_u8GetPinValue+0x11e>
	{
		if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	88 30       	cpi	r24, 0x08	; 8
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <DIO_u8GetPinValue+0x30>
    19d0:	74 c0       	rjmp	.+232    	; 0x1aba <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3f 83       	std	Y+7, r19	; 0x07
    19da:	2e 83       	std	Y+6, r18	; 0x06
    19dc:	4e 81       	ldd	r20, Y+6	; 0x06
    19de:	5f 81       	ldd	r21, Y+7	; 0x07
    19e0:	41 30       	cpi	r20, 0x01	; 1
    19e2:	51 05       	cpc	r21, r1
    19e4:	59 f1       	breq	.+86     	; 0x1a3c <DIO_u8GetPinValue+0x9a>
    19e6:	8e 81       	ldd	r24, Y+6	; 0x06
    19e8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	91 05       	cpc	r25, r1
    19ee:	34 f4       	brge	.+12     	; 0x19fc <DIO_u8GetPinValue+0x5a>
    19f0:	2e 81       	ldd	r18, Y+6	; 0x06
    19f2:	3f 81       	ldd	r19, Y+7	; 0x07
    19f4:	21 15       	cp	r18, r1
    19f6:	31 05       	cpc	r19, r1
    19f8:	69 f0       	breq	.+26     	; 0x1a14 <DIO_u8GetPinValue+0x72>
    19fa:	5c c0       	rjmp	.+184    	; 0x1ab4 <DIO_u8GetPinValue+0x112>
    19fc:	4e 81       	ldd	r20, Y+6	; 0x06
    19fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1a00:	42 30       	cpi	r20, 0x02	; 2
    1a02:	51 05       	cpc	r21, r1
    1a04:	79 f1       	breq	.+94     	; 0x1a64 <DIO_u8GetPinValue+0xc2>
    1a06:	8e 81       	ldd	r24, Y+6	; 0x06
    1a08:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <DIO_u8GetPinValue+0x70>
    1a10:	3d c0       	rjmp	.+122    	; 0x1a8c <DIO_u8GetPinValue+0xea>
    1a12:	50 c0       	rjmp	.+160    	; 0x1ab4 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA:*(Copy_pu8Value) = GET_BIT(PINA,Copy_u8Pin);break;
    1a14:	e9 e3       	ldi	r30, 0x39	; 57
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_u8GetPinValue+0x8a>
    1a28:	55 95       	asr	r21
    1a2a:	47 95       	ror	r20
    1a2c:	8a 95       	dec	r24
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_u8GetPinValue+0x86>
    1a30:	ca 01       	movw	r24, r20
    1a32:	81 70       	andi	r24, 0x01	; 1
    1a34:	ec 81       	ldd	r30, Y+4	; 0x04
    1a36:	fd 81       	ldd	r31, Y+5	; 0x05
    1a38:	80 83       	st	Z, r24
    1a3a:	44 c0       	rjmp	.+136    	; 0x1ac4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTB:*(Copy_pu8Value) = GET_BIT(PINB,Copy_u8Pin);break;
    1a3c:	e6 e3       	ldi	r30, 0x36	; 54
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_u8GetPinValue+0xb2>
    1a50:	55 95       	asr	r21
    1a52:	47 95       	ror	r20
    1a54:	8a 95       	dec	r24
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_u8GetPinValue+0xae>
    1a58:	ca 01       	movw	r24, r20
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a60:	80 83       	st	Z, r24
    1a62:	30 c0       	rjmp	.+96     	; 0x1ac4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTC:*(Copy_pu8Value) = GET_BIT(PINC,Copy_u8Pin);break;
    1a64:	e3 e3       	ldi	r30, 0x33	; 51
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a9 01       	movw	r20, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_u8GetPinValue+0xda>
    1a78:	55 95       	asr	r21
    1a7a:	47 95       	ror	r20
    1a7c:	8a 95       	dec	r24
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_u8GetPinValue+0xd6>
    1a80:	ca 01       	movw	r24, r20
    1a82:	81 70       	andi	r24, 0x01	; 1
    1a84:	ec 81       	ldd	r30, Y+4	; 0x04
    1a86:	fd 81       	ldd	r31, Y+5	; 0x05
    1a88:	80 83       	st	Z, r24
    1a8a:	1c c0       	rjmp	.+56     	; 0x1ac4 <DIO_u8GetPinValue+0x122>
			case DIO_u8PORTD:*(Copy_pu8Value) = GET_BIT(PIND,Copy_u8Pin);break;
    1a8c:	e0 e3       	ldi	r30, 0x30	; 48
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a9 01       	movw	r20, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_u8GetPinValue+0x102>
    1aa0:	55 95       	asr	r21
    1aa2:	47 95       	ror	r20
    1aa4:	8a 95       	dec	r24
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_u8GetPinValue+0xfe>
    1aa8:	ca 01       	movw	r24, r20
    1aaa:	81 70       	andi	r24, 0x01	; 1
    1aac:	ec 81       	ldd	r30, Y+4	; 0x04
    1aae:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab0:	80 83       	st	Z, r24
    1ab2:	08 c0       	rjmp	.+16     	; 0x1ac4 <DIO_u8GetPinValue+0x122>
			default:Local_u8ErrorState = NOK;break;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <DIO_u8GetPinValue+0x122>
			}
		}else
		{
			Local_u8ErrorState = NOK;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_u8GetPinValue+0x122>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac6:	27 96       	adiw	r28, 0x07	; 7
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <DIO_u8TogglePin>:

uint8 DIO_u8TogglePin(uint8 Copy_u8Port ,uint8 Copy_u8Pin )
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <DIO_u8TogglePin+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <DIO_u8TogglePin+0x8>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1aea:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin >= DIO_u8PIN0) && (Copy_u8Pin <= DIO_u8PIN7) )
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 30       	cpi	r24, 0x08	; 8
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <DIO_u8TogglePin+0x1c>
    1af2:	72 c0       	rjmp	.+228    	; 0x1bd8 <DIO_u8TogglePin+0x100>
	{
		switch(Copy_u8Port)
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3d 83       	std	Y+5, r19	; 0x05
    1afc:	2c 83       	std	Y+4, r18	; 0x04
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	49 f1       	breq	.+82     	; 0x1b5a <DIO_u8TogglePin+0x82>
    1b08:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <DIO_u8TogglePin+0x44>
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	61 f0       	breq	.+24     	; 0x1b32 <DIO_u8TogglePin+0x5a>
    1b1a:	5b c0       	rjmp	.+182    	; 0x1bd2 <DIO_u8TogglePin+0xfa>
    1b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	71 f1       	breq	.+92     	; 0x1b82 <DIO_u8TogglePin+0xaa>
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	83 30       	cpi	r24, 0x03	; 3
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	e9 f1       	breq	.+122    	; 0x1baa <DIO_u8TogglePin+0xd2>
    1b30:	50 c0       	rjmp	.+160    	; 0x1bd2 <DIO_u8TogglePin+0xfa>
		{
		case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8Pin);break;
    1b32:	ab e3       	ldi	r26, 0x3B	; 59
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <DIO_u8TogglePin+0x78>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <DIO_u8TogglePin+0x74>
    1b54:	84 27       	eor	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	41 c0       	rjmp	.+130    	; 0x1bdc <DIO_u8TogglePin+0x104>
		case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8Pin);break;
    1b5a:	a8 e3       	ldi	r26, 0x38	; 56
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e8 e3       	ldi	r30, 0x38	; 56
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <DIO_u8TogglePin+0xa0>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <DIO_u8TogglePin+0x9c>
    1b7c:	84 27       	eor	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	2d c0       	rjmp	.+90     	; 0x1bdc <DIO_u8TogglePin+0x104>
		case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8Pin);break;
    1b82:	a5 e3       	ldi	r26, 0x35	; 53
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e5 e3       	ldi	r30, 0x35	; 53
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	48 2f       	mov	r20, r24
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	02 2e       	mov	r0, r18
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <DIO_u8TogglePin+0xc8>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	0a 94       	dec	r0
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <DIO_u8TogglePin+0xc4>
    1ba4:	84 27       	eor	r24, r20
    1ba6:	8c 93       	st	X, r24
    1ba8:	19 c0       	rjmp	.+50     	; 0x1bdc <DIO_u8TogglePin+0x104>
		case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8Pin);break;
    1baa:	a2 e3       	ldi	r26, 0x32	; 50
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e2 e3       	ldi	r30, 0x32	; 50
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8TogglePin+0xf0>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8TogglePin+0xec>
    1bcc:	84 27       	eor	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <DIO_u8TogglePin+0x104>
		default:Local_u8ErrorState = NOK;break;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_u8TogglePin+0x104>
		}
	}
	else{
		Local_u8ErrorState = NULL_PTR_ERR;
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <DIO_u8SetPortDerection>:



uint8 DIO_u8SetPortDerection(uint8 Copy_u8Port ,uint8 Copy_u8Direction)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <DIO_u8SetPortDerection+0x6>
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <DIO_u8SetPortDerection+0x8>
    1bf6:	0f 92       	push	r0
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c00:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	3d 83       	std	Y+5, r19	; 0x05
    1c0a:	2c 83       	std	Y+4, r18	; 0x04
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	91 05       	cpc	r25, r1
    1c14:	d1 f0       	breq	.+52     	; 0x1c4a <DIO_u8SetPortDerection+0x5c>
    1c16:	2c 81       	ldd	r18, Y+4	; 0x04
    1c18:	3d 81       	ldd	r19, Y+5	; 0x05
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <DIO_u8SetPortDerection+0x3c>
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	61 f0       	breq	.+24     	; 0x1c40 <DIO_u8SetPortDerection+0x52>
    1c28:	1f c0       	rjmp	.+62     	; 0x1c68 <DIO_u8SetPortDerection+0x7a>
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	81 f0       	breq	.+32     	; 0x1c54 <DIO_u8SetPortDerection+0x66>
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	9d 81       	ldd	r25, Y+5	; 0x05
    1c38:	83 30       	cpi	r24, 0x03	; 3
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	81 f0       	breq	.+32     	; 0x1c5e <DIO_u8SetPortDerection+0x70>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <DIO_u8SetPortDerection+0x7a>
	{
	case DIO_u8PORTA:DDRA = Copy_u8Direction ;break;
    1c40:	ea e3       	ldi	r30, 0x3A	; 58
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	80 83       	st	Z, r24
    1c48:	11 c0       	rjmp	.+34     	; 0x1c6c <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTB:DDRB = Copy_u8Direction ;break;
    1c4a:	e7 e3       	ldi	r30, 0x37	; 55
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	80 83       	st	Z, r24
    1c52:	0c c0       	rjmp	.+24     	; 0x1c6c <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTC:DDRC = Copy_u8Direction ;break;
    1c54:	e4 e3       	ldi	r30, 0x34	; 52
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	80 83       	st	Z, r24
    1c5c:	07 c0       	rjmp	.+14     	; 0x1c6c <DIO_u8SetPortDerection+0x7e>
	case DIO_u8PORTD:DDRD = Copy_u8Direction ;break;
    1c5e:	e1 e3       	ldi	r30, 0x31	; 49
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	80 83       	st	Z, r24
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <DIO_u8SetPortDerection+0x7e>
	default:Local_u8ErrorState = NOK;break;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port  ,uint8 Copy_u8Value)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_u8SetPortValue+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_u8SetPortValue+0x8>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1c90:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	d1 f0       	breq	.+52     	; 0x1cda <DIO_u8SetPortValue+0x5c>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	2c f4       	brge	.+10     	; 0x1cba <DIO_u8SetPortValue+0x3c>
    1cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <DIO_u8SetPortValue+0x52>
    1cb8:	1f c0       	rjmp	.+62     	; 0x1cf8 <DIO_u8SetPortValue+0x7a>
    1cba:	2c 81       	ldd	r18, Y+4	; 0x04
    1cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	81 f0       	breq	.+32     	; 0x1ce4 <DIO_u8SetPortValue+0x66>
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	81 f0       	breq	.+32     	; 0x1cee <DIO_u8SetPortValue+0x70>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA:PORTA = Copy_u8Value ;break;
    1cd0:	eb e3       	ldi	r30, 0x3B	; 59
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	80 83       	st	Z, r24
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB:PORTB = Copy_u8Value ;break;
    1cda:	e8 e3       	ldi	r30, 0x38	; 56
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	80 83       	st	Z, r24
    1ce2:	0c c0       	rjmp	.+24     	; 0x1cfc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC:PORTC = Copy_u8Value ;break;
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	80 83       	st	Z, r24
    1cec:	07 c0       	rjmp	.+14     	; 0x1cfc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD:PORTD = Copy_u8Value ;break;
    1cee:	e2 e3       	ldi	r30, 0x32	; 50
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	80 83       	st	Z, r24
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_u8SetPortValue+0x7e>
	default:Local_u8ErrorState = NOK;break;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <DIO_u8GetPortValue>:
uint8 DIO_u8GetPortValue(uint8 Copy_u8Port  ,uint8* Copy_pu8Value)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <DIO_u8GetPortValue+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <DIO_u8GetPortValue+0x8>
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <DIO_u8GetPortValue+0xa>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	7c 83       	std	Y+4, r23	; 0x04
    1d20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1d22:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <DIO_u8GetPortValue+0x20>
    1d2c:	3e c0       	rjmp	.+124    	; 0x1daa <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3e 83       	std	Y+6, r19	; 0x06
    1d36:	2d 83       	std	Y+5, r18	; 0x05
    1d38:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	e1 f0       	breq	.+56     	; 0x1d7a <DIO_u8GetPortValue+0x6c>
    1d42:	2d 81       	ldd	r18, Y+5	; 0x05
    1d44:	3e 81       	ldd	r19, Y+6	; 0x06
    1d46:	22 30       	cpi	r18, 0x02	; 2
    1d48:	31 05       	cpc	r19, r1
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <DIO_u8GetPortValue+0x48>
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f0       	breq	.+24     	; 0x1d6c <DIO_u8GetPortValue+0x5e>
    1d54:	27 c0       	rjmp	.+78     	; 0x1da4 <DIO_u8GetPortValue+0x96>
    1d56:	2d 81       	ldd	r18, Y+5	; 0x05
    1d58:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5a:	22 30       	cpi	r18, 0x02	; 2
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	a1 f0       	breq	.+40     	; 0x1d88 <DIO_u8GetPortValue+0x7a>
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
    1d62:	9e 81       	ldd	r25, Y+6	; 0x06
    1d64:	83 30       	cpi	r24, 0x03	; 3
    1d66:	91 05       	cpc	r25, r1
    1d68:	b1 f0       	breq	.+44     	; 0x1d96 <DIO_u8GetPortValue+0x88>
    1d6a:	1c c0       	rjmp	.+56     	; 0x1da4 <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8PORTA:*(Copy_pu8Value) = PINA ;break;
    1d6c:	e9 e3       	ldi	r30, 0x39	; 57
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	eb 81       	ldd	r30, Y+3	; 0x03
    1d74:	fc 81       	ldd	r31, Y+4	; 0x04
    1d76:	80 83       	st	Z, r24
    1d78:	1a c0       	rjmp	.+52     	; 0x1dae <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTB:*(Copy_pu8Value) = PINB ;break;
    1d7a:	e6 e3       	ldi	r30, 0x36	; 54
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	eb 81       	ldd	r30, Y+3	; 0x03
    1d82:	fc 81       	ldd	r31, Y+4	; 0x04
    1d84:	80 83       	st	Z, r24
    1d86:	13 c0       	rjmp	.+38     	; 0x1dae <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTC:*(Copy_pu8Value) = PINC ;break;
    1d88:	e3 e3       	ldi	r30, 0x33	; 51
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d90:	fc 81       	ldd	r31, Y+4	; 0x04
    1d92:	80 83       	st	Z, r24
    1d94:	0c c0       	rjmp	.+24     	; 0x1dae <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTD:*(Copy_pu8Value) = PIND ;break;
    1d96:	e0 e3       	ldi	r30, 0x30	; 48
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1da0:	80 83       	st	Z, r24
    1da2:	05 c0       	rjmp	.+10     	; 0x1dae <DIO_u8GetPortValue+0xa0>
		default:Local_u8ErrorState = NOK;break;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	89 83       	std	Y+1, r24	; 0x01
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8GetPortValue+0xa0>
		}
	}else
	{
		Local_u8ErrorState = NOK;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db0:	26 96       	adiw	r28, 0x06	; 6
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <KPD_u8GetPressedKey>:
#include "KPD_Private.h"

/* Required : All row pins are input pulled up , All column pins are output high  */

uint8 KPD_u8GetPressedKey(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	a0 97       	sbiw	r28, 0x20	; 32
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedKey = KPD_u8NO_PRESSED_KEY_VAL;
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
    1dd8:	8f 8f       	std	Y+31, r24	; 0x1f
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;


	/* Activate column pins and read the row  */
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
    1dda:	1d 8e       	std	Y+29, r1	; 0x1d
    1ddc:	67 c1       	rjmp	.+718    	; 0x20ac <KPD_u8GetPressedKey+0x2ea>
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    1dde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	fc 01       	movw	r30, r24
    1de6:	ed 52       	subi	r30, 0x2D	; 45
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	90 81       	ld	r25, Z
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	69 2f       	mov	r22, r25
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>

		for(Local_u8ROWCounter =0 ; Local_u8ROWCounter < KPD_u8ROW_NUM ; Local_u8ROWCounter++)
    1df6:	1e 8e       	std	Y+30, r1	; 0x1e
    1df8:	46 c1       	rjmp	.+652    	; 0x2086 <KPD_u8GetPressedKey+0x2c4>
		{
			/* READ the current row */
			DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    1dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	e1 53       	subi	r30, 0x31	; 49
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	90 81       	ld	r25, Z
    1e08:	9e 01       	movw	r18, r28
    1e0a:	20 5e       	subi	r18, 0xE0	; 224
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	69 2f       	mov	r22, r25
    1e12:	a9 01       	movw	r20, r18
    1e14:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>

			/* if the current row is low , button is pressed */
			if(Local_u8KeyState == DIO_u8PIN_LOW)
    1e18:	88 a1       	ldd	r24, Y+32	; 0x20
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <KPD_u8GetPressedKey+0x5e>
    1e1e:	30 c1       	rjmp	.+608    	; 0x2080 <KPD_u8GetPressedKey+0x2be>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 ea       	ldi	r26, 0xA0	; 160
    1e26:	b1 e4       	ldi	r27, 0x41	; 65
    1e28:	89 8f       	std	Y+25, r24	; 0x19
    1e2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	69 8d       	ldd	r22, Y+25	; 0x19
    1e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a ef       	ldi	r20, 0xFA	; 250
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8d 8b       	std	Y+21, r24	; 0x15
    1e4a:	9e 8b       	std	Y+22, r25	; 0x16
    1e4c:	af 8b       	std	Y+23, r26	; 0x17
    1e4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e50:	6d 89       	ldd	r22, Y+21	; 0x15
    1e52:	7e 89       	ldd	r23, Y+22	; 0x16
    1e54:	8f 89       	ldd	r24, Y+23	; 0x17
    1e56:	98 8d       	ldd	r25, Y+24	; 0x18
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <KPD_u8GetPressedKey+0xb0>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <KPD_u8GetPressedKey+0x12e>
	else if (__tmp > 65535)
    1e72:	6d 89       	ldd	r22, Y+21	; 0x15
    1e74:	7e 89       	ldd	r23, Y+22	; 0x16
    1e76:	8f 89       	ldd	r24, Y+23	; 0x17
    1e78:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <KPD_u8GetPressedKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <KPD_u8GetPressedKey+0x110>
    1eb4:	88 ec       	ldi	r24, 0xC8	; 200
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9a 8b       	std	Y+18, r25	; 0x12
    1eba:	89 8b       	std	Y+17, r24	; 0x11
    1ebc:	89 89       	ldd	r24, Y+17	; 0x11
    1ebe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <KPD_u8GetPressedKey+0xfe>
    1ec4:	9a 8b       	std	Y+18, r25	; 0x12
    1ec6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <KPD_u8GetPressedKey+0xf2>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <KPD_u8GetPressedKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	98 8b       	std	Y+16, r25	; 0x10
    1ef6:	8f 87       	std	Y+15, r24	; 0x0f
    1ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efa:	98 89       	ldd	r25, Y+16	; 0x10
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <KPD_u8GetPressedKey+0x13a>
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(20);
				DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    1f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e1 53       	subi	r30, 0x31	; 49
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	90 81       	ld	r25, Z
    1f12:	9e 01       	movw	r18, r28
    1f14:	20 5e       	subi	r18, 0xE0	; 224
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	69 2f       	mov	r22, r25
    1f1c:	a9 01       	movw	r20, r18
    1f1e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>

				if(Local_u8KeyState == DIO_u8PIN_LOW)
    1f22:	88 a1       	ldd	r24, Y+32	; 0x20
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <KPD_u8GetPressedKey+0x168>
    1f28:	a7 c0       	rjmp	.+334    	; 0x2078 <KPD_u8GetPressedKey+0x2b6>
				{
					Local_u8PressedKey = Local_u8KPDArr[Local_u8ROWCounter][Local_u8ColCounter];
    1f2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	ca 01       	movw	r24, r20
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	82 0f       	add	r24, r18
    1f42:	93 1f       	adc	r25, r19
    1f44:	fc 01       	movw	r30, r24
    1f46:	e1 54       	subi	r30, 0x41	; 65
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4e:	94 c0       	rjmp	.+296    	; 0x2078 <KPD_u8GetPressedKey+0x2b6>
				/* wait until key is released */

				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					/* READ the current row */
					DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    1f50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	fc 01       	movw	r30, r24
    1f58:	e1 53       	subi	r30, 0x31	; 49
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	90 81       	ld	r25, Z
    1f5e:	9e 01       	movw	r18, r28
    1f60:	20 5e       	subi	r18, 0xE0	; 224
    1f62:	3f 4f       	sbci	r19, 0xFF	; 255
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	69 2f       	mov	r22, r25
    1f68:	a9 01       	movw	r20, r18
    1f6a:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>

					if(Local_u8KeyState == DIO_u8PIN_HIGH)
    1f6e:	88 a1       	ldd	r24, Y+32	; 0x20
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <KPD_u8GetPressedKey+0x1b4>
    1f74:	81 c0       	rjmp	.+258    	; 0x2078 <KPD_u8GetPressedKey+0x2b6>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 ea       	ldi	r26, 0xA0	; 160
    1f7c:	b1 e4       	ldi	r27, 0x41	; 65
    1f7e:	8b 87       	std	Y+11, r24	; 0x0b
    1f80:	9c 87       	std	Y+12, r25	; 0x0c
    1f82:	ad 87       	std	Y+13, r26	; 0x0d
    1f84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	4a ef       	ldi	r20, 0xFA	; 250
    1f94:	54 e4       	ldi	r21, 0x44	; 68
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8f 83       	std	Y+7, r24	; 0x07
    1fa0:	98 87       	std	Y+8, r25	; 0x08
    1fa2:	a9 87       	std	Y+9, r26	; 0x09
    1fa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa8:	78 85       	ldd	r23, Y+8	; 0x08
    1faa:	89 85       	ldd	r24, Y+9	; 0x09
    1fac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e8       	ldi	r20, 0x80	; 128
    1fb4:	5f e3       	ldi	r21, 0x3F	; 63
    1fb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	2c f4       	brge	.+10     	; 0x1fc8 <KPD_u8GetPressedKey+0x206>
		__ticks = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	3f c0       	rjmp	.+126    	; 0x2046 <KPD_u8GetPressedKey+0x284>
	else if (__tmp > 65535)
    1fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fca:	78 85       	ldd	r23, Y+8	; 0x08
    1fcc:	89 85       	ldd	r24, Y+9	; 0x09
    1fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	3f ef       	ldi	r19, 0xFF	; 255
    1fd4:	4f e7       	ldi	r20, 0x7F	; 127
    1fd6:	57 e4       	ldi	r21, 0x47	; 71
    1fd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fdc:	18 16       	cp	r1, r24
    1fde:	4c f5       	brge	.+82     	; 0x2032 <KPD_u8GetPressedKey+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	0f c0       	rjmp	.+30     	; 0x2028 <KPD_u8GetPressedKey+0x266>
    200a:	88 ec       	ldi	r24, 0xC8	; 200
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
    2012:	8b 81       	ldd	r24, Y+3	; 0x03
    2014:	9c 81       	ldd	r25, Y+4	; 0x04
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <KPD_u8GetPressedKey+0x254>
    201a:	9c 83       	std	Y+4, r25	; 0x04
    201c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	9e 81       	ldd	r25, Y+6	; 0x06
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	69 f7       	brne	.-38     	; 0x200a <KPD_u8GetPressedKey+0x248>
    2030:	14 c0       	rjmp	.+40     	; 0x205a <KPD_u8GetPressedKey+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2032:	6f 81       	ldd	r22, Y+7	; 0x07
    2034:	78 85       	ldd	r23, Y+8	; 0x08
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
    2046:	8d 81       	ldd	r24, Y+5	; 0x05
    2048:	9e 81       	ldd	r25, Y+6	; 0x06
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <KPD_u8GetPressedKey+0x290>
    2056:	9a 83       	std	Y+2, r25	; 0x02
    2058:	89 83       	std	Y+1, r24	; 0x01
					{
						_delay_ms(20);
						DIO_u8GetPinValue(KPD_u8ROW_PORT ,Local_u8ROWArr[Local_u8ROWCounter] , &Local_u8KeyState);
    205a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	fc 01       	movw	r30, r24
    2062:	e1 53       	subi	r30, 0x31	; 49
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	90 81       	ld	r25, Z
    2068:	9e 01       	movw	r18, r28
    206a:	20 5e       	subi	r18, 0xE0	; 224
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	69 2f       	mov	r22, r25
    2072:	a9 01       	movw	r20, r18
    2074:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <DIO_u8GetPinValue>
				{
					Local_u8PressedKey = Local_u8KPDArr[Local_u8ROWCounter][Local_u8ColCounter];
				}
				/* wait until key is released */

				while(Local_u8KeyState == DIO_u8PIN_LOW)
    2078:	88 a1       	ldd	r24, Y+32	; 0x20
    207a:	88 23       	and	r24, r24
    207c:	09 f4       	brne	.+2      	; 0x2080 <KPD_u8GetPressedKey+0x2be>
    207e:	68 cf       	rjmp	.-304    	; 0x1f50 <KPD_u8GetPressedKey+0x18e>
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8ROWCounter =0 ; Local_u8ROWCounter < KPD_u8ROW_NUM ; Local_u8ROWCounter++)
    2080:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	8e 8f       	std	Y+30, r24	; 0x1e
    2086:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2088:	84 30       	cpi	r24, 0x04	; 4
    208a:	08 f4       	brcc	.+2      	; 0x208e <KPD_u8GetPressedKey+0x2cc>
    208c:	b6 ce       	rjmp	.-660    	; 0x1dfa <KPD_u8GetPressedKey+0x38>
			}

		}

		/* Deactivate the current col */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    208e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	fc 01       	movw	r30, r24
    2096:	ed 52       	subi	r30, 0x2D	; 45
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	90 81       	ld	r25, Z
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	69 2f       	mov	r22, r25
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
	static uint8 Local_u8ROWArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN,KPD_u8ROW2_PIN,KPD_u8ROW3_PIN,KPD_u8ROW4_PIN};
	static uint8 Local_u8KPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR;


	/* Activate column pins and read the row  */
	for(Local_u8ColCounter = 0 ; Local_u8ColCounter < KPD_u8COL_NUM ; Local_u8ColCounter++)
    20a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20a8:	8f 5f       	subi	r24, 0xFF	; 255
    20aa:	8d 8f       	std	Y+29, r24	; 0x1d
    20ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ae:	84 30       	cpi	r24, 0x04	; 4
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <KPD_u8GetPressedKey+0x2f2>
    20b2:	95 ce       	rjmp	.-726    	; 0x1dde <KPD_u8GetPressedKey+0x1c>

		/* Deactivate the current col */
		DIO_u8SetPinValue(KPD_u8COL_PORT , Local_u8ColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    20b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    20b6:	a0 96       	adiw	r28, 0x20	; 32
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <LDR_u8GetAnalogVolt>:
#include "LDR_Cfg.h"
#include "LDR_Interface.h"
#include "LDR_Private.h"

uint8 LDR_u8GetAnalogVolt(uint8 Copy_u8ADC_Channel , uint16 *Copy_pu16AnalogVolt)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	28 97       	sbiw	r28, 0x08	; 8
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	8c 83       	std	Y+4, r24	; 0x04
    20de:	7e 83       	std	Y+6, r23	; 0x06
    20e0:	6d 83       	std	Y+5, r22	; 0x05
	uint8 Local_u8ErrorState = OK;
    20e2:	19 82       	std	Y+1, r1	; 0x01
	uint16 Local_u16ADC_u8Reading = 0u;
    20e4:	1b 82       	std	Y+3, r1	; 0x03
    20e6:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pu16AnalogVolt != NULL)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <LDR_u8GetAnalogVolt+0x2a>
    20f0:	90 c0       	rjmp	.+288    	; 0x2212 <LDR_u8GetAnalogVolt+0x14a>
	{
		switch(Copy_u8ADC_Channel)
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	38 87       	std	Y+8, r19	; 0x08
    20fa:	2f 83       	std	Y+7, r18	; 0x07
    20fc:	8f 81       	ldd	r24, Y+7	; 0x07
    20fe:	98 85       	ldd	r25, Y+8	; 0x08
    2100:	83 30       	cpi	r24, 0x03	; 3
    2102:	91 05       	cpc	r25, r1
    2104:	09 f4       	brne	.+2      	; 0x2108 <LDR_u8GetAnalogVolt+0x40>
    2106:	41 c0       	rjmp	.+130    	; 0x218a <LDR_u8GetAnalogVolt+0xc2>
    2108:	2f 81       	ldd	r18, Y+7	; 0x07
    210a:	38 85       	ldd	r19, Y+8	; 0x08
    210c:	24 30       	cpi	r18, 0x04	; 4
    210e:	31 05       	cpc	r19, r1
    2110:	7c f4       	brge	.+30     	; 0x2130 <LDR_u8GetAnalogVolt+0x68>
    2112:	8f 81       	ldd	r24, Y+7	; 0x07
    2114:	98 85       	ldd	r25, Y+8	; 0x08
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	39 f1       	breq	.+78     	; 0x216a <LDR_u8GetAnalogVolt+0xa2>
    211c:	2f 81       	ldd	r18, Y+7	; 0x07
    211e:	38 85       	ldd	r19, Y+8	; 0x08
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	54 f5       	brge	.+84     	; 0x217a <LDR_u8GetAnalogVolt+0xb2>
    2126:	8f 81       	ldd	r24, Y+7	; 0x07
    2128:	98 85       	ldd	r25, Y+8	; 0x08
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	b1 f0       	breq	.+44     	; 0x215a <LDR_u8GetAnalogVolt+0x92>
    212e:	55 c0       	rjmp	.+170    	; 0x21da <LDR_u8GetAnalogVolt+0x112>
    2130:	2f 81       	ldd	r18, Y+7	; 0x07
    2132:	38 85       	ldd	r19, Y+8	; 0x08
    2134:	25 30       	cpi	r18, 0x05	; 5
    2136:	31 05       	cpc	r19, r1
    2138:	c1 f1       	breq	.+112    	; 0x21aa <LDR_u8GetAnalogVolt+0xe2>
    213a:	8f 81       	ldd	r24, Y+7	; 0x07
    213c:	98 85       	ldd	r25, Y+8	; 0x08
    213e:	85 30       	cpi	r24, 0x05	; 5
    2140:	91 05       	cpc	r25, r1
    2142:	5c f1       	brlt	.+86     	; 0x219a <LDR_u8GetAnalogVolt+0xd2>
    2144:	2f 81       	ldd	r18, Y+7	; 0x07
    2146:	38 85       	ldd	r19, Y+8	; 0x08
    2148:	26 30       	cpi	r18, 0x06	; 6
    214a:	31 05       	cpc	r19, r1
    214c:	b1 f1       	breq	.+108    	; 0x21ba <LDR_u8GetAnalogVolt+0xf2>
    214e:	8f 81       	ldd	r24, Y+7	; 0x07
    2150:	98 85       	ldd	r25, Y+8	; 0x08
    2152:	87 30       	cpi	r24, 0x07	; 7
    2154:	91 05       	cpc	r25, r1
    2156:	c9 f1       	breq	.+114    	; 0x21ca <LDR_u8GetAnalogVolt+0x102>
    2158:	40 c0       	rjmp	.+128    	; 0x21da <LDR_u8GetAnalogVolt+0x112>
		{
		case ADC_SINGLE_ENDED_CH0 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADC_u8Reading);break;
    215a:	9e 01       	movw	r18, r28
    215c:	2e 5f       	subi	r18, 0xFE	; 254
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	b9 01       	movw	r22, r18
    2164:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2168:	3a c0       	rjmp	.+116    	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH1 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH1,&Local_u16ADC_u8Reading);break;
    216a:	9e 01       	movw	r18, r28
    216c:	2e 5f       	subi	r18, 0xFE	; 254
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	b9 01       	movw	r22, r18
    2174:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2178:	32 c0       	rjmp	.+100    	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH2 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH2,&Local_u16ADC_u8Reading);break;
    217a:	9e 01       	movw	r18, r28
    217c:	2e 5f       	subi	r18, 0xFE	; 254
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	b9 01       	movw	r22, r18
    2184:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2188:	2a c0       	rjmp	.+84     	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH3 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH3,&Local_u16ADC_u8Reading);break;
    218a:	9e 01       	movw	r18, r28
    218c:	2e 5f       	subi	r18, 0xFE	; 254
    218e:	3f 4f       	sbci	r19, 0xFF	; 255
    2190:	83 e0       	ldi	r24, 0x03	; 3
    2192:	b9 01       	movw	r22, r18
    2194:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    2198:	22 c0       	rjmp	.+68     	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH4 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH4,&Local_u16ADC_u8Reading);break;
    219a:	9e 01       	movw	r18, r28
    219c:	2e 5f       	subi	r18, 0xFE	; 254
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	b9 01       	movw	r22, r18
    21a4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    21a8:	1a c0       	rjmp	.+52     	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH5 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH5,&Local_u16ADC_u8Reading);break;
    21aa:	9e 01       	movw	r18, r28
    21ac:	2e 5f       	subi	r18, 0xFE	; 254
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255
    21b0:	85 e0       	ldi	r24, 0x05	; 5
    21b2:	b9 01       	movw	r22, r18
    21b4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    21b8:	12 c0       	rjmp	.+36     	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH6 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH6,&Local_u16ADC_u8Reading);break;
    21ba:	9e 01       	movw	r18, r28
    21bc:	2e 5f       	subi	r18, 0xFE	; 254
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	86 e0       	ldi	r24, 0x06	; 6
    21c2:	b9 01       	movw	r22, r18
    21c4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    21c8:	0a c0       	rjmp	.+20     	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		case ADC_SINGLE_ENDED_CH7 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH7,&Local_u16ADC_u8Reading);break;
    21ca:	9e 01       	movw	r18, r28
    21cc:	2e 5f       	subi	r18, 0xFE	; 254
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	87 e0       	ldi	r24, 0x07	; 7
    21d2:	b9 01       	movw	r22, r18
    21d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <LDR_u8GetAnalogVolt+0x116>
		default :Local_u8ErrorState =NOK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01
		}
#if  LDR_ADC_u8RESOLUTION == LDR_ADC_EIGHT_BITS
		/* this equation to convert volt from ADC to the equivalent temperature */
		*Copy_pu16AnalogVolt = (uint8)(((uint32)Local_u16ADC_u8Reading * LDR_u8ADC_REF_VOLT * 1000UL)/256);
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	cc 01       	movw	r24, r24
    21e4:	a0 e0       	ldi	r26, 0x00	; 0
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	28 e8       	ldi	r18, 0x88	; 136
    21ea:	33 e1       	ldi	r19, 0x13	; 19
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	89 2f       	mov	r24, r25
    21fe:	9a 2f       	mov	r25, r26
    2200:	ab 2f       	mov	r26, r27
    2202:	bb 27       	eor	r27, r27
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	ed 81       	ldd	r30, Y+5	; 0x05
    220a:	fe 81       	ldd	r31, Y+6	; 0x06
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <LDR_u8GetAnalogVolt+0x14e>

#endif

	}else
	{
		Local_u8ErrorState =NULL_PTR_ERR;
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
}
    2218:	28 96       	adiw	r28, 0x08	; 8
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <LM35_u8GetTemp>:
#include "LM35_Interface.h"



uint8 LM35_u8GetTemp(uint8 Copy_u8ADC_Channel , uint8 *Copy_pu8Temp)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	2a 97       	sbiw	r28, 0x0a	; 10
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	8e 83       	std	Y+6, r24	; 0x06
    2240:	78 87       	std	Y+8, r23	; 0x08
    2242:	6f 83       	std	Y+7, r22	; 0x07
	uint8 Local_u8ErrorState = OK;
    2244:	1b 82       	std	Y+3, r1	; 0x03
	uint16 Local_u16ADC_u8Reading = 0u;
    2246:	1d 82       	std	Y+5, r1	; 0x05
    2248:	1c 82       	std	Y+4, r1	; 0x04
	uint16 Local_u16Voltage =0u;
    224a:	1a 82       	std	Y+2, r1	; 0x02
    224c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Temp != NULL)
    224e:	8f 81       	ldd	r24, Y+7	; 0x07
    2250:	98 85       	ldd	r25, Y+8	; 0x08
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	09 f4       	brne	.+2      	; 0x2258 <LM35_u8GetTemp+0x2e>
    2256:	97 c0       	rjmp	.+302    	; 0x2386 <LM35_u8GetTemp+0x15c>
	{
		switch(Copy_u8ADC_Channel)
    2258:	8e 81       	ldd	r24, Y+6	; 0x06
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3a 87       	std	Y+10, r19	; 0x0a
    2260:	29 87       	std	Y+9, r18	; 0x09
    2262:	89 85       	ldd	r24, Y+9	; 0x09
    2264:	9a 85       	ldd	r25, Y+10	; 0x0a
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <LM35_u8GetTemp+0x44>
    226c:	41 c0       	rjmp	.+130    	; 0x22f0 <LM35_u8GetTemp+0xc6>
    226e:	29 85       	ldd	r18, Y+9	; 0x09
    2270:	3a 85       	ldd	r19, Y+10	; 0x0a
    2272:	24 30       	cpi	r18, 0x04	; 4
    2274:	31 05       	cpc	r19, r1
    2276:	7c f4       	brge	.+30     	; 0x2296 <LM35_u8GetTemp+0x6c>
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	91 05       	cpc	r25, r1
    2280:	39 f1       	breq	.+78     	; 0x22d0 <LM35_u8GetTemp+0xa6>
    2282:	29 85       	ldd	r18, Y+9	; 0x09
    2284:	3a 85       	ldd	r19, Y+10	; 0x0a
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	54 f5       	brge	.+84     	; 0x22e0 <LM35_u8GetTemp+0xb6>
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	b1 f0       	breq	.+44     	; 0x22c0 <LM35_u8GetTemp+0x96>
    2294:	55 c0       	rjmp	.+170    	; 0x2340 <LM35_u8GetTemp+0x116>
    2296:	29 85       	ldd	r18, Y+9	; 0x09
    2298:	3a 85       	ldd	r19, Y+10	; 0x0a
    229a:	25 30       	cpi	r18, 0x05	; 5
    229c:	31 05       	cpc	r19, r1
    229e:	c1 f1       	breq	.+112    	; 0x2310 <LM35_u8GetTemp+0xe6>
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	85 30       	cpi	r24, 0x05	; 5
    22a6:	91 05       	cpc	r25, r1
    22a8:	5c f1       	brlt	.+86     	; 0x2300 <LM35_u8GetTemp+0xd6>
    22aa:	29 85       	ldd	r18, Y+9	; 0x09
    22ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ae:	26 30       	cpi	r18, 0x06	; 6
    22b0:	31 05       	cpc	r19, r1
    22b2:	b1 f1       	breq	.+108    	; 0x2320 <LM35_u8GetTemp+0xf6>
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	87 30       	cpi	r24, 0x07	; 7
    22ba:	91 05       	cpc	r25, r1
    22bc:	c9 f1       	breq	.+114    	; 0x2330 <LM35_u8GetTemp+0x106>
    22be:	40 c0       	rjmp	.+128    	; 0x2340 <LM35_u8GetTemp+0x116>
		{
		case ADC_SINGLE_ENDED_CH0 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,&Local_u16ADC_u8Reading);break;
    22c0:	9e 01       	movw	r18, r28
    22c2:	2c 5f       	subi	r18, 0xFC	; 252
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	b9 01       	movw	r22, r18
    22ca:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22ce:	3a c0       	rjmp	.+116    	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH1 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH1,&Local_u16ADC_u8Reading);break;
    22d0:	9e 01       	movw	r18, r28
    22d2:	2c 5f       	subi	r18, 0xFC	; 252
    22d4:	3f 4f       	sbci	r19, 0xFF	; 255
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	b9 01       	movw	r22, r18
    22da:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22de:	32 c0       	rjmp	.+100    	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH2 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH2,&Local_u16ADC_u8Reading);break;
    22e0:	9e 01       	movw	r18, r28
    22e2:	2c 5f       	subi	r18, 0xFC	; 252
    22e4:	3f 4f       	sbci	r19, 0xFF	; 255
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22ee:	2a c0       	rjmp	.+84     	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH3 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH3,&Local_u16ADC_u8Reading);break;
    22f0:	9e 01       	movw	r18, r28
    22f2:	2c 5f       	subi	r18, 0xFC	; 252
    22f4:	3f 4f       	sbci	r19, 0xFF	; 255
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	b9 01       	movw	r22, r18
    22fa:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    22fe:	22 c0       	rjmp	.+68     	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH4 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH4,&Local_u16ADC_u8Reading);break;
    2300:	9e 01       	movw	r18, r28
    2302:	2c 5f       	subi	r18, 0xFC	; 252
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	84 e0       	ldi	r24, 0x04	; 4
    2308:	b9 01       	movw	r22, r18
    230a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    230e:	1a c0       	rjmp	.+52     	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH5 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH5,&Local_u16ADC_u8Reading);break;
    2310:	9e 01       	movw	r18, r28
    2312:	2c 5f       	subi	r18, 0xFC	; 252
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	85 e0       	ldi	r24, 0x05	; 5
    2318:	b9 01       	movw	r22, r18
    231a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    231e:	12 c0       	rjmp	.+36     	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH6 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH6,&Local_u16ADC_u8Reading);break;
    2320:	9e 01       	movw	r18, r28
    2322:	2c 5f       	subi	r18, 0xFC	; 252
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	86 e0       	ldi	r24, 0x06	; 6
    2328:	b9 01       	movw	r22, r18
    232a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    232e:	0a c0       	rjmp	.+20     	; 0x2344 <LM35_u8GetTemp+0x11a>
		case ADC_SINGLE_ENDED_CH7 :ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH7,&Local_u16ADC_u8Reading);break;
    2330:	9e 01       	movw	r18, r28
    2332:	2c 5f       	subi	r18, 0xFC	; 252
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	87 e0       	ldi	r24, 0x07	; 7
    2338:	b9 01       	movw	r22, r18
    233a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8StartConversionSynch>
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <LM35_u8GetTemp+0x11a>
		default :Local_u8ErrorState =NOK;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	8b 83       	std	Y+3, r24	; 0x03
		}

#if  LM35_ADC_u8RESOLUTION == LM35_ADC_EIGHT_BITS
		/* this equation to convert volt from ADC to the equivalent temperature */
		Local_u16Voltage = (uint16)(((uint32)Local_u16ADC_u8Reading * LM35_u8ADC_REF_VOLT * 1000UL)/256);
    2344:	8c 81       	ldd	r24, Y+4	; 0x04
    2346:	9d 81       	ldd	r25, Y+5	; 0x05
    2348:	cc 01       	movw	r24, r24
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	28 e8       	ldi	r18, 0x88	; 136
    2350:	33 e1       	ldi	r19, 0x13	; 19
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	89 2f       	mov	r24, r25
    2364:	9a 2f       	mov	r25, r26
    2366:	ab 2f       	mov	r26, r27
    2368:	bb 27       	eor	r27, r27
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
#error Wrong LM35_ADC_u8RESOLUTION configuration option

#endif

		/*Calculate the temperature*/
		*Copy_pu8Temp = (uint8) (Local_u16Voltage /  10u);
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	2a e0       	ldi	r18, 0x0A	; 10
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__udivmodhi4>
    237c:	cb 01       	movw	r24, r22
    237e:	ef 81       	ldd	r30, Y+7	; 0x07
    2380:	f8 85       	ldd	r31, Y+8	; 0x08
    2382:	80 83       	st	Z, r24
    2384:	02 c0       	rjmp	.+4      	; 0x238a <LM35_u8GetTemp+0x160>

	}else
	{
		Local_u8ErrorState =NULL_PTR_ERR;
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    238c:	2a 96       	adiw	r28, 0x0a	; 10
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	08 95       	ret

0000239e <F_u32MAP>:
#include "defines.h"
#include "DIO_Interfce.h"


uint32 F_u32MAP(uint32 Copy_u32InputRangeMini , uint32 Copy_u32InputRangeMax ,uint32 Copy_u32OutputRangeMini ,uint32 Copy_u32OutputRangeMax , uint32 Copy_u32ADC_Reading)
{
    239e:	af 92       	push	r10
    23a0:	bf 92       	push	r11
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	64 97       	sbiw	r28, 0x14	; 20
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
    23c2:	6d 83       	std	Y+5, r22	; 0x05
    23c4:	7e 83       	std	Y+6, r23	; 0x06
    23c6:	8f 83       	std	Y+7, r24	; 0x07
    23c8:	98 87       	std	Y+8, r25	; 0x08
    23ca:	29 87       	std	Y+9, r18	; 0x09
    23cc:	3a 87       	std	Y+10, r19	; 0x0a
    23ce:	4b 87       	std	Y+11, r20	; 0x0b
    23d0:	5c 87       	std	Y+12, r21	; 0x0c
    23d2:	ed 86       	std	Y+13, r14	; 0x0d
    23d4:	fe 86       	std	Y+14, r15	; 0x0e
    23d6:	0f 87       	std	Y+15, r16	; 0x0f
    23d8:	18 8b       	std	Y+16, r17	; 0x10
    23da:	a9 8a       	std	Y+17, r10	; 0x11
    23dc:	ba 8a       	std	Y+18, r11	; 0x12
    23de:	cb 8a       	std	Y+19, r12	; 0x13
    23e0:	dc 8a       	std	Y+20, r13	; 0x14
	/* define a var to carry OutputValue */
	uint32 Local_u32OutputValue;

	/* i replace the position of (Copy_s32InputRangeMax - Copy_s32InputValue) to have a positive value in Local_s32OutputValue */
	Local_u32OutputValue= (((Copy_u32OutputRangeMax - Copy_u32OutputRangeMini)*(Copy_u32ADC_Reading - Copy_u32InputRangeMini)) / (Copy_u32InputRangeMax - Copy_u32InputRangeMini)) + Copy_u32OutputRangeMini;
    23e2:	29 89       	ldd	r18, Y+17	; 0x11
    23e4:	3a 89       	ldd	r19, Y+18	; 0x12
    23e6:	4b 89       	ldd	r20, Y+19	; 0x13
    23e8:	5c 89       	ldd	r21, Y+20	; 0x14
    23ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ee:	af 85       	ldd	r26, Y+15	; 0x0f
    23f0:	b8 89       	ldd	r27, Y+16	; 0x10
    23f2:	79 01       	movw	r14, r18
    23f4:	8a 01       	movw	r16, r20
    23f6:	e8 1a       	sub	r14, r24
    23f8:	f9 0a       	sbc	r15, r25
    23fa:	0a 0b       	sbc	r16, r26
    23fc:	1b 0b       	sbc	r17, r27
    23fe:	29 a1       	ldd	r18, Y+33	; 0x21
    2400:	3a a1       	ldd	r19, Y+34	; 0x22
    2402:	4b a1       	ldd	r20, Y+35	; 0x23
    2404:	5c a1       	ldd	r21, Y+36	; 0x24
    2406:	8d 81       	ldd	r24, Y+5	; 0x05
    2408:	9e 81       	ldd	r25, Y+6	; 0x06
    240a:	af 81       	ldd	r26, Y+7	; 0x07
    240c:	b8 85       	ldd	r27, Y+8	; 0x08
    240e:	28 1b       	sub	r18, r24
    2410:	39 0b       	sbc	r19, r25
    2412:	4a 0b       	sbc	r20, r26
    2414:	5b 0b       	sbc	r21, r27
    2416:	c8 01       	movw	r24, r16
    2418:	b7 01       	movw	r22, r14
    241a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    241e:	7b 01       	movw	r14, r22
    2420:	8c 01       	movw	r16, r24
    2422:	29 85       	ldd	r18, Y+9	; 0x09
    2424:	3a 85       	ldd	r19, Y+10	; 0x0a
    2426:	4b 85       	ldd	r20, Y+11	; 0x0b
    2428:	5c 85       	ldd	r21, Y+12	; 0x0c
    242a:	8d 81       	ldd	r24, Y+5	; 0x05
    242c:	9e 81       	ldd	r25, Y+6	; 0x06
    242e:	af 81       	ldd	r26, Y+7	; 0x07
    2430:	b8 85       	ldd	r27, Y+8	; 0x08
    2432:	28 1b       	sub	r18, r24
    2434:	39 0b       	sbc	r19, r25
    2436:	4a 0b       	sbc	r20, r26
    2438:	5b 0b       	sbc	r21, r27
    243a:	c8 01       	movw	r24, r16
    243c:	b7 01       	movw	r22, r14
    243e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__udivmodsi4>
    2442:	da 01       	movw	r26, r20
    2444:	c9 01       	movw	r24, r18
    2446:	9c 01       	movw	r18, r24
    2448:	ad 01       	movw	r20, r26
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	af 85       	ldd	r26, Y+15	; 0x0f
    2450:	b8 89       	ldd	r27, Y+16	; 0x10
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	a4 1f       	adc	r26, r20
    2458:	b5 1f       	adc	r27, r21
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	ab 83       	std	Y+3, r26	; 0x03
    2460:	bc 83       	std	Y+4, r27	; 0x04


	return Local_u32OutputValue;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	ab 81       	ldd	r26, Y+3	; 0x03
    2468:	bc 81       	ldd	r27, Y+4	; 0x04
}
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	64 96       	adiw	r28, 0x14	; 20
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	08 95       	ret

00002490 <PORT_voidInit>:
#include  "PORT_Cfg.h"
#include  "PORT_Private.h"


void PORT_voidInit(void)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR ;
    2498:	ea e3       	ldi	r30, 0x3A	; 58
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	87 ee       	ldi	r24, 0xE7	; 231
    249e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
    24a0:	e7 e3       	ldi	r30, 0x37	; 55
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    24a8:	e4 e3       	ldi	r30, 0x34	; 52
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 ef       	ldi	r24, 0xF0	; 240
    24ae:	80 83       	st	Z, r24
	DDRD = PORTD_DIR ;
    24b0:	e1 e3       	ldi	r30, 0x31	; 49
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8f ef       	ldi	r24, 0xFF	; 255
    24b6:	80 83       	st	Z, r24


	PORTA = PORTA_INITIAL_VAL;
    24b8:	eb e3       	ldi	r30, 0x3B	; 59
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	8f ef       	ldi	r24, 0xFF	; 255
    24be:	80 83       	st	Z, r24
	PORTB = PORTB_INITIAL_VAL;
    24c0:	e8 e3       	ldi	r30, 0x38	; 56
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VAL;
    24c8:	e5 e3       	ldi	r30, 0x35	; 53
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VAL;
    24d0:	e2 e3       	ldi	r30, 0x32	; 50
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	8f e7       	ldi	r24, 0x7F	; 127
    24d6:	80 83       	st	Z, r24

}
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <SSD_u8Display_ON>:




uint8 SSD_u8Display_ON(SSD_Struct *puFrom_SSD_Struct)
{
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <SSD_u8Display_ON+0x6>
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	9b 83       	std	Y+3, r25	; 0x03
    24ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState =OK;
    24ee:	19 82       	std	Y+1, r1	; 0x01

	if(puFrom_SSD_Struct != NULL)
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	9b 81       	ldd	r25, Y+3	; 0x03
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	b9 f1       	breq	.+110    	; 0x2566 <SSD_u8Display_ON+0x88>
	{
		if(puFrom_SSD_Struct -> SSD_u8TYPE == SSD_COMMON_ANODE)
    24f8:	ea 81       	ldd	r30, Y+2	; 0x02
    24fa:	fb 81       	ldd	r31, Y+3	; 0x03
    24fc:	80 81       	ld	r24, Z
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	a9 f4       	brne	.+42     	; 0x252c <SSD_u8Display_ON+0x4e>
		{
			/* Set SSD_u8ENABLE_PIN AS OUTPUT and high because SSD is SSD_COMMON_ANODE  */
			DIO_u8SetPinDerection(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_OUTPUT);
    2502:	ea 81       	ldd	r30, Y+2	; 0x02
    2504:	fb 81       	ldd	r31, Y+3	; 0x03
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	ea 81       	ldd	r30, Y+2	; 0x02
    250a:	fb 81       	ldd	r31, Y+3	; 0x03
    250c:	93 81       	ldd	r25, Z+3	; 0x03
    250e:	69 2f       	mov	r22, r25
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinDerection>
			DIO_u8SetPinValue(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_HIGH);
    2516:	ea 81       	ldd	r30, Y+2	; 0x02
    2518:	fb 81       	ldd	r31, Y+3	; 0x03
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	ea 81       	ldd	r30, Y+2	; 0x02
    251e:	fb 81       	ldd	r31, Y+3	; 0x03
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	69 2f       	mov	r22, r25
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
    252a:	1f c0       	rjmp	.+62     	; 0x256a <SSD_u8Display_ON+0x8c>

		}else if (puFrom_SSD_Struct -> SSD_u8TYPE == SSD_COMMON_CATHODE)
    252c:	ea 81       	ldd	r30, Y+2	; 0x02
    252e:	fb 81       	ldd	r31, Y+3	; 0x03
    2530:	80 81       	ld	r24, Z
    2532:	82 30       	cpi	r24, 0x02	; 2
    2534:	a9 f4       	brne	.+42     	; 0x2560 <SSD_u8Display_ON+0x82>
		{
			/* Set SSD_u8ENABLE_PIN AS OUTPUT and low because SSD is SSD_COMMON_CATHODE  */
			DIO_u8SetPinDerection(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_OUTPUT);
    2536:	ea 81       	ldd	r30, Y+2	; 0x02
    2538:	fb 81       	ldd	r31, Y+3	; 0x03
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	ea 81       	ldd	r30, Y+2	; 0x02
    253e:	fb 81       	ldd	r31, Y+3	; 0x03
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	69 2f       	mov	r22, r25
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinDerection>
			DIO_u8SetPinValue(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_LOW);
    254a:	ea 81       	ldd	r30, Y+2	; 0x02
    254c:	fb 81       	ldd	r31, Y+3	; 0x03
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	ea 81       	ldd	r30, Y+2	; 0x02
    2552:	fb 81       	ldd	r31, Y+3	; 0x03
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	69 2f       	mov	r22, r25
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
    255e:	05 c0       	rjmp	.+10     	; 0x256a <SSD_u8Display_ON+0x8c>
		}else
		{
			Local_u8ErrorState =NOK;
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	02 c0       	rjmp	.+4      	; 0x256a <SSD_u8Display_ON+0x8c>
		}

	}else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    256a:	89 81       	ldd	r24, Y+1	; 0x01
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <SSD_u8Display_OFF>:


uint8 SSD_u8Display_OFF(SSD_Struct *puFrom_SSD_Struct)
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	00 d0       	rcall	.+0      	; 0x257e <SSD_u8Display_OFF+0x6>
    257e:	0f 92       	push	r0
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	9b 83       	std	Y+3, r25	; 0x03
    2586:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState =OK;
    2588:	19 82       	std	Y+1, r1	; 0x01

	if(puFrom_SSD_Struct != NULL)
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	b9 f1       	breq	.+110    	; 0x2600 <SSD_u8Display_OFF+0x88>
	{
		if(puFrom_SSD_Struct -> SSD_u8TYPE == SSD_COMMON_ANODE)
    2592:	ea 81       	ldd	r30, Y+2	; 0x02
    2594:	fb 81       	ldd	r31, Y+3	; 0x03
    2596:	80 81       	ld	r24, Z
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	a9 f4       	brne	.+42     	; 0x25c6 <SSD_u8Display_OFF+0x4e>
		{
			/* Set SSD_u8ENABLE_PIN AS OUTPUT and high because SSD is SSD_COMMON_ANODE  */
			DIO_u8SetPinDerection(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_OUTPUT);
    259c:	ea 81       	ldd	r30, Y+2	; 0x02
    259e:	fb 81       	ldd	r31, Y+3	; 0x03
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	ea 81       	ldd	r30, Y+2	; 0x02
    25a4:	fb 81       	ldd	r31, Y+3	; 0x03
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	69 2f       	mov	r22, r25
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinDerection>
			DIO_u8SetPinValue(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_LOW);
    25b0:	ea 81       	ldd	r30, Y+2	; 0x02
    25b2:	fb 81       	ldd	r31, Y+3	; 0x03
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	ea 81       	ldd	r30, Y+2	; 0x02
    25b8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	69 2f       	mov	r22, r25
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <SSD_u8Display_OFF+0x8c>

		}else if (puFrom_SSD_Struct -> SSD_u8TYPE == SSD_COMMON_CATHODE)
    25c6:	ea 81       	ldd	r30, Y+2	; 0x02
    25c8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ca:	80 81       	ld	r24, Z
    25cc:	82 30       	cpi	r24, 0x02	; 2
    25ce:	a9 f4       	brne	.+42     	; 0x25fa <SSD_u8Display_OFF+0x82>
		{
			/* Set SSD_u8ENABLE_PIN AS OUTPUT and low because SSD is SSD_COMMON_CATHODE  */
			DIO_u8SetPinDerection(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_OUTPUT);
    25d0:	ea 81       	ldd	r30, Y+2	; 0x02
    25d2:	fb 81       	ldd	r31, Y+3	; 0x03
    25d4:	82 81       	ldd	r24, Z+2	; 0x02
    25d6:	ea 81       	ldd	r30, Y+2	; 0x02
    25d8:	fb 81       	ldd	r31, Y+3	; 0x03
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	69 2f       	mov	r22, r25
    25de:	41 e0       	ldi	r20, 0x01	; 1
    25e0:	0e 94 ad 0a 	call	0x155a	; 0x155a <DIO_u8SetPinDerection>
			DIO_u8SetPinValue(puFrom_SSD_Struct -> SSD_u8ENABLE_PORT ,puFrom_SSD_Struct -> SSD_u8ENABLE_PIN , DIO_u8PIN_HIGH);
    25e4:	ea 81       	ldd	r30, Y+2	; 0x02
    25e6:	fb 81       	ldd	r31, Y+3	; 0x03
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	ea 81       	ldd	r30, Y+2	; 0x02
    25ec:	fb 81       	ldd	r31, Y+3	; 0x03
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	69 2f       	mov	r22, r25
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 bf 0b 	call	0x177e	; 0x177e <DIO_u8SetPinValue>
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <SSD_u8Display_OFF+0x8c>
		}else
		{
			Local_u8ErrorState =NOK;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <SSD_u8Display_OFF+0x8c>
		}

	}else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <SSD_u8SetNumber>:


uint8 SSD_u8SetNumber(SSD_Struct *puFrom_SSD_Struct , uint8 Copy_u8Number)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	63 97       	sbiw	r28, 0x13	; 19
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	9d 87       	std	Y+13, r25	; 0x0d
    2628:	8c 87       	std	Y+12, r24	; 0x0c
    262a:	6e 87       	std	Y+14, r22	; 0x0e
	uint8 SSD_u8Comm_Cathod_Arr[10] = { NUMBER0 , NUMBER1 , NUMBER2 , NUMBER3 , NUMBER4 , NUMBER5 , NUMBER6 , NUMBER7 , NUMBER8 , NUMBER9 };
    262c:	ce 01       	movw	r24, r28
    262e:	02 96       	adiw	r24, 0x02	; 2
    2630:	98 8b       	std	Y+16, r25	; 0x10
    2632:	8f 87       	std	Y+15, r24	; 0x0f
    2634:	e3 ef       	ldi	r30, 0xF3	; 243
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	fa 8b       	std	Y+18, r31	; 0x12
    263a:	e9 8b       	std	Y+17, r30	; 0x11
    263c:	fa e0       	ldi	r31, 0x0A	; 10
    263e:	fb 8b       	std	Y+19, r31	; 0x13
    2640:	e9 89       	ldd	r30, Y+17	; 0x11
    2642:	fa 89       	ldd	r31, Y+18	; 0x12
    2644:	00 80       	ld	r0, Z
    2646:	89 89       	ldd	r24, Y+17	; 0x11
    2648:	9a 89       	ldd	r25, Y+18	; 0x12
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	9a 8b       	std	Y+18, r25	; 0x12
    264e:	89 8b       	std	Y+17, r24	; 0x11
    2650:	ef 85       	ldd	r30, Y+15	; 0x0f
    2652:	f8 89       	ldd	r31, Y+16	; 0x10
    2654:	00 82       	st	Z, r0
    2656:	8f 85       	ldd	r24, Y+15	; 0x0f
    2658:	98 89       	ldd	r25, Y+16	; 0x10
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	98 8b       	std	Y+16, r25	; 0x10
    265e:	8f 87       	std	Y+15, r24	; 0x0f
    2660:	9b 89       	ldd	r25, Y+19	; 0x13
    2662:	91 50       	subi	r25, 0x01	; 1
    2664:	9b 8b       	std	Y+19, r25	; 0x13
    2666:	eb 89       	ldd	r30, Y+19	; 0x13
    2668:	ee 23       	and	r30, r30
    266a:	51 f7       	brne	.-44     	; 0x2640 <SSD_u8SetNumber+0x2e>

	uint8 Local_u8StateError = OK;
    266c:	19 82       	std	Y+1, r1	; 0x01
	if(puFrom_SSD_Struct != NULL)
    266e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2670:	9d 85       	ldd	r25, Y+13	; 0x0d
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	89 f1       	breq	.+98     	; 0x26d8 <SSD_u8SetNumber+0xc6>
	{
		if((puFrom_SSD_Struct -> SSD_u8TYPE) == SSD_COMMON_ANODE)
    2676:	ec 85       	ldd	r30, Y+12	; 0x0c
    2678:	fd 85       	ldd	r31, Y+13	; 0x0d
    267a:	80 81       	ld	r24, Z
    267c:	81 30       	cpi	r24, 0x01	; 1
    267e:	99 f4       	brne	.+38     	; 0x26a6 <SSD_u8SetNumber+0x94>
		{
			DIO_u8SetPortValue((puFrom_SSD_Struct -> SSD_u8DATA_PORT) , (~ SSD_u8Comm_Cathod_Arr[Copy_u8Number]));
    2680:	ec 85       	ldd	r30, Y+12	; 0x0c
    2682:	fd 85       	ldd	r31, Y+13	; 0x0d
    2684:	41 81       	ldd	r20, Z+1	; 0x01
    2686:	8e 85       	ldd	r24, Y+14	; 0x0e
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	ce 01       	movw	r24, r28
    268e:	02 96       	adiw	r24, 0x02	; 2
    2690:	fc 01       	movw	r30, r24
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	80 81       	ld	r24, Z
    2698:	98 2f       	mov	r25, r24
    269a:	90 95       	com	r25
    269c:	84 2f       	mov	r24, r20
    269e:	69 2f       	mov	r22, r25
    26a0:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>
    26a4:	1b c0       	rjmp	.+54     	; 0x26dc <SSD_u8SetNumber+0xca>

		}else if(puFrom_SSD_Struct -> SSD_u8TYPE == SSD_COMMON_CATHODE )
    26a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    26a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    26aa:	80 81       	ld	r24, Z
    26ac:	82 30       	cpi	r24, 0x02	; 2
    26ae:	89 f4       	brne	.+34     	; 0x26d2 <SSD_u8SetNumber+0xc0>
		{
			DIO_u8SetPortValue((puFrom_SSD_Struct -> SSD_u8DATA_PORT) , (SSD_u8Comm_Cathod_Arr[Copy_u8Number]));
    26b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    26b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    26b4:	41 81       	ldd	r20, Z+1	; 0x01
    26b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	ce 01       	movw	r24, r28
    26be:	02 96       	adiw	r24, 0x02	; 2
    26c0:	fc 01       	movw	r30, r24
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	90 81       	ld	r25, Z
    26c8:	84 2f       	mov	r24, r20
    26ca:	69 2f       	mov	r22, r25
    26cc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPortValue>
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <SSD_u8SetNumber+0xca>


		}else
		{
			Local_u8StateError = NOK;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <SSD_u8SetNumber+0xca>
		}
	}else
	{
		Local_u8StateError = NULL_PTR_ERR;
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8StateError;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	63 96       	adiw	r28, 0x13	; 19
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <main>:

SSD_Struct SSD_t = {SSD_COMMON_CATHODE,DIO_u8PORTD,DIO_u8PORTD,DIO_u8PIN7};


void main(void)
{
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	c1 57       	subi	r28, 0x71	; 113
    26fe:	d0 40       	sbci	r29, 0x00	; 0
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
	uint8 Local_u8PressedKey= 0xff ;
    270a:	fe 01       	movw	r30, r28
    270c:	eb 59       	subi	r30, 0x9B	; 155
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	80 83       	st	Z, r24

	uint32 Local_u32ID_Digits=0 ;
    2714:	fe 01       	movw	r30, r28
    2716:	ef 59       	subi	r30, 0x9F	; 159
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	10 82       	st	Z, r1
    271c:	11 82       	std	Z+1, r1	; 0x01
    271e:	12 82       	std	Z+2, r1	; 0x02
    2720:	13 82       	std	Z+3, r1	; 0x03
	uint8 Local_u8ID_POSI_Counter=8 ;
    2722:	fe 01       	movw	r30, r28
    2724:	e0 5a       	subi	r30, 0xA0	; 160
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	88 e0       	ldi	r24, 0x08	; 8
    272a:	80 83       	st	Z, r24
	uint8 Local_u8FourDigitID =0 ;
    272c:	fe 01       	movw	r30, r28
    272e:	e1 5a       	subi	r30, 0xA1	; 161
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	10 82       	st	Z, r1

	uint32  Local_u32PasswordDigits=0 ;
    2734:	fe 01       	movw	r30, r28
    2736:	e5 5a       	subi	r30, 0xA5	; 165
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	10 82       	st	Z, r1
    273c:	11 82       	std	Z+1, r1	; 0x01
    273e:	12 82       	std	Z+2, r1	; 0x02
    2740:	13 82       	std	Z+3, r1	; 0x03
	uint8 Local_u8FourDigitPassword =0 ;
    2742:	fe 01       	movw	r30, r28
    2744:	e6 5a       	subi	r30, 0xA6	; 166
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	10 82       	st	Z, r1
	uint8 Local_u8Password_POSI_Counter=9;
    274a:	fe 01       	movw	r30, r28
    274c:	e7 5a       	subi	r30, 0xA7	; 167
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	89 e0       	ldi	r24, 0x09	; 9
    2752:	80 83       	st	Z, r24

	uint8 Local_u8TryCount = 0;
    2754:	fe 01       	movw	r30, r28
    2756:	e8 5a       	subi	r30, 0xA8	; 168
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	10 82       	st	Z, r1
	uint8 Local_u8Flag_OP_Done =0 ;
    275c:	fe 01       	movw	r30, r28
    275e:	e9 5a       	subi	r30, 0xA9	; 169
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	10 82       	st	Z, r1
	uint8 Local_u8SSD_Counter=4;
    2764:	fe 01       	movw	r30, r28
    2766:	ea 5a       	subi	r30, 0xAA	; 170
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	84 e0       	ldi	r24, 0x04	; 4
    276c:	80 83       	st	Z, r24
	uint8 Local_u8LM35Result=0;
    276e:	fe 01       	movw	r30, r28
    2770:	eb 5a       	subi	r30, 0xAB	; 171
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	10 82       	st	Z, r1

	PORT_voidInit();
    2776:	0e 94 48 12 	call	0x2490	; 0x2490 <PORT_voidInit>
	CLCD_voidInit();
    277a:	0e 94 b2 08 	call	0x1164	; 0x1164 <CLCD_voidInit>
	ADC_voidInit();
    277e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

	SSD_u8Display_ON(&SSD_t);
    2782:	8f ee       	ldi	r24, 0xEF	; 239
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 6f 12 	call	0x24de	; 0x24de <SSD_u8Display_ON>
	SSD_u8SetNumber(&SSD_t,0);
    278a:	8f ee       	ldi	r24, 0xEF	; 239
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	0e 94 09 13 	call	0x2612	; 0x2612 <SSD_u8SetNumber>
	/*
	F_voidWelcomeHamoksha();
	_delay_ms(100);
	CLCD_voidSendCmd(1);
	 */
	CLCD_voidGoToXY(0,0);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
	CLCD_u8SendString("EnterID:");
    279c:	80 e6       	ldi	r24, 0x60	; 96
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>


	while (1)
	{
		Local_u8PressedKey = KPD_u8GetPressedKey();
    27a4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <KPD_u8GetPressedKey>
    27a8:	fe 01       	movw	r30, r28
    27aa:	eb 59       	subi	r30, 0x9B	; 155
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 83       	st	Z, r24

		if(Local_u8PressedKey != 0xff)
    27b0:	fe 01       	movw	r30, r28
    27b2:	eb 59       	subi	r30, 0x9B	; 155
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 3f       	cpi	r24, 0xFF	; 255
    27ba:	a1 f3       	breq	.-24     	; 0x27a4 <main+0xb4>
    27bc:	56 c0       	rjmp	.+172    	; 0x286a <main+0x17a>
			/* this loop to check on Local_u8FourDigitID */
			while( Local_u8FourDigitID < 4)
			{

				/* Check if the pressed key is a digit (0 to 9) */
				if (Local_u8PressedKey <= 9)
    27be:	fe 01       	movw	r30, r28
    27c0:	eb 59       	subi	r30, 0x9B	; 155
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	8a 30       	cpi	r24, 0x0A	; 10
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <main+0xdc>
    27ca:	49 c0       	rjmp	.+146    	; 0x285e <main+0x16e>
				{
					/* go to the position after the keyword  EnterID: */
					CLCD_voidGoToXY(Local_u8ID_POSI_Counter, 0);
    27cc:	fe 01       	movw	r30, r28
    27ce:	e0 5a       	subi	r30, 0xA0	; 160
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
					/* save the digit which taking from KPD */
					Local_u32ID_Digits = Local_u32ID_Digits * 10 + Local_u8PressedKey;
    27da:	fe 01       	movw	r30, r28
    27dc:	ef 59       	subi	r30, 0x9F	; 159
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	a2 81       	ldd	r26, Z+2	; 0x02
    27e6:	b3 81       	ldd	r27, Z+3	; 0x03
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    27f8:	9b 01       	movw	r18, r22
    27fa:	ac 01       	movw	r20, r24
    27fc:	fe 01       	movw	r30, r28
    27fe:	eb 59       	subi	r30, 0x9B	; 155
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	88 2f       	mov	r24, r24
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	fe 01       	movw	r30, r28
    280e:	ef 59       	subi	r30, 0x9F	; 159
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	a4 1f       	adc	r26, r20
    2818:	b5 1f       	adc	r27, r21
    281a:	80 83       	st	Z, r24
    281c:	91 83       	std	Z+1, r25	; 0x01
    281e:	a2 83       	std	Z+2, r26	; 0x02
    2820:	b3 83       	std	Z+3, r27	; 0x03
					/* Display the digit which taking from KPD on CLCD */
					CLCD_voidSendNumber(Local_u8PressedKey);
    2822:	fe 01       	movw	r30, r28
    2824:	eb 59       	subi	r30, 0x9B	; 155
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	88 2f       	mov	r24, r24
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	a0 e0       	ldi	r26, 0x00	; 0
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
					/* increment Local_u8FourDigitID by 1 */
					Local_u8FourDigitID++;
    283a:	de 01       	movw	r26, r28
    283c:	a1 5a       	subi	r26, 0xA1	; 161
    283e:	bf 4f       	sbci	r27, 0xFF	; 255
    2840:	fe 01       	movw	r30, r28
    2842:	e1 5a       	subi	r30, 0xA1	; 161
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	8c 93       	st	X, r24
					/* increment Local_u8ID_POSI_Counter by 1 */
					Local_u8ID_POSI_Counter++;
    284c:	de 01       	movw	r26, r28
    284e:	a0 5a       	subi	r26, 0xA0	; 160
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e0 5a       	subi	r30, 0xA0	; 160
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	8c 93       	st	X, r24
				}
				/* take the next digit */
				Local_u8PressedKey = KPD_u8GetPressedKey();
    285e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <KPD_u8GetPressedKey>
    2862:	fe 01       	movw	r30, r28
    2864:	eb 59       	subi	r30, 0x9B	; 155
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 83       	st	Z, r24

		if(Local_u8PressedKey != 0xff)
		{

			/* this loop to check on Local_u8FourDigitID */
			while( Local_u8FourDigitID < 4)
    286a:	fe 01       	movw	r30, r28
    286c:	e1 5a       	subi	r30, 0xA1	; 161
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	80 81       	ld	r24, Z
    2872:	84 30       	cpi	r24, 0x04	; 4
    2874:	08 f4       	brcc	.+2      	; 0x2878 <main+0x188>
    2876:	a3 cf       	rjmp	.-186    	; 0x27be <main+0xce>
    2878:	fe 01       	movw	r30, r28
    287a:	ef 5a       	subi	r30, 0xAF	; 175
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a8 ec       	ldi	r26, 0xC8	; 200
    2884:	b2 e4       	ldi	r27, 0x42	; 66
    2886:	80 83       	st	Z, r24
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	a2 83       	std	Z+2, r26	; 0x02
    288c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	8e 01       	movw	r16, r28
    2890:	03 5b       	subi	r16, 0xB3	; 179
    2892:	1f 4f       	sbci	r17, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	ef 5a       	subi	r30, 0xAF	; 175
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a ef       	ldi	r20, 0xFA	; 250
    28a8:	54 e4       	ldi	r21, 0x44	; 68
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	f8 01       	movw	r30, r16
    28b4:	80 83       	st	Z, r24
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	a2 83       	std	Z+2, r26	; 0x02
    28ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28bc:	fe 01       	movw	r30, r28
    28be:	e3 5b       	subi	r30, 0xB3	; 179
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e8       	ldi	r20, 0x80	; 128
    28d0:	5f e3       	ldi	r21, 0x3F	; 63
    28d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	44 f4       	brge	.+16     	; 0x28ea <main+0x1fa>
		__ticks = 1;
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 5b       	subi	r30, 0xB5	; 181
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	64 c0       	rjmp	.+200    	; 0x29b2 <main+0x2c2>
	else if (__tmp > 65535)
    28ea:	fe 01       	movw	r30, r28
    28ec:	e3 5b       	subi	r30, 0xB3	; 179
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	0c f0       	brlt	.+2      	; 0x290a <main+0x21a>
    2908:	43 c0       	rjmp	.+134    	; 0x2990 <main+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290a:	fe 01       	movw	r30, r28
    290c:	ef 5a       	subi	r30, 0xAF	; 175
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	60 81       	ld	r22, Z
    2912:	71 81       	ldd	r23, Z+1	; 0x01
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8e 01       	movw	r16, r28
    292a:	05 5b       	subi	r16, 0xB5	; 181
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	f8 01       	movw	r30, r16
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	1f c0       	rjmp	.+62     	; 0x2980 <main+0x290>
    2942:	fe 01       	movw	r30, r28
    2944:	e7 5b       	subi	r30, 0xB7	; 183
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	fe 01       	movw	r30, r28
    2952:	e7 5b       	subi	r30, 0xB7	; 183
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <main+0x26a>
    295e:	fe 01       	movw	r30, r28
    2960:	e7 5b       	subi	r30, 0xB7	; 183
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	de 01       	movw	r26, r28
    296a:	a5 5b       	subi	r26, 0xB5	; 181
    296c:	bf 4f       	sbci	r27, 0xFF	; 255
    296e:	fe 01       	movw	r30, r28
    2970:	e5 5b       	subi	r30, 0xB5	; 181
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	91 81       	ldd	r25, Z+1	; 0x01
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	11 96       	adiw	r26, 0x01	; 1
    297c:	9c 93       	st	X, r25
    297e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	fe 01       	movw	r30, r28
    2982:	e5 5b       	subi	r30, 0xB5	; 181
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	d1 f6       	brne	.-76     	; 0x2942 <main+0x252>
    298e:	27 c0       	rjmp	.+78     	; 0x29de <main+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	8e 01       	movw	r16, r28
    2992:	05 5b       	subi	r16, 0xB5	; 181
    2994:	1f 4f       	sbci	r17, 0xFF	; 255
    2996:	fe 01       	movw	r30, r28
    2998:	e3 5b       	subi	r30, 0xB3	; 179
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	de 01       	movw	r26, r28
    29b4:	a9 5b       	subi	r26, 0xB9	; 185
    29b6:	bf 4f       	sbci	r27, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	e5 5b       	subi	r30, 0xB5	; 181
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	8d 93       	st	X+, r24
    29c4:	9c 93       	st	X, r25
    29c6:	fe 01       	movw	r30, r28
    29c8:	e9 5b       	subi	r30, 0xB9	; 185
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	f1 f7       	brne	.-4      	; 0x29d0 <main+0x2e0>
    29d4:	fe 01       	movw	r30, r28
    29d6:	e9 5b       	subi	r30, 0xB9	; 185
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
			}
			_delay_ms(100);
			/*after this loop we have the ID */

			/* check if the ID valid or not */
			switch(Local_u32ID_Digits)
    29de:	fe 01       	movw	r30, r28
    29e0:	ef 59       	subi	r30, 0x9F	; 159
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	80 81       	ld	r24, Z
    29e6:	91 81       	ldd	r25, Z+1	; 0x01
    29e8:	a2 81       	ldd	r26, Z+2	; 0x02
    29ea:	b3 81       	ldd	r27, Z+3	; 0x03
    29ec:	aa 96       	adiw	r28, 0x2a	; 42
    29ee:	8c af       	std	Y+60, r24	; 0x3c
    29f0:	9d af       	std	Y+61, r25	; 0x3d
    29f2:	ae af       	std	Y+62, r26	; 0x3e
    29f4:	bf af       	std	Y+63, r27	; 0x3f
    29f6:	aa 97       	sbiw	r28, 0x2a	; 42
    29f8:	aa 96       	adiw	r28, 0x2a	; 42
    29fa:	8c ad       	ldd	r24, Y+60	; 0x3c
    29fc:	9d ad       	ldd	r25, Y+61	; 0x3d
    29fe:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a00:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a02:	aa 97       	sbiw	r28, 0x2a	; 42
    2a04:	82 3d       	cpi	r24, 0xD2	; 210
    2a06:	e4 e0       	ldi	r30, 0x04	; 4
    2a08:	9e 07       	cpc	r25, r30
    2a0a:	e0 e0       	ldi	r30, 0x00	; 0
    2a0c:	ae 07       	cpc	r26, r30
    2a0e:	e0 e0       	ldi	r30, 0x00	; 0
    2a10:	be 07       	cpc	r27, r30
    2a12:	81 f0       	breq	.+32     	; 0x2a34 <main+0x344>
    2a14:	aa 96       	adiw	r28, 0x2a	; 42
    2a16:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a18:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a1a:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a1c:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a1e:	aa 97       	sbiw	r28, 0x2a	; 42
    2a20:	8e 32       	cpi	r24, 0x2E	; 46
    2a22:	e6 e1       	ldi	r30, 0x16	; 22
    2a24:	9e 07       	cpc	r25, r30
    2a26:	e0 e0       	ldi	r30, 0x00	; 0
    2a28:	ae 07       	cpc	r26, r30
    2a2a:	e0 e0       	ldi	r30, 0x00	; 0
    2a2c:	be 07       	cpc	r27, r30
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <main+0x342>
    2a30:	fc c0       	rjmp	.+504    	; 0x2c2a <main+0x53a>
    2a32:	e3 c1       	rjmp	.+966    	; 0x2dfa <main+0x70a>
			{

			/* if the id is equal 1234 */
			case 1234 :

				SSD_u8SetNumber(&SSD_t,4);
    2a34:	8f ee       	ldi	r24, 0xEF	; 239
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	64 e0       	ldi	r22, 0x04	; 4
    2a3a:	0e 94 09 13 	call	0x2612	; 0x2612 <SSD_u8SetNumber>
				CLCD_voidGoToXY(0,1);
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
				CLCD_u8SendString("password:");
    2a46:	89 e6       	ldi	r24, 0x69	; 105
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    2a4e:	e5 c0       	rjmp	.+458    	; 0x2c1a <main+0x52a>
				/* this loop to check on Local_u8FourDigitPassword */
				while( Local_u8FourDigitPassword < 4)
				{

					/* take digits of password */
					Local_u8PressedKey = KPD_u8GetPressedKey();
    2a50:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <KPD_u8GetPressedKey>
    2a54:	fe 01       	movw	r30, r28
    2a56:	eb 59       	subi	r30, 0x9B	; 155
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 83       	st	Z, r24
					/* Check if the pressed key is a digit (0 to 9) */
					if (Local_u8PressedKey <= 9)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	eb 59       	subi	r30, 0x9B	; 155
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	8a 30       	cpi	r24, 0x0A	; 10
    2a66:	08 f0       	brcs	.+2      	; 0x2a6a <main+0x37a>
    2a68:	d8 c0       	rjmp	.+432    	; 0x2c1a <main+0x52a>
					{
						/* go to the position after the keyword  password: */
						CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5a       	subi	r30, 0xA7	; 167
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	61 e0       	ldi	r22, 0x01	; 1
    2a74:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						/* save the digit which taking from KPD */
						Local_u32PasswordDigits = Local_u32PasswordDigits * 10 + Local_u8PressedKey;
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e5 5a       	subi	r30, 0xA5	; 165
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	a2 81       	ldd	r26, Z+2	; 0x02
    2a84:	b3 81       	ldd	r27, Z+3	; 0x03
    2a86:	2a e0       	ldi	r18, 0x0A	; 10
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	50 e0       	ldi	r21, 0x00	; 0
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	eb 59       	subi	r30, 0x9B	; 155
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	80 81       	ld	r24, Z
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e0       	ldi	r26, 0x00	; 0
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e5 5a       	subi	r30, 0xA5	; 165
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	a4 1f       	adc	r26, r20
    2ab6:	b5 1f       	adc	r27, r21
    2ab8:	80 83       	st	Z, r24
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	a2 83       	std	Z+2, r26	; 0x02
    2abe:	b3 83       	std	Z+3, r27	; 0x03
						/* Display the digit which taking from KPD on CLCD */
						CLCD_voidSendNumber(Local_u8PressedKey);
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	eb 59       	subi	r30, 0x9B	; 155
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	88 2f       	mov	r24, r24
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ed 5b       	subi	r30, 0xBD	; 189
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	aa e7       	ldi	r26, 0x7A	; 122
    2ae4:	b3 e4       	ldi	r27, 0x43	; 67
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	8e 01       	movw	r16, r28
    2af0:	01 5c       	subi	r16, 0xC1	; 193
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	ed 5b       	subi	r30, 0xBD	; 189
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a ef       	ldi	r20, 0xFA	; 250
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	f8 01       	movw	r30, r16
    2b14:	80 83       	st	Z, r24
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	a2 83       	std	Z+2, r26	; 0x02
    2b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	ff 96       	adiw	r30, 0x3f	; 63
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <main+0x452>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9e af       	std	Y+62, r25	; 0x3e
    2b3e:	8d af       	std	Y+61, r24	; 0x3d
    2b40:	46 c0       	rjmp	.+140    	; 0x2bce <main+0x4de>
	else if (__tmp > 65535)
    2b42:	fe 01       	movw	r30, r28
    2b44:	ff 96       	adiw	r30, 0x3f	; 63
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	3f ef       	ldi	r19, 0xFF	; 255
    2b52:	4f e7       	ldi	r20, 0x7F	; 127
    2b54:	57 e4       	ldi	r21, 0x47	; 71
    2b56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b5a:	18 16       	cp	r1, r24
    2b5c:	64 f5       	brge	.+88     	; 0x2bb6 <main+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ed 5b       	subi	r30, 0xBD	; 189
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9e af       	std	Y+62, r25	; 0x3e
    2b8a:	8d af       	std	Y+61, r24	; 0x3d
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <main+0x4bc>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c af       	std	Y+60, r25	; 0x3c
    2b94:	8b af       	std	Y+59, r24	; 0x3b
    2b96:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b98:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <main+0x4aa>
    2b9e:	9c af       	std	Y+60, r25	; 0x3c
    2ba0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ba4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	9e af       	std	Y+62, r25	; 0x3e
    2baa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <main+0x49e>
    2bb4:	16 c0       	rjmp	.+44     	; 0x2be2 <main+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ff 96       	adiw	r30, 0x3f	; 63
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9e af       	std	Y+62, r25	; 0x3e
    2bcc:	8d af       	std	Y+61, r24	; 0x3d
    2bce:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd2:	9a af       	std	Y+58, r25	; 0x3a
    2bd4:	89 af       	std	Y+57, r24	; 0x39
    2bd6:	89 ad       	ldd	r24, Y+57	; 0x39
    2bd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <main+0x4ea>
    2bde:	9a af       	std	Y+58, r25	; 0x3a
    2be0:	89 af       	std	Y+57, r24	; 0x39
						/* this delay before number convert to star (*)  */
						_delay_ms(250);
						/* go to the location of the number which convert to star (*) */
						CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    2be2:	fe 01       	movw	r30, r28
    2be4:	e7 5a       	subi	r30, 0xA7	; 167
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_voidSendData('*');
    2bf0:	8a e2       	ldi	r24, 0x2A	; 42
    2bf2:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
						/* increment Local_u8FourDigitPassword by 1 */
						Local_u8FourDigitPassword++;
    2bf6:	de 01       	movw	r26, r28
    2bf8:	a6 5a       	subi	r26, 0xA6	; 166
    2bfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e6 5a       	subi	r30, 0xA6	; 166
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	8c 93       	st	X, r24
						/* increment Local_u8Password_POSI_Counter by 1 */
						Local_u8Password_POSI_Counter++;
    2c08:	de 01       	movw	r26, r28
    2c0a:	a7 5a       	subi	r26, 0xA7	; 167
    2c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e7 5a       	subi	r30, 0xA7	; 167
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	8c 93       	st	X, r24

				SSD_u8SetNumber(&SSD_t,4);
				CLCD_voidGoToXY(0,1);
				CLCD_u8SendString("password:");
				/* this loop to check on Local_u8FourDigitPassword */
				while( Local_u8FourDigitPassword < 4)
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e6 5a       	subi	r30, 0xA6	; 166
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	84 30       	cpi	r24, 0x04	; 4
    2c24:	08 f4       	brcc	.+2      	; 0x2c28 <main+0x538>
    2c26:	14 cf       	rjmp	.-472    	; 0x2a50 <main+0x360>
    2c28:	63 c1       	rjmp	.+710    	; 0x2ef0 <main+0x800>

				}
				break;

			case 5678 :
				SSD_u8SetNumber(&SSD_t,4);
    2c2a:	8f ee       	ldi	r24, 0xEF	; 239
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	64 e0       	ldi	r22, 0x04	; 4
    2c30:	0e 94 09 13 	call	0x2612	; 0x2612 <SSD_u8SetNumber>
				CLCD_voidGoToXY(0,1);
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	61 e0       	ldi	r22, 0x01	; 1
    2c38:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
				CLCD_u8SendString("password:");
    2c3c:	89 e6       	ldi	r24, 0x69	; 105
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    2c44:	d2 c0       	rjmp	.+420    	; 0x2dea <main+0x6fa>
				/* this loop to check on Local_u8FourDigitPassword */
				while( Local_u8FourDigitPassword < 4)
				{

					/* take digits of password */
					Local_u8PressedKey = KPD_u8GetPressedKey();
    2c46:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <KPD_u8GetPressedKey>
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	eb 59       	subi	r30, 0x9B	; 155
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 83       	st	Z, r24
					/* Check if the pressed key is a digit (0 to 9) */
					if (Local_u8PressedKey <= 9)
    2c52:	fe 01       	movw	r30, r28
    2c54:	eb 59       	subi	r30, 0x9B	; 155
    2c56:	ff 4f       	sbci	r31, 0xFF	; 255
    2c58:	80 81       	ld	r24, Z
    2c5a:	8a 30       	cpi	r24, 0x0A	; 10
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <main+0x570>
    2c5e:	c5 c0       	rjmp	.+394    	; 0x2dea <main+0x6fa>
					{
						/* go to the position after the keyword  password: */
						CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    2c60:	fe 01       	movw	r30, r28
    2c62:	e7 5a       	subi	r30, 0xA7	; 167
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	61 e0       	ldi	r22, 0x01	; 1
    2c6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						/* save the digit which taking from KPD */
						Local_u32PasswordDigits = Local_u32PasswordDigits * 10 + Local_u8PressedKey;
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e5 5a       	subi	r30, 0xA5	; 165
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	a2 81       	ldd	r26, Z+2	; 0x02
    2c7a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c7c:	2a e0       	ldi	r18, 0x0A	; 10
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	ac 01       	movw	r20, r24
    2c90:	fe 01       	movw	r30, r28
    2c92:	eb 59       	subi	r30, 0x9B	; 155
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	88 2f       	mov	r24, r24
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	a0 e0       	ldi	r26, 0x00	; 0
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e5 5a       	subi	r30, 0xA5	; 165
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	82 0f       	add	r24, r18
    2ca8:	93 1f       	adc	r25, r19
    2caa:	a4 1f       	adc	r26, r20
    2cac:	b5 1f       	adc	r27, r21
    2cae:	80 83       	st	Z, r24
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	a2 83       	std	Z+2, r26	; 0x02
    2cb4:	b3 83       	std	Z+3, r27	; 0x03
						/* Display the digit which taking from KPD on CLCD */
						CLCD_voidSendNumber(Local_u8PressedKey);
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	eb 59       	subi	r30, 0x9B	; 155
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 81       	ld	r24, Z
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a0 e0       	ldi	r26, 0x00	; 0
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	aa e7       	ldi	r26, 0x7A	; 122
    2cd4:	b3 e4       	ldi	r27, 0x43	; 67
    2cd6:	8d ab       	std	Y+53, r24	; 0x35
    2cd8:	9e ab       	std	Y+54, r25	; 0x36
    2cda:	af ab       	std	Y+55, r26	; 0x37
    2cdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a ef       	ldi	r20, 0xFA	; 250
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	89 ab       	std	Y+49, r24	; 0x31
    2cf8:	9a ab       	std	Y+50, r25	; 0x32
    2cfa:	ab ab       	std	Y+51, r26	; 0x33
    2cfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cfe:	69 a9       	ldd	r22, Y+49	; 0x31
    2d00:	7a a9       	ldd	r23, Y+50	; 0x32
    2d02:	8b a9       	ldd	r24, Y+51	; 0x33
    2d04:	9c a9       	ldd	r25, Y+52	; 0x34
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <main+0x630>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	98 ab       	std	Y+48, r25	; 0x30
    2d1c:	8f a7       	std	Y+47, r24	; 0x2f
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <main+0x6ae>
	else if (__tmp > 65535)
    2d20:	69 a9       	ldd	r22, Y+49	; 0x31
    2d22:	7a a9       	ldd	r23, Y+50	; 0x32
    2d24:	8b a9       	ldd	r24, Y+51	; 0x33
    2d26:	9c a9       	ldd	r25, Y+52	; 0x34
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <main+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	6d a9       	ldd	r22, Y+53	; 0x35
    2d3a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d3c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d3e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	98 ab       	std	Y+48, r25	; 0x30
    2d5e:	8f a7       	std	Y+47, r24	; 0x2f
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <main+0x690>
    2d62:	88 ec       	ldi	r24, 0xC8	; 200
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9e a7       	std	Y+46, r25	; 0x2e
    2d68:	8d a7       	std	Y+45, r24	; 0x2d
    2d6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <main+0x67e>
    2d72:	9e a7       	std	Y+46, r25	; 0x2e
    2d74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d78:	98 a9       	ldd	r25, Y+48	; 0x30
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	98 ab       	std	Y+48, r25	; 0x30
    2d7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d82:	98 a9       	ldd	r25, Y+48	; 0x30
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <main+0x672>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <main+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d90:	9c a9       	ldd	r25, Y+52	; 0x34
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	98 ab       	std	Y+48, r25	; 0x30
    2d9c:	8f a7       	std	Y+47, r24	; 0x2f
    2d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da0:	98 a9       	ldd	r25, Y+48	; 0x30
    2da2:	9c a7       	std	Y+44, r25	; 0x2c
    2da4:	8b a7       	std	Y+43, r24	; 0x2b
    2da6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2da8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <main+0x6ba>
    2dae:	9c a7       	std	Y+44, r25	; 0x2c
    2db0:	8b a7       	std	Y+43, r24	; 0x2b
						/* this delay before number convert to star (*)  */
						_delay_ms(250);
						/* go to the location of the number which convert to star (*) */
						CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 5a       	subi	r30, 0xA7	; 167
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	61 e0       	ldi	r22, 0x01	; 1
    2dbc:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_voidSendData('*');
    2dc0:	8a e2       	ldi	r24, 0x2A	; 42
    2dc2:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
						/* increment Local_u8FourDigitPassword by 1 */
						Local_u8FourDigitPassword++;
    2dc6:	de 01       	movw	r26, r28
    2dc8:	a6 5a       	subi	r26, 0xA6	; 166
    2dca:	bf 4f       	sbci	r27, 0xFF	; 255
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e6 5a       	subi	r30, 0xA6	; 166
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	8f 5f       	subi	r24, 0xFF	; 255
    2dd6:	8c 93       	st	X, r24
						/* increment Local_u8Password_POSI_Counter by 1 */
						Local_u8Password_POSI_Counter++;
    2dd8:	de 01       	movw	r26, r28
    2dda:	a7 5a       	subi	r26, 0xA7	; 167
    2ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dde:	fe 01       	movw	r30, r28
    2de0:	e7 5a       	subi	r30, 0xA7	; 167
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 5f       	subi	r24, 0xFF	; 255
    2de8:	8c 93       	st	X, r24
			case 5678 :
				SSD_u8SetNumber(&SSD_t,4);
				CLCD_voidGoToXY(0,1);
				CLCD_u8SendString("password:");
				/* this loop to check on Local_u8FourDigitPassword */
				while( Local_u8FourDigitPassword < 4)
    2dea:	fe 01       	movw	r30, r28
    2dec:	e6 5a       	subi	r30, 0xA6	; 166
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 81       	ld	r24, Z
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <main+0x708>
    2df6:	27 cf       	rjmp	.-434    	; 0x2c46 <main+0x556>
    2df8:	7b c0       	rjmp	.+246    	; 0x2ef0 <main+0x800>

				}
				break;
			default :

				CLCD_voidSendCmd(1);
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
				CLCD_u8SendString("Wrong ID");
    2e00:	83 e7       	ldi	r24, 0x73	; 115
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	aa e7       	ldi	r26, 0x7A	; 122
    2e0e:	b4 e4       	ldi	r27, 0x44	; 68
    2e10:	8f a3       	std	Y+39, r24	; 0x27
    2e12:	98 a7       	std	Y+40, r25	; 0x28
    2e14:	a9 a7       	std	Y+41, r26	; 0x29
    2e16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e18:	6f a1       	ldd	r22, Y+39	; 0x27
    2e1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a ef       	ldi	r20, 0xFA	; 250
    2e26:	54 e4       	ldi	r21, 0x44	; 68
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	8b a3       	std	Y+35, r24	; 0x23
    2e32:	9c a3       	std	Y+36, r25	; 0x24
    2e34:	ad a3       	std	Y+37, r26	; 0x25
    2e36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e38:	6b a1       	ldd	r22, Y+35	; 0x23
    2e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e8       	ldi	r20, 0x80	; 128
    2e46:	5f e3       	ldi	r21, 0x3F	; 63
    2e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4c:	88 23       	and	r24, r24
    2e4e:	2c f4       	brge	.+10     	; 0x2e5a <main+0x76a>
		__ticks = 1;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	9a a3       	std	Y+34, r25	; 0x22
    2e56:	89 a3       	std	Y+33, r24	; 0x21
    2e58:	3f c0       	rjmp	.+126    	; 0x2ed8 <main+0x7e8>
	else if (__tmp > 65535)
    2e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e60:	9e a1       	ldd	r25, Y+38	; 0x26
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	3f ef       	ldi	r19, 0xFF	; 255
    2e66:	4f e7       	ldi	r20, 0x7F	; 127
    2e68:	57 e4       	ldi	r21, 0x47	; 71
    2e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e6e:	18 16       	cp	r1, r24
    2e70:	4c f5       	brge	.+82     	; 0x2ec4 <main+0x7d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e72:	6f a1       	ldd	r22, Y+39	; 0x27
    2e74:	78 a5       	ldd	r23, Y+40	; 0x28
    2e76:	89 a5       	ldd	r24, Y+41	; 0x29
    2e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9a a3       	std	Y+34, r25	; 0x22
    2e98:	89 a3       	std	Y+33, r24	; 0x21
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <main+0x7ca>
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	98 a3       	std	Y+32, r25	; 0x20
    2ea2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ea4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ea6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <main+0x7b8>
    2eac:	98 a3       	std	Y+32, r25	; 0x20
    2eae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9a a3       	std	Y+34, r25	; 0x22
    2eb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	89 a1       	ldd	r24, Y+33	; 0x21
    2ebc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <main+0x7ac>
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <main+0x7fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eca:	9e a1       	ldd	r25, Y+38	; 0x26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9a a3       	std	Y+34, r25	; 0x22
    2ed6:	89 a3       	std	Y+33, r24	; 0x21
    2ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eda:	9a a1       	ldd	r25, Y+34	; 0x22
    2edc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ede:	8d 8f       	std	Y+29, r24	; 0x1d
    2ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <main+0x7f4>
    2ee8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eea:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				F_voidSytemSTOP();
    2eec:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <F_voidSytemSTOP>
				break;
			}

			/*********************************/

			switch(Local_u32PasswordDigits)
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	e5 5a       	subi	r30, 0xA5	; 165
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	80 81       	ld	r24, Z
    2ef8:	91 81       	ldd	r25, Z+1	; 0x01
    2efa:	a2 81       	ldd	r26, Z+2	; 0x02
    2efc:	b3 81       	ldd	r27, Z+3	; 0x03
    2efe:	ae 96       	adiw	r28, 0x2e	; 46
    2f00:	8c af       	std	Y+60, r24	; 0x3c
    2f02:	9d af       	std	Y+61, r25	; 0x3d
    2f04:	ae af       	std	Y+62, r26	; 0x3e
    2f06:	bf af       	std	Y+63, r27	; 0x3f
    2f08:	ae 97       	sbiw	r28, 0x2e	; 46
    2f0a:	ae 96       	adiw	r28, 0x2e	; 46
    2f0c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f0e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f10:	ae ad       	ldd	r26, Y+62	; 0x3e
    2f12:	bf ad       	ldd	r27, Y+63	; 0x3f
    2f14:	ae 97       	sbiw	r28, 0x2e	; 46
    2f16:	81 3e       	cpi	r24, 0xE1	; 225
    2f18:	e0 e1       	ldi	r30, 0x10	; 16
    2f1a:	9e 07       	cpc	r25, r30
    2f1c:	e0 e0       	ldi	r30, 0x00	; 0
    2f1e:	ae 07       	cpc	r26, r30
    2f20:	e0 e0       	ldi	r30, 0x00	; 0
    2f22:	be 07       	cpc	r27, r30
    2f24:	79 f0       	breq	.+30     	; 0x2f44 <main+0x854>
    2f26:	ae 96       	adiw	r28, 0x2e	; 46
    2f28:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2f2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2f30:	ae 97       	sbiw	r28, 0x2e	; 46
    2f32:	8d 33       	cpi	r24, 0x3D	; 61
    2f34:	e2 e2       	ldi	r30, 0x22	; 34
    2f36:	9e 07       	cpc	r25, r30
    2f38:	e0 e0       	ldi	r30, 0x00	; 0
    2f3a:	ae 07       	cpc	r26, r30
    2f3c:	e0 e0       	ldi	r30, 0x00	; 0
    2f3e:	be 07       	cpc	r27, r30
    2f40:	21 f0       	breq	.+8      	; 0x2f4a <main+0x85a>
    2f42:	16 c2       	rjmp	.+1068   	; 0x3370 <main+0xc80>
			{
			case 4321 :

				F_voidSytemON();
    2f44:	0e 94 0d 1c 	call	0x381a	; 0x381a <F_voidSytemON>
    2f48:	2d cc       	rjmp	.-1958   	; 0x27a4 <main+0xb4>
				break;

			case 8765 :
				F_voidSytemON();
    2f4a:	0e 94 0d 1c 	call	0x381a	; 0x381a <F_voidSytemON>
    2f4e:	2a cc       	rjmp	.-1964   	; 0x27a4 <main+0xb4>
			default:
				//Local_u8SSD_Counter=4;
				while(Local_u8Flag_OP_Done == 0 && Local_u8TryCount < 3 )
				{

					Local_u8PressedKey = 0xff;
    2f50:	fe 01       	movw	r30, r28
    2f52:	eb 59       	subi	r30, 0x9B	; 155
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	8f ef       	ldi	r24, 0xFF	; 255
    2f58:	80 83       	st	Z, r24
					Local_u32PasswordDigits=0;
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e5 5a       	subi	r30, 0xA5	; 165
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	10 82       	st	Z, r1
    2f62:	11 82       	std	Z+1, r1	; 0x01
    2f64:	12 82       	std	Z+2, r1	; 0x02
    2f66:	13 82       	std	Z+3, r1	; 0x03

					Local_u8SSD_Counter--;
    2f68:	de 01       	movw	r26, r28
    2f6a:	aa 5a       	subi	r26, 0xAA	; 170
    2f6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ea 5a       	subi	r30, 0xAA	; 170
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	80 81       	ld	r24, Z
    2f76:	81 50       	subi	r24, 0x01	; 1
    2f78:	8c 93       	st	X, r24
					/* Display on SSD 3 Number of tring */
					SSD_u8SetNumber(&SSD_t,Local_u8SSD_Counter);
    2f7a:	8f ee       	ldi	r24, 0xEF	; 239
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ea 5a       	subi	r30, 0xAA	; 170
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	60 81       	ld	r22, Z
    2f86:	0e 94 09 13 	call	0x2612	; 0x2612 <SSD_u8SetNumber>

					CLCD_voidSendCmd(1);
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
					CLCD_voidGoToXY(0,0);
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
					CLCD_u8SendString("Wrong Password");
    2f98:	8c e7       	ldi	r24, 0x7C	; 124
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
					CLCD_voidGoToXY(0,1);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
					CLCD_u8SendString("Try again");
    2fa8:	8b e8       	ldi	r24, 0x8B	; 139
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	aa e7       	ldi	r26, 0x7A	; 122
    2fb6:	b4 e4       	ldi	r27, 0x44	; 68
    2fb8:	89 8f       	std	Y+25, r24	; 0x19
    2fba:	9a 8f       	std	Y+26, r25	; 0x1a
    2fbc:	ab 8f       	std	Y+27, r26	; 0x1b
    2fbe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a ef       	ldi	r20, 0xFA	; 250
    2fce:	54 e4       	ldi	r21, 0x44	; 68
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8d 8b       	std	Y+21, r24	; 0x15
    2fda:	9e 8b       	std	Y+22, r25	; 0x16
    2fdc:	af 8b       	std	Y+23, r26	; 0x17
    2fde:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fe2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <main+0x912>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <main+0x990>
	else if (__tmp > 65535)
    3002:	6d 89       	ldd	r22, Y+21	; 0x15
    3004:	7e 89       	ldd	r23, Y+22	; 0x16
    3006:	8f 89       	ldd	r24, Y+23	; 0x17
    3008:	98 8d       	ldd	r25, Y+24	; 0x18
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <main+0x97c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	69 8d       	ldd	r22, Y+25	; 0x19
    301c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	9c 8b       	std	Y+20, r25	; 0x14
    3040:	8b 8b       	std	Y+19, r24	; 0x13
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <main+0x972>
    3044:	88 ec       	ldi	r24, 0xC8	; 200
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9a 8b       	std	Y+18, r25	; 0x12
    304a:	89 8b       	std	Y+17, r24	; 0x11
    304c:	89 89       	ldd	r24, Y+17	; 0x11
    304e:	9a 89       	ldd	r25, Y+18	; 0x12
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <main+0x960>
    3054:	9a 8b       	std	Y+18, r25	; 0x12
    3056:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8b 89       	ldd	r24, Y+19	; 0x13
    305a:	9c 89       	ldd	r25, Y+20	; 0x14
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	9c 8b       	std	Y+20, r25	; 0x14
    3060:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8b 89       	ldd	r24, Y+19	; 0x13
    3064:	9c 89       	ldd	r25, Y+20	; 0x14
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <main+0x954>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <main+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	6d 89       	ldd	r22, Y+21	; 0x15
    306e:	7e 89       	ldd	r23, Y+22	; 0x16
    3070:	8f 89       	ldd	r24, Y+23	; 0x17
    3072:	98 8d       	ldd	r25, Y+24	; 0x18
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9c 8b       	std	Y+20, r25	; 0x14
    307e:	8b 8b       	std	Y+19, r24	; 0x13
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	98 8b       	std	Y+16, r25	; 0x10
    3086:	8f 87       	std	Y+15, r24	; 0x0f
    3088:	8f 85       	ldd	r24, Y+15	; 0x0f
    308a:	98 89       	ldd	r25, Y+16	; 0x10
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0x99c>
    3090:	98 8b       	std	Y+16, r25	; 0x10
    3092:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					CLCD_voidSendCmd(1);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
					if(Local_u32ID_Digits == 1234)
    309a:	fe 01       	movw	r30, r28
    309c:	ef 59       	subi	r30, 0x9F	; 159
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	a2 81       	ldd	r26, Z+2	; 0x02
    30a6:	b3 81       	ldd	r27, Z+3	; 0x03
    30a8:	82 3d       	cpi	r24, 0xD2	; 210
    30aa:	f4 e0       	ldi	r31, 0x04	; 4
    30ac:	9f 07       	cpc	r25, r31
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	af 07       	cpc	r26, r31
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	bf 07       	cpc	r27, r31
    30b6:	99 f4       	brne	.+38     	; 0x30de <main+0x9ee>
					{
						CLCD_voidGoToXY(0,0);
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	60 e0       	ldi	r22, 0x00	; 0
    30bc:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_u8SendString("EnterID:");
    30c0:	80 e6       	ldi	r24, 0x60	; 96
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
						CLCD_voidGoToXY(8,0);
    30c8:	88 e0       	ldi	r24, 0x08	; 8
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_voidSendNumber(1234);
    30d0:	62 ed       	ldi	r22, 0xD2	; 210
    30d2:	74 e0       	ldi	r23, 0x04	; 4
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
    30dc:	21 c0       	rjmp	.+66     	; 0x3120 <main+0xa30>
					}else if(Local_u32ID_Digits == 5678)
    30de:	fe 01       	movw	r30, r28
    30e0:	ef 59       	subi	r30, 0x9F	; 159
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	91 81       	ldd	r25, Z+1	; 0x01
    30e8:	a2 81       	ldd	r26, Z+2	; 0x02
    30ea:	b3 81       	ldd	r27, Z+3	; 0x03
    30ec:	8e 32       	cpi	r24, 0x2E	; 46
    30ee:	26 e1       	ldi	r18, 0x16	; 22
    30f0:	92 07       	cpc	r25, r18
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	a2 07       	cpc	r26, r18
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	b2 07       	cpc	r27, r18
    30fa:	91 f4       	brne	.+36     	; 0x3120 <main+0xa30>
					{
						CLCD_voidGoToXY(0,0);
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_u8SendString("EnterID:");
    3104:	80 e6       	ldi	r24, 0x60	; 96
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
						CLCD_voidGoToXY(8,0);
    310c:	88 e0       	ldi	r24, 0x08	; 8
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
						CLCD_voidSendNumber(5678);
    3114:	6e e2       	ldi	r22, 0x2E	; 46
    3116:	76 e1       	ldi	r23, 0x16	; 22
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
					}
					/* retake the password */
					CLCD_voidGoToXY(0,1);
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
					CLCD_u8SendString("password:");
    3128:	89 e6       	ldi	r24, 0x69	; 105
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
					/* this loop to check on Local_u8FourDigitPassword */
					Local_u8FourDigitPassword=0;
    3130:	fe 01       	movw	r30, r28
    3132:	e6 5a       	subi	r30, 0xA6	; 166
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	10 82       	st	Z, r1
					Local_u8Password_POSI_Counter=9;
    3138:	fe 01       	movw	r30, r28
    313a:	e7 5a       	subi	r30, 0xA7	; 167
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	89 e0       	ldi	r24, 0x09	; 9
    3140:	80 83       	st	Z, r24
    3142:	d2 c0       	rjmp	.+420    	; 0x32e8 <main+0xbf8>
					while( Local_u8FourDigitPassword < 4)
					{

						/* take digits of password */
						Local_u8PressedKey = KPD_u8GetPressedKey();
    3144:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <KPD_u8GetPressedKey>
    3148:	fe 01       	movw	r30, r28
    314a:	eb 59       	subi	r30, 0x9B	; 155
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 83       	st	Z, r24
						/* Check if the pressed key is a digit (0 to 9) */
						if (Local_u8PressedKey <= 9)
    3150:	fe 01       	movw	r30, r28
    3152:	eb 59       	subi	r30, 0x9B	; 155
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	80 81       	ld	r24, Z
    3158:	8a 30       	cpi	r24, 0x0A	; 10
    315a:	08 f0       	brcs	.+2      	; 0x315e <main+0xa6e>
    315c:	c5 c0       	rjmp	.+394    	; 0x32e8 <main+0xbf8>
						{
							/* go to the position after the keyword  password: */
							CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    315e:	fe 01       	movw	r30, r28
    3160:	e7 5a       	subi	r30, 0xA7	; 167
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	61 e0       	ldi	r22, 0x01	; 1
    3168:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
							/* save the digit which taking from KPD */
							Local_u32PasswordDigits = Local_u32PasswordDigits * 10 + Local_u8PressedKey;
    316c:	fe 01       	movw	r30, r28
    316e:	e5 5a       	subi	r30, 0xA5	; 165
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	a2 81       	ldd	r26, Z+2	; 0x02
    3178:	b3 81       	ldd	r27, Z+3	; 0x03
    317a:	2a e0       	ldi	r18, 0x0A	; 10
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	50 e0       	ldi	r21, 0x00	; 0
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 a5 1c 	call	0x394a	; 0x394a <__mulsi3>
    318a:	9b 01       	movw	r18, r22
    318c:	ac 01       	movw	r20, r24
    318e:	fe 01       	movw	r30, r28
    3190:	eb 59       	subi	r30, 0x9B	; 155
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	88 2f       	mov	r24, r24
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	a0 e0       	ldi	r26, 0x00	; 0
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	fe 01       	movw	r30, r28
    31a0:	e5 5a       	subi	r30, 0xA5	; 165
    31a2:	ff 4f       	sbci	r31, 0xFF	; 255
    31a4:	82 0f       	add	r24, r18
    31a6:	93 1f       	adc	r25, r19
    31a8:	a4 1f       	adc	r26, r20
    31aa:	b5 1f       	adc	r27, r21
    31ac:	80 83       	st	Z, r24
    31ae:	91 83       	std	Z+1, r25	; 0x01
    31b0:	a2 83       	std	Z+2, r26	; 0x02
    31b2:	b3 83       	std	Z+3, r27	; 0x03
							/* Display the digit which taking from KPD on CLCD */
							CLCD_voidSendNumber(Local_u8PressedKey);
    31b4:	fe 01       	movw	r30, r28
    31b6:	eb 59       	subi	r30, 0x9B	; 155
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	aa e7       	ldi	r26, 0x7A	; 122
    31d2:	b3 e4       	ldi	r27, 0x43	; 67
    31d4:	8b 87       	std	Y+11, r24	; 0x0b
    31d6:	9c 87       	std	Y+12, r25	; 0x0c
    31d8:	ad 87       	std	Y+13, r26	; 0x0d
    31da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31de:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a ef       	ldi	r20, 0xFA	; 250
    31ea:	54 e4       	ldi	r21, 0x44	; 68
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8f 83       	std	Y+7, r24	; 0x07
    31f6:	98 87       	std	Y+8, r25	; 0x08
    31f8:	a9 87       	std	Y+9, r26	; 0x09
    31fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fc:	6f 81       	ldd	r22, Y+7	; 0x07
    31fe:	78 85       	ldd	r23, Y+8	; 0x08
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	5f e3       	ldi	r21, 0x3F	; 63
    320c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3210:	88 23       	and	r24, r24
    3212:	2c f4       	brge	.+10     	; 0x321e <main+0xb2e>
		__ticks = 1;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	3f c0       	rjmp	.+126    	; 0x329c <main+0xbac>
	else if (__tmp > 65535)
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	3f ef       	ldi	r19, 0xFF	; 255
    322a:	4f e7       	ldi	r20, 0x7F	; 127
    322c:	57 e4       	ldi	r21, 0x47	; 71
    322e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3232:	18 16       	cp	r1, r24
    3234:	4c f5       	brge	.+82     	; 0x3288 <main+0xb98>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3236:	6b 85       	ldd	r22, Y+11	; 0x0b
    3238:	7c 85       	ldd	r23, Y+12	; 0x0c
    323a:	8d 85       	ldd	r24, Y+13	; 0x0d
    323c:	9e 85       	ldd	r25, Y+14	; 0x0e
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
    325e:	0f c0       	rjmp	.+30     	; 0x327e <main+0xb8e>
    3260:	88 ec       	ldi	r24, 0xC8	; 200
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9c 83       	std	Y+4, r25	; 0x04
    3266:	8b 83       	std	Y+3, r24	; 0x03
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <main+0xb7c>
    3270:	9c 83       	std	Y+4, r25	; 0x04
    3272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327e:	8d 81       	ldd	r24, Y+5	; 0x05
    3280:	9e 81       	ldd	r25, Y+6	; 0x06
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	69 f7       	brne	.-38     	; 0x3260 <main+0xb70>
    3286:	14 c0       	rjmp	.+40     	; 0x32b0 <main+0xbc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3288:	6f 81       	ldd	r22, Y+7	; 0x07
    328a:	78 85       	ldd	r23, Y+8	; 0x08
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <main+0xbb8>
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01
							/* this delay before number convert to star (*)  */
							_delay_ms(250);
							/* go to the location of the number which convert to star (*) */
							CLCD_voidGoToXY(Local_u8Password_POSI_Counter, 1);
    32b0:	fe 01       	movw	r30, r28
    32b2:	e7 5a       	subi	r30, 0xA7	; 167
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	80 81       	ld	r24, Z
    32b8:	61 e0       	ldi	r22, 0x01	; 1
    32ba:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
							CLCD_voidSendData('*');
    32be:	8a e2       	ldi	r24, 0x2A	; 42
    32c0:	0e 94 98 08 	call	0x1130	; 0x1130 <CLCD_voidSendData>
							/* increment Local_u8FourDigitPassword by 1 */
							Local_u8FourDigitPassword++;
    32c4:	de 01       	movw	r26, r28
    32c6:	a6 5a       	subi	r26, 0xA6	; 166
    32c8:	bf 4f       	sbci	r27, 0xFF	; 255
    32ca:	fe 01       	movw	r30, r28
    32cc:	e6 5a       	subi	r30, 0xA6	; 166
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 81       	ld	r24, Z
    32d2:	8f 5f       	subi	r24, 0xFF	; 255
    32d4:	8c 93       	st	X, r24
							/* increment Local_u8Password_POSI_Counter by 1 */
							Local_u8Password_POSI_Counter++;
    32d6:	de 01       	movw	r26, r28
    32d8:	a7 5a       	subi	r26, 0xA7	; 167
    32da:	bf 4f       	sbci	r27, 0xFF	; 255
    32dc:	fe 01       	movw	r30, r28
    32de:	e7 5a       	subi	r30, 0xA7	; 167
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 81       	ld	r24, Z
    32e4:	8f 5f       	subi	r24, 0xFF	; 255
    32e6:	8c 93       	st	X, r24
					CLCD_voidGoToXY(0,1);
					CLCD_u8SendString("password:");
					/* this loop to check on Local_u8FourDigitPassword */
					Local_u8FourDigitPassword=0;
					Local_u8Password_POSI_Counter=9;
					while( Local_u8FourDigitPassword < 4)
    32e8:	fe 01       	movw	r30, r28
    32ea:	e6 5a       	subi	r30, 0xA6	; 166
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	80 81       	ld	r24, Z
    32f0:	84 30       	cpi	r24, 0x04	; 4
    32f2:	08 f4       	brcc	.+2      	; 0x32f6 <main+0xc06>
    32f4:	27 cf       	rjmp	.-434    	; 0x3144 <main+0xa54>
							Local_u8Password_POSI_Counter++;
						}

					}

					switch(Local_u32PasswordDigits)
    32f6:	fe 01       	movw	r30, r28
    32f8:	e5 5a       	subi	r30, 0xA5	; 165
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	a2 81       	ldd	r26, Z+2	; 0x02
    3302:	b3 81       	ldd	r27, Z+3	; 0x03
    3304:	e2 96       	adiw	r28, 0x32	; 50
    3306:	8c af       	std	Y+60, r24	; 0x3c
    3308:	9d af       	std	Y+61, r25	; 0x3d
    330a:	ae af       	std	Y+62, r26	; 0x3e
    330c:	bf af       	std	Y+63, r27	; 0x3f
    330e:	e2 97       	sbiw	r28, 0x32	; 50
    3310:	e2 96       	adiw	r28, 0x32	; 50
    3312:	8c ad       	ldd	r24, Y+60	; 0x3c
    3314:	9d ad       	ldd	r25, Y+61	; 0x3d
    3316:	ae ad       	ldd	r26, Y+62	; 0x3e
    3318:	bf ad       	ldd	r27, Y+63	; 0x3f
    331a:	e2 97       	sbiw	r28, 0x32	; 50
    331c:	81 3e       	cpi	r24, 0xE1	; 225
    331e:	e0 e1       	ldi	r30, 0x10	; 16
    3320:	9e 07       	cpc	r25, r30
    3322:	e0 e0       	ldi	r30, 0x00	; 0
    3324:	ae 07       	cpc	r26, r30
    3326:	e0 e0       	ldi	r30, 0x00	; 0
    3328:	be 07       	cpc	r27, r30
    332a:	79 f0       	breq	.+30     	; 0x334a <main+0xc5a>
    332c:	e2 96       	adiw	r28, 0x32	; 50
    332e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3330:	9d ad       	ldd	r25, Y+61	; 0x3d
    3332:	ae ad       	ldd	r26, Y+62	; 0x3e
    3334:	bf ad       	ldd	r27, Y+63	; 0x3f
    3336:	e2 97       	sbiw	r28, 0x32	; 50
    3338:	8d 33       	cpi	r24, 0x3D	; 61
    333a:	e2 e2       	ldi	r30, 0x22	; 34
    333c:	9e 07       	cpc	r25, r30
    333e:	e0 e0       	ldi	r30, 0x00	; 0
    3340:	ae 07       	cpc	r26, r30
    3342:	e0 e0       	ldi	r30, 0x00	; 0
    3344:	be 07       	cpc	r27, r30
    3346:	49 f0       	breq	.+18     	; 0x335a <main+0xc6a>
    3348:	0a c0       	rjmp	.+20     	; 0x335e <main+0xc6e>
					{
					case 4321 :

						F_voidSytemON();
    334a:	0e 94 0d 1c 	call	0x381a	; 0x381a <F_voidSytemON>
						Local_u8Flag_OP_Done = 1;
    334e:	fe 01       	movw	r30, r28
    3350:	e9 5a       	subi	r30, 0xA9	; 169
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	80 83       	st	Z, r24
    3358:	02 c0       	rjmp	.+4      	; 0x335e <main+0xc6e>
						break;
					case 8765 :

						F_voidSytemON();
    335a:	0e 94 0d 1c 	call	0x381a	; 0x381a <F_voidSytemON>
						break;
					}
					Local_u8TryCount++;
    335e:	de 01       	movw	r26, r28
    3360:	a8 5a       	subi	r26, 0xA8	; 168
    3362:	bf 4f       	sbci	r27, 0xFF	; 255
    3364:	fe 01       	movw	r30, r28
    3366:	e8 5a       	subi	r30, 0xA8	; 168
    3368:	ff 4f       	sbci	r31, 0xFF	; 255
    336a:	80 81       	ld	r24, Z
    336c:	8f 5f       	subi	r24, 0xFF	; 255
    336e:	8c 93       	st	X, r24
				F_voidSytemON();
				break;

			default:
				//Local_u8SSD_Counter=4;
				while(Local_u8Flag_OP_Done == 0 && Local_u8TryCount < 3 )
    3370:	fe 01       	movw	r30, r28
    3372:	e9 5a       	subi	r30, 0xA9	; 169
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	88 23       	and	r24, r24
    337a:	39 f4       	brne	.+14     	; 0x338a <main+0xc9a>
    337c:	fe 01       	movw	r30, r28
    337e:	e8 5a       	subi	r30, 0xA8	; 168
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	83 30       	cpi	r24, 0x03	; 3
    3386:	08 f4       	brcc	.+2      	; 0x338a <main+0xc9a>
    3388:	e3 cd       	rjmp	.-1082   	; 0x2f50 <main+0x860>
						break;
					}
					Local_u8TryCount++;
				}

				if(Local_u8TryCount == 3)
    338a:	fe 01       	movw	r30, r28
    338c:	e8 5a       	subi	r30, 0xA8	; 168
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	80 81       	ld	r24, Z
    3392:	83 30       	cpi	r24, 0x03	; 3
    3394:	09 f0       	breq	.+2      	; 0x3398 <main+0xca8>
    3396:	06 ca       	rjmp	.-3060   	; 0x27a4 <main+0xb4>
				{

					F_voidSytemSTOP();
    3398:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <F_voidSytemSTOP>
    339c:	03 ca       	rjmp	.-3066   	; 0x27a4 <main+0xb4>

0000339e <F_voidWelcomeHamoksha>:

		}
	}
}
void  F_voidWelcomeHamoksha(void)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	e9 97       	sbiw	r28, 0x39	; 57
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8Counter=0 ;
    33b2:	19 ae       	std	Y+57, r1	; 0x39
	CLCD_voidGoToXY(0,0);
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
	CLCD_u8SendString("Hi,I am Hamoksha");
    33bc:	85 e9       	ldi	r24, 0x95	; 149
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>

	CLCD_voidSendSpecialCharacter(Local_u8HamokshaArr,0,0,1);
    33c4:	87 ed       	ldi	r24, 0xD7	; 215
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	60 e0       	ldi	r22, 0x00	; 0
    33ca:	40 e0       	ldi	r20, 0x00	; 0
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	aa e7       	ldi	r26, 0x7A	; 122
    33d8:	b4 e4       	ldi	r27, 0x44	; 68
    33da:	8d ab       	std	Y+53, r24	; 0x35
    33dc:	9e ab       	std	Y+54, r25	; 0x36
    33de:	af ab       	std	Y+55, r26	; 0x37
    33e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e2:	6d a9       	ldd	r22, Y+53	; 0x35
    33e4:	7e a9       	ldd	r23, Y+54	; 0x36
    33e6:	8f a9       	ldd	r24, Y+55	; 0x37
    33e8:	98 ad       	ldd	r25, Y+56	; 0x38
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	4a ef       	ldi	r20, 0xFA	; 250
    33f0:	54 e4       	ldi	r21, 0x44	; 68
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	89 ab       	std	Y+49, r24	; 0x31
    33fc:	9a ab       	std	Y+50, r25	; 0x32
    33fe:	ab ab       	std	Y+51, r26	; 0x33
    3400:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3402:	69 a9       	ldd	r22, Y+49	; 0x31
    3404:	7a a9       	ldd	r23, Y+50	; 0x32
    3406:	8b a9       	ldd	r24, Y+51	; 0x33
    3408:	9c a9       	ldd	r25, Y+52	; 0x34
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	2c f4       	brge	.+10     	; 0x3424 <F_voidWelcomeHamoksha+0x86>
		__ticks = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	98 ab       	std	Y+48, r25	; 0x30
    3420:	8f a7       	std	Y+47, r24	; 0x2f
    3422:	3f c0       	rjmp	.+126    	; 0x34a2 <F_voidWelcomeHamoksha+0x104>
	else if (__tmp > 65535)
    3424:	69 a9       	ldd	r22, Y+49	; 0x31
    3426:	7a a9       	ldd	r23, Y+50	; 0x32
    3428:	8b a9       	ldd	r24, Y+51	; 0x33
    342a:	9c a9       	ldd	r25, Y+52	; 0x34
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	3f ef       	ldi	r19, 0xFF	; 255
    3430:	4f e7       	ldi	r20, 0x7F	; 127
    3432:	57 e4       	ldi	r21, 0x47	; 71
    3434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3438:	18 16       	cp	r1, r24
    343a:	4c f5       	brge	.+82     	; 0x348e <F_voidWelcomeHamoksha+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343c:	6d a9       	ldd	r22, Y+53	; 0x35
    343e:	7e a9       	ldd	r23, Y+54	; 0x36
    3440:	8f a9       	ldd	r24, Y+55	; 0x37
    3442:	98 ad       	ldd	r25, Y+56	; 0x38
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	40 e2       	ldi	r20, 0x20	; 32
    344a:	51 e4       	ldi	r21, 0x41	; 65
    344c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3450:	dc 01       	movw	r26, r24
    3452:	cb 01       	movw	r24, r22
    3454:	bc 01       	movw	r22, r24
    3456:	cd 01       	movw	r24, r26
    3458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	98 ab       	std	Y+48, r25	; 0x30
    3462:	8f a7       	std	Y+47, r24	; 0x2f
    3464:	0f c0       	rjmp	.+30     	; 0x3484 <F_voidWelcomeHamoksha+0xe6>
    3466:	88 ec       	ldi	r24, 0xC8	; 200
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	9e a7       	std	Y+46, r25	; 0x2e
    346c:	8d a7       	std	Y+45, r24	; 0x2d
    346e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3470:	9e a5       	ldd	r25, Y+46	; 0x2e
    3472:	01 97       	sbiw	r24, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <F_voidWelcomeHamoksha+0xd4>
    3476:	9e a7       	std	Y+46, r25	; 0x2e
    3478:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347a:	8f a5       	ldd	r24, Y+47	; 0x2f
    347c:	98 a9       	ldd	r25, Y+48	; 0x30
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	98 ab       	std	Y+48, r25	; 0x30
    3482:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3484:	8f a5       	ldd	r24, Y+47	; 0x2f
    3486:	98 a9       	ldd	r25, Y+48	; 0x30
    3488:	00 97       	sbiw	r24, 0x00	; 0
    348a:	69 f7       	brne	.-38     	; 0x3466 <F_voidWelcomeHamoksha+0xc8>
    348c:	14 c0       	rjmp	.+40     	; 0x34b6 <F_voidWelcomeHamoksha+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348e:	69 a9       	ldd	r22, Y+49	; 0x31
    3490:	7a a9       	ldd	r23, Y+50	; 0x32
    3492:	8b a9       	ldd	r24, Y+51	; 0x33
    3494:	9c a9       	ldd	r25, Y+52	; 0x34
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	98 ab       	std	Y+48, r25	; 0x30
    34a0:	8f a7       	std	Y+47, r24	; 0x2f
    34a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a4:	98 a9       	ldd	r25, Y+48	; 0x30
    34a6:	9c a7       	std	Y+44, r25	; 0x2c
    34a8:	8b a7       	std	Y+43, r24	; 0x2b
    34aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <F_voidWelcomeHamoksha+0x110>
    34b2:	9c a7       	std	Y+44, r25	; 0x2c
    34b4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);


	CLCD_voidSendSpecialCharacter(Local_u8HamokshaArrRun1,2,0,1);
    34b6:	8f ed       	ldi	r24, 0xDF	; 223
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	62 e0       	ldi	r22, 0x02	; 2
    34bc:	40 e0       	ldi	r20, 0x00	; 0
    34be:	21 e0       	ldi	r18, 0x01	; 1
    34c0:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	aa ef       	ldi	r26, 0xFA	; 250
    34ca:	b3 e4       	ldi	r27, 0x43	; 67
    34cc:	8f a3       	std	Y+39, r24	; 0x27
    34ce:	98 a7       	std	Y+40, r25	; 0x28
    34d0:	a9 a7       	std	Y+41, r26	; 0x29
    34d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	6f a1       	ldd	r22, Y+39	; 0x27
    34d6:	78 a5       	ldd	r23, Y+40	; 0x28
    34d8:	89 a5       	ldd	r24, Y+41	; 0x29
    34da:	9a a5       	ldd	r25, Y+42	; 0x2a
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a ef       	ldi	r20, 0xFA	; 250
    34e2:	54 e4       	ldi	r21, 0x44	; 68
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	8b a3       	std	Y+35, r24	; 0x23
    34ee:	9c a3       	std	Y+36, r25	; 0x24
    34f0:	ad a3       	std	Y+37, r26	; 0x25
    34f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34f4:	6b a1       	ldd	r22, Y+35	; 0x23
    34f6:	7c a1       	ldd	r23, Y+36	; 0x24
    34f8:	8d a1       	ldd	r24, Y+37	; 0x25
    34fa:	9e a1       	ldd	r25, Y+38	; 0x26
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f e3       	ldi	r21, 0x3F	; 63
    3504:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3508:	88 23       	and	r24, r24
    350a:	2c f4       	brge	.+10     	; 0x3516 <F_voidWelcomeHamoksha+0x178>
		__ticks = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9a a3       	std	Y+34, r25	; 0x22
    3512:	89 a3       	std	Y+33, r24	; 0x21
    3514:	3f c0       	rjmp	.+126    	; 0x3594 <F_voidWelcomeHamoksha+0x1f6>
	else if (__tmp > 65535)
    3516:	6b a1       	ldd	r22, Y+35	; 0x23
    3518:	7c a1       	ldd	r23, Y+36	; 0x24
    351a:	8d a1       	ldd	r24, Y+37	; 0x25
    351c:	9e a1       	ldd	r25, Y+38	; 0x26
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	4c f5       	brge	.+82     	; 0x3580 <F_voidWelcomeHamoksha+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352e:	6f a1       	ldd	r22, Y+39	; 0x27
    3530:	78 a5       	ldd	r23, Y+40	; 0x28
    3532:	89 a5       	ldd	r24, Y+41	; 0x29
    3534:	9a a5       	ldd	r25, Y+42	; 0x2a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9a a3       	std	Y+34, r25	; 0x22
    3554:	89 a3       	std	Y+33, r24	; 0x21
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <F_voidWelcomeHamoksha+0x1d8>
    3558:	88 ec       	ldi	r24, 0xC8	; 200
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	98 a3       	std	Y+32, r25	; 0x20
    355e:	8f 8f       	std	Y+31, r24	; 0x1f
    3560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3562:	98 a1       	ldd	r25, Y+32	; 0x20
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <F_voidWelcomeHamoksha+0x1c6>
    3568:	98 a3       	std	Y+32, r25	; 0x20
    356a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	89 a1       	ldd	r24, Y+33	; 0x21
    356e:	9a a1       	ldd	r25, Y+34	; 0x22
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	9a a3       	std	Y+34, r25	; 0x22
    3574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	89 a1       	ldd	r24, Y+33	; 0x21
    3578:	9a a1       	ldd	r25, Y+34	; 0x22
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <F_voidWelcomeHamoksha+0x1ba>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <F_voidWelcomeHamoksha+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	6b a1       	ldd	r22, Y+35	; 0x23
    3582:	7c a1       	ldd	r23, Y+36	; 0x24
    3584:	8d a1       	ldd	r24, Y+37	; 0x25
    3586:	9e a1       	ldd	r25, Y+38	; 0x26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9a a3       	std	Y+34, r25	; 0x22
    3592:	89 a3       	std	Y+33, r24	; 0x21
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	9e 8f       	std	Y+30, r25	; 0x1e
    359a:	8d 8f       	std	Y+29, r24	; 0x1d
    359c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <F_voidWelcomeHamoksha+0x202>
    35a4:	9e 8f       	std	Y+30, r25	; 0x1e
    35a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	CLCD_voidSendSpecialCharacter(Local_u8DeleteHamokshaArr,1,0,1);
    35a8:	86 e0       	ldi	r24, 0x06	; 6
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	40 e0       	ldi	r20, 0x00	; 0
    35b0:	21 e0       	ldi	r18, 0x01	; 1
    35b2:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>

	for(Local_u8Counter= 0 ; Local_u8Counter < 15 ;Local_u8Counter++ )
    35b6:	19 ae       	std	Y+57, r1	; 0x39
    35b8:	12 c1       	rjmp	.+548    	; 0x37de <F_voidWelcomeHamoksha+0x440>
	{
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaArrRun2,2,Local_u8Counter+1,1);
    35ba:	89 ad       	ldd	r24, Y+57	; 0x39
    35bc:	28 2f       	mov	r18, r24
    35be:	2f 5f       	subi	r18, 0xFF	; 255
    35c0:	87 ee       	ldi	r24, 0xE7	; 231
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	62 e0       	ldi	r22, 0x02	; 2
    35c6:	42 2f       	mov	r20, r18
    35c8:	21 e0       	ldi	r18, 0x01	; 1
    35ca:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	a6 e9       	ldi	r26, 0x96	; 150
    35d4:	b3 e4       	ldi	r27, 0x43	; 67
    35d6:	89 8f       	std	Y+25, r24	; 0x19
    35d8:	9a 8f       	std	Y+26, r25	; 0x1a
    35da:	ab 8f       	std	Y+27, r26	; 0x1b
    35dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	69 8d       	ldd	r22, Y+25	; 0x19
    35e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	4a ef       	ldi	r20, 0xFA	; 250
    35ec:	54 e4       	ldi	r21, 0x44	; 68
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	8d 8b       	std	Y+21, r24	; 0x15
    35f8:	9e 8b       	std	Y+22, r25	; 0x16
    35fa:	af 8b       	std	Y+23, r26	; 0x17
    35fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3600:	7e 89       	ldd	r23, Y+22	; 0x16
    3602:	8f 89       	ldd	r24, Y+23	; 0x17
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e8       	ldi	r20, 0x80	; 128
    360c:	5f e3       	ldi	r21, 0x3F	; 63
    360e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3612:	88 23       	and	r24, r24
    3614:	2c f4       	brge	.+10     	; 0x3620 <F_voidWelcomeHamoksha+0x282>
		__ticks = 1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	9c 8b       	std	Y+20, r25	; 0x14
    361c:	8b 8b       	std	Y+19, r24	; 0x13
    361e:	3f c0       	rjmp	.+126    	; 0x369e <F_voidWelcomeHamoksha+0x300>
	else if (__tmp > 65535)
    3620:	6d 89       	ldd	r22, Y+21	; 0x15
    3622:	7e 89       	ldd	r23, Y+22	; 0x16
    3624:	8f 89       	ldd	r24, Y+23	; 0x17
    3626:	98 8d       	ldd	r25, Y+24	; 0x18
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	4c f5       	brge	.+82     	; 0x368a <F_voidWelcomeHamoksha+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	69 8d       	ldd	r22, Y+25	; 0x19
    363a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    363c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    363e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e2       	ldi	r20, 0x20	; 32
    3646:	51 e4       	ldi	r21, 0x41	; 65
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	bc 01       	movw	r22, r24
    3652:	cd 01       	movw	r24, r26
    3654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	9c 8b       	std	Y+20, r25	; 0x14
    365e:	8b 8b       	std	Y+19, r24	; 0x13
    3660:	0f c0       	rjmp	.+30     	; 0x3680 <F_voidWelcomeHamoksha+0x2e2>
    3662:	88 ec       	ldi	r24, 0xC8	; 200
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	9a 8b       	std	Y+18, r25	; 0x12
    3668:	89 8b       	std	Y+17, r24	; 0x11
    366a:	89 89       	ldd	r24, Y+17	; 0x11
    366c:	9a 89       	ldd	r25, Y+18	; 0x12
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <F_voidWelcomeHamoksha+0x2d0>
    3672:	9a 8b       	std	Y+18, r25	; 0x12
    3674:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3676:	8b 89       	ldd	r24, Y+19	; 0x13
    3678:	9c 89       	ldd	r25, Y+20	; 0x14
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	9c 8b       	std	Y+20, r25	; 0x14
    367e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3680:	8b 89       	ldd	r24, Y+19	; 0x13
    3682:	9c 89       	ldd	r25, Y+20	; 0x14
    3684:	00 97       	sbiw	r24, 0x00	; 0
    3686:	69 f7       	brne	.-38     	; 0x3662 <F_voidWelcomeHamoksha+0x2c4>
    3688:	14 c0       	rjmp	.+40     	; 0x36b2 <F_voidWelcomeHamoksha+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368a:	6d 89       	ldd	r22, Y+21	; 0x15
    368c:	7e 89       	ldd	r23, Y+22	; 0x16
    368e:	8f 89       	ldd	r24, Y+23	; 0x17
    3690:	98 8d       	ldd	r25, Y+24	; 0x18
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	9c 8b       	std	Y+20, r25	; 0x14
    369c:	8b 8b       	std	Y+19, r24	; 0x13
    369e:	8b 89       	ldd	r24, Y+19	; 0x13
    36a0:	9c 89       	ldd	r25, Y+20	; 0x14
    36a2:	98 8b       	std	Y+16, r25	; 0x10
    36a4:	8f 87       	std	Y+15, r24	; 0x0f
    36a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a8:	98 89       	ldd	r25, Y+16	; 0x10
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <F_voidWelcomeHamoksha+0x30c>
    36ae:	98 8b       	std	Y+16, r25	; 0x10
    36b0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		CLCD_voidSendSpecialCharacter(Local_u8DeleteHamokshaArr,1,Local_u8Counter+1,1);
    36b2:	89 ad       	ldd	r24, Y+57	; 0x39
    36b4:	28 2f       	mov	r18, r24
    36b6:	2f 5f       	subi	r18, 0xFF	; 255
    36b8:	86 e0       	ldi	r24, 0x06	; 6
    36ba:	91 e0       	ldi	r25, 0x01	; 1
    36bc:	61 e0       	ldi	r22, 0x01	; 1
    36be:	42 2f       	mov	r20, r18
    36c0:	21 e0       	ldi	r18, 0x01	; 1
    36c2:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>

		Local_u8Counter++;
    36c6:	89 ad       	ldd	r24, Y+57	; 0x39
    36c8:	8f 5f       	subi	r24, 0xFF	; 255
    36ca:	89 af       	std	Y+57, r24	; 0x39
		CLCD_voidSendSpecialCharacter(Local_u8HamokshaArrRun1,3,Local_u8Counter+1,1);
    36cc:	89 ad       	ldd	r24, Y+57	; 0x39
    36ce:	28 2f       	mov	r18, r24
    36d0:	2f 5f       	subi	r18, 0xFF	; 255
    36d2:	8f ed       	ldi	r24, 0xDF	; 223
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	63 e0       	ldi	r22, 0x03	; 3
    36d8:	42 2f       	mov	r20, r18
    36da:	21 e0       	ldi	r18, 0x01	; 1
    36dc:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a6 e9       	ldi	r26, 0x96	; 150
    36e6:	b3 e4       	ldi	r27, 0x43	; 67
    36e8:	8b 87       	std	Y+11, r24	; 0x0b
    36ea:	9c 87       	std	Y+12, r25	; 0x0c
    36ec:	ad 87       	std	Y+13, r26	; 0x0d
    36ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	4a ef       	ldi	r20, 0xFA	; 250
    36fe:	54 e4       	ldi	r21, 0x44	; 68
    3700:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	8f 83       	std	Y+7, r24	; 0x07
    370a:	98 87       	std	Y+8, r25	; 0x08
    370c:	a9 87       	std	Y+9, r26	; 0x09
    370e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e8       	ldi	r20, 0x80	; 128
    371e:	5f e3       	ldi	r21, 0x3F	; 63
    3720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3724:	88 23       	and	r24, r24
    3726:	2c f4       	brge	.+10     	; 0x3732 <F_voidWelcomeHamoksha+0x394>
		__ticks = 1;
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	9e 83       	std	Y+6, r25	; 0x06
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	3f c0       	rjmp	.+126    	; 0x37b0 <F_voidWelcomeHamoksha+0x412>
	else if (__tmp > 65535)
    3732:	6f 81       	ldd	r22, Y+7	; 0x07
    3734:	78 85       	ldd	r23, Y+8	; 0x08
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	9a 85       	ldd	r25, Y+10	; 0x0a
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	3f ef       	ldi	r19, 0xFF	; 255
    373e:	4f e7       	ldi	r20, 0x7F	; 127
    3740:	57 e4       	ldi	r21, 0x47	; 71
    3742:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3746:	18 16       	cp	r1, r24
    3748:	4c f5       	brge	.+82     	; 0x379c <F_voidWelcomeHamoksha+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6b 85       	ldd	r22, Y+11	; 0x0b
    374c:	7c 85       	ldd	r23, Y+12	; 0x0c
    374e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3750:	9e 85       	ldd	r25, Y+14	; 0x0e
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	9e 83       	std	Y+6, r25	; 0x06
    3770:	8d 83       	std	Y+5, r24	; 0x05
    3772:	0f c0       	rjmp	.+30     	; 0x3792 <F_voidWelcomeHamoksha+0x3f4>
    3774:	88 ec       	ldi	r24, 0xC8	; 200
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9c 83       	std	Y+4, r25	; 0x04
    377a:	8b 83       	std	Y+3, r24	; 0x03
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <F_voidWelcomeHamoksha+0x3e2>
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3788:	8d 81       	ldd	r24, Y+5	; 0x05
    378a:	9e 81       	ldd	r25, Y+6	; 0x06
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	9e 83       	std	Y+6, r25	; 0x06
    3790:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	69 f7       	brne	.-38     	; 0x3774 <F_voidWelcomeHamoksha+0x3d6>
    379a:	14 c0       	rjmp	.+40     	; 0x37c4 <F_voidWelcomeHamoksha+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379c:	6f 81       	ldd	r22, Y+7	; 0x07
    379e:	78 85       	ldd	r23, Y+8	; 0x08
    37a0:	89 85       	ldd	r24, Y+9	; 0x09
    37a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	8d 81       	ldd	r24, Y+5	; 0x05
    37b2:	9e 81       	ldd	r25, Y+6	; 0x06
    37b4:	9a 83       	std	Y+2, r25	; 0x02
    37b6:	89 83       	std	Y+1, r24	; 0x01
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	9a 81       	ldd	r25, Y+2	; 0x02
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <F_voidWelcomeHamoksha+0x41e>
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		CLCD_voidSendSpecialCharacter(Local_u8DeleteHamokshaArr,1,Local_u8Counter+1,1);
    37c4:	89 ad       	ldd	r24, Y+57	; 0x39
    37c6:	28 2f       	mov	r18, r24
    37c8:	2f 5f       	subi	r18, 0xFF	; 255
    37ca:	86 e0       	ldi	r24, 0x06	; 6
    37cc:	91 e0       	ldi	r25, 0x01	; 1
    37ce:	61 e0       	ldi	r22, 0x01	; 1
    37d0:	42 2f       	mov	r20, r18
    37d2:	21 e0       	ldi	r18, 0x01	; 1
    37d4:	0e 94 20 0a 	call	0x1440	; 0x1440 <CLCD_voidSendSpecialCharacter>

	CLCD_voidSendSpecialCharacter(Local_u8HamokshaArrRun1,2,0,1);
	_delay_ms(500);
	CLCD_voidSendSpecialCharacter(Local_u8DeleteHamokshaArr,1,0,1);

	for(Local_u8Counter= 0 ; Local_u8Counter < 15 ;Local_u8Counter++ )
    37d8:	89 ad       	ldd	r24, Y+57	; 0x39
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	89 af       	std	Y+57, r24	; 0x39
    37de:	89 ad       	ldd	r24, Y+57	; 0x39
    37e0:	8f 30       	cpi	r24, 0x0F	; 15
    37e2:	08 f4       	brcc	.+2      	; 0x37e6 <F_voidWelcomeHamoksha+0x448>
    37e4:	ea ce       	rjmp	.-556    	; 0x35ba <F_voidWelcomeHamoksha+0x21c>
		_delay_ms(300);
		CLCD_voidSendSpecialCharacter(Local_u8DeleteHamokshaArr,1,Local_u8Counter+1,1);
	}


}
    37e6:	e9 96       	adiw	r28, 0x39	; 57
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <F_voidSytemSTOP>:


void F_voidSytemSTOP(void)
{
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		CLCD_voidSendCmd(1);
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
		DCMOTOR_u8Stop(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN1);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 94 0a 	call	0x1528	; 0x1528 <DCMOTOR_u8Stop>
		SSD_u8Display_OFF(&SSD_t);
    3810:	8f ee       	ldi	r24, 0xEF	; 239
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 bc 12 	call	0x2578	; 0x2578 <SSD_u8Display_OFF>
    3818:	f3 cf       	rjmp	.-26     	; 0x3800 <F_voidSytemSTOP+0x8>

0000381a <F_voidSytemON>:
	}
}

void F_voidSytemON(void)
{
    381a:	af 92       	push	r10
    381c:	bf 92       	push	r11
    381e:	cf 92       	push	r12
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	00 d0       	rcall	.+0      	; 0x3830 <F_voidSytemON+0x16>
    3830:	00 d0       	rcall	.+0      	; 0x3832 <F_voidSytemON+0x18>
    3832:	0f 92       	push	r0
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8Flag_OP_Done,Local_u8LM35Result, Local_u8LedsMap;
	uint16 Local_u16LDRResult  ;

	SSD_u8SetNumber(&SSD_t,0);
    3838:	8f ee       	ldi	r24, 0xEF	; 239
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	0e 94 09 13 	call	0x2612	; 0x2612 <SSD_u8SetNumber>
	CLCD_voidSendCmd(1);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CLCD_voidSendCmd>
	while(1)
	{
		CLCD_voidGoToXY(0,0);
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
		CLCD_u8SendString("TEMP:");
    3850:	86 ea       	ldi	r24, 0xA6	; 166
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
		CLCD_voidGoToXY(5,0);
    3858:	85 e0       	ldi	r24, 0x05	; 5
    385a:	60 e0       	ldi	r22, 0x00	; 0
    385c:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
		LM35_u8GetTemp(ADC_SINGLE_ENDED_CH3,&Local_u8LM35Result);
    3860:	9e 01       	movw	r18, r28
    3862:	2d 5f       	subi	r18, 0xFD	; 253
    3864:	3f 4f       	sbci	r19, 0xFF	; 255
    3866:	83 e0       	ldi	r24, 0x03	; 3
    3868:	b9 01       	movw	r22, r18
    386a:	0e 94 15 11 	call	0x222a	; 0x222a <LM35_u8GetTemp>
		CLCD_voidSendNumber(Local_u8LM35Result);
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	88 2f       	mov	r24, r24
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>
		CLCD_voidGoToXY(0,1);
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	61 e0       	ldi	r22, 0x01	; 1
    3884:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
		CLCD_u8SendString("LEDS:");
    3888:	8c ea       	ldi	r24, 0xAC	; 172
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
		CLCD_voidGoToXY(5,1);
    3890:	85 e0       	ldi	r24, 0x05	; 5
    3892:	61 e0       	ldi	r22, 0x01	; 1
    3894:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
		LDR_u8GetAnalogVolt(ADC_SINGLE_ENDED_CH4,&Local_u16LDRResult);
    3898:	9e 01       	movw	r18, r28
    389a:	2c 5f       	subi	r18, 0xFC	; 252
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    389e:	84 e0       	ldi	r24, 0x04	; 4
    38a0:	b9 01       	movw	r22, r18
    38a2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LDR_u8GetAnalogVolt>
		Local_u8LedsMap =(uint8)F_u32MAP(0,1023,1,8,(uint32)Local_u16LDRResult);
    38a6:	8c 81       	ldd	r24, Y+4	; 0x04
    38a8:	9d 81       	ldd	r25, Y+5	; 0x05
    38aa:	cc 01       	movw	r24, r24
    38ac:	a0 e0       	ldi	r26, 0x00	; 0
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	00 d0       	rcall	.+0      	; 0x38b2 <F_voidSytemON+0x98>
    38b2:	00 d0       	rcall	.+0      	; 0x38b4 <F_voidSytemON+0x9a>
    38b4:	ed b7       	in	r30, 0x3d	; 61
    38b6:	fe b7       	in	r31, 0x3e	; 62
    38b8:	31 96       	adiw	r30, 0x01	; 1
    38ba:	80 83       	st	Z, r24
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	a2 83       	std	Z+2, r26	; 0x02
    38c0:	b3 83       	std	Z+3, r27	; 0x03
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	2f ef       	ldi	r18, 0xFF	; 255
    38cc:	33 e0       	ldi	r19, 0x03	; 3
    38ce:	40 e0       	ldi	r20, 0x00	; 0
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	ee 24       	eor	r14, r14
    38d4:	ff 24       	eor	r15, r15
    38d6:	87 01       	movw	r16, r14
    38d8:	e3 94       	inc	r14
    38da:	aa 24       	eor	r10, r10
    38dc:	bb 24       	eor	r11, r11
    38de:	65 01       	movw	r12, r10
    38e0:	68 94       	set
    38e2:	a3 f8       	bld	r10, 3
    38e4:	0e 94 cf 11 	call	0x239e	; 0x239e <F_u32MAP>
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendNumber(Local_u8LedsMap);
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	88 2f       	mov	r24, r24
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e0       	ldi	r26, 0x00	; 0
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 73 09 	call	0x12e6	; 0x12e6 <CLCD_voidSendNumber>


		/*Local_u8Flag_OP_Done = 1 */
		Local_u8Flag_OP_Done = 1;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	8a 83       	std	Y+2, r24	; 0x02

		if(Local_u8LM35Result >= 35)
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	83 32       	cpi	r24, 0x23	; 35
    3910:	70 f0       	brcs	.+28     	; 0x392e <F_voidSytemON+0x114>
		{
			DCMOTOR_u8RotateClockWise(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN6);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	65 e0       	ldi	r22, 0x05	; 5
    3916:	46 e0       	ldi	r20, 0x06	; 6
    3918:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DCMOTOR_u8RotateClockWise>
			CLCD_voidGoToXY(14,0);
    391c:	8e e0       	ldi	r24, 0x0E	; 14
    391e:	60 e0       	ldi	r22, 0x00	; 0
    3920:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
			CLCD_u8SendString("M");
    3924:	82 eb       	ldi	r24, 0xB2	; 178
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    392c:	8d cf       	rjmp	.-230    	; 0x3848 <F_voidSytemON+0x2e>

		}else
		{
			DCMOTOR_u8Stop(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN6);
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	65 e0       	ldi	r22, 0x05	; 5
    3932:	46 e0       	ldi	r20, 0x06	; 6
    3934:	0e 94 94 0a 	call	0x1528	; 0x1528 <DCMOTOR_u8Stop>
			CLCD_voidGoToXY(14,0);
    3938:	8e e0       	ldi	r24, 0x0E	; 14
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	0e 94 00 0a 	call	0x1400	; 0x1400 <CLCD_voidGoToXY>
			CLCD_u8SendString(" ");
    3940:	84 eb       	ldi	r24, 0xB4	; 180
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 40 09 	call	0x1280	; 0x1280 <CLCD_u8SendString>
    3948:	7f cf       	rjmp	.-258    	; 0x3848 <F_voidSytemON+0x2e>

0000394a <__mulsi3>:
    394a:	62 9f       	mul	r22, r18
    394c:	d0 01       	movw	r26, r0
    394e:	73 9f       	mul	r23, r19
    3950:	f0 01       	movw	r30, r0
    3952:	82 9f       	mul	r24, r18
    3954:	e0 0d       	add	r30, r0
    3956:	f1 1d       	adc	r31, r1
    3958:	64 9f       	mul	r22, r20
    395a:	e0 0d       	add	r30, r0
    395c:	f1 1d       	adc	r31, r1
    395e:	92 9f       	mul	r25, r18
    3960:	f0 0d       	add	r31, r0
    3962:	83 9f       	mul	r24, r19
    3964:	f0 0d       	add	r31, r0
    3966:	74 9f       	mul	r23, r20
    3968:	f0 0d       	add	r31, r0
    396a:	65 9f       	mul	r22, r21
    396c:	f0 0d       	add	r31, r0
    396e:	99 27       	eor	r25, r25
    3970:	72 9f       	mul	r23, r18
    3972:	b0 0d       	add	r27, r0
    3974:	e1 1d       	adc	r30, r1
    3976:	f9 1f       	adc	r31, r25
    3978:	63 9f       	mul	r22, r19
    397a:	b0 0d       	add	r27, r0
    397c:	e1 1d       	adc	r30, r1
    397e:	f9 1f       	adc	r31, r25
    3980:	bd 01       	movw	r22, r26
    3982:	cf 01       	movw	r24, r30
    3984:	11 24       	eor	r1, r1
    3986:	08 95       	ret

00003988 <__udivmodhi4>:
    3988:	aa 1b       	sub	r26, r26
    398a:	bb 1b       	sub	r27, r27
    398c:	51 e1       	ldi	r21, 0x11	; 17
    398e:	07 c0       	rjmp	.+14     	; 0x399e <__udivmodhi4_ep>

00003990 <__udivmodhi4_loop>:
    3990:	aa 1f       	adc	r26, r26
    3992:	bb 1f       	adc	r27, r27
    3994:	a6 17       	cp	r26, r22
    3996:	b7 07       	cpc	r27, r23
    3998:	10 f0       	brcs	.+4      	; 0x399e <__udivmodhi4_ep>
    399a:	a6 1b       	sub	r26, r22
    399c:	b7 0b       	sbc	r27, r23

0000399e <__udivmodhi4_ep>:
    399e:	88 1f       	adc	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	5a 95       	dec	r21
    39a4:	a9 f7       	brne	.-22     	; 0x3990 <__udivmodhi4_loop>
    39a6:	80 95       	com	r24
    39a8:	90 95       	com	r25
    39aa:	bc 01       	movw	r22, r24
    39ac:	cd 01       	movw	r24, r26
    39ae:	08 95       	ret

000039b0 <__udivmodsi4>:
    39b0:	a1 e2       	ldi	r26, 0x21	; 33
    39b2:	1a 2e       	mov	r1, r26
    39b4:	aa 1b       	sub	r26, r26
    39b6:	bb 1b       	sub	r27, r27
    39b8:	fd 01       	movw	r30, r26
    39ba:	0d c0       	rjmp	.+26     	; 0x39d6 <__udivmodsi4_ep>

000039bc <__udivmodsi4_loop>:
    39bc:	aa 1f       	adc	r26, r26
    39be:	bb 1f       	adc	r27, r27
    39c0:	ee 1f       	adc	r30, r30
    39c2:	ff 1f       	adc	r31, r31
    39c4:	a2 17       	cp	r26, r18
    39c6:	b3 07       	cpc	r27, r19
    39c8:	e4 07       	cpc	r30, r20
    39ca:	f5 07       	cpc	r31, r21
    39cc:	20 f0       	brcs	.+8      	; 0x39d6 <__udivmodsi4_ep>
    39ce:	a2 1b       	sub	r26, r18
    39d0:	b3 0b       	sbc	r27, r19
    39d2:	e4 0b       	sbc	r30, r20
    39d4:	f5 0b       	sbc	r31, r21

000039d6 <__udivmodsi4_ep>:
    39d6:	66 1f       	adc	r22, r22
    39d8:	77 1f       	adc	r23, r23
    39da:	88 1f       	adc	r24, r24
    39dc:	99 1f       	adc	r25, r25
    39de:	1a 94       	dec	r1
    39e0:	69 f7       	brne	.-38     	; 0x39bc <__udivmodsi4_loop>
    39e2:	60 95       	com	r22
    39e4:	70 95       	com	r23
    39e6:	80 95       	com	r24
    39e8:	90 95       	com	r25
    39ea:	9b 01       	movw	r18, r22
    39ec:	ac 01       	movw	r20, r24
    39ee:	bd 01       	movw	r22, r26
    39f0:	cf 01       	movw	r24, r30
    39f2:	08 95       	ret

000039f4 <__divmodsi4>:
    39f4:	97 fb       	bst	r25, 7
    39f6:	09 2e       	mov	r0, r25
    39f8:	05 26       	eor	r0, r21
    39fa:	0e d0       	rcall	.+28     	; 0x3a18 <__divmodsi4_neg1>
    39fc:	57 fd       	sbrc	r21, 7
    39fe:	04 d0       	rcall	.+8      	; 0x3a08 <__divmodsi4_neg2>
    3a00:	d7 df       	rcall	.-82     	; 0x39b0 <__udivmodsi4>
    3a02:	0a d0       	rcall	.+20     	; 0x3a18 <__divmodsi4_neg1>
    3a04:	00 1c       	adc	r0, r0
    3a06:	38 f4       	brcc	.+14     	; 0x3a16 <__divmodsi4_exit>

00003a08 <__divmodsi4_neg2>:
    3a08:	50 95       	com	r21
    3a0a:	40 95       	com	r20
    3a0c:	30 95       	com	r19
    3a0e:	21 95       	neg	r18
    3a10:	3f 4f       	sbci	r19, 0xFF	; 255
    3a12:	4f 4f       	sbci	r20, 0xFF	; 255
    3a14:	5f 4f       	sbci	r21, 0xFF	; 255

00003a16 <__divmodsi4_exit>:
    3a16:	08 95       	ret

00003a18 <__divmodsi4_neg1>:
    3a18:	f6 f7       	brtc	.-4      	; 0x3a16 <__divmodsi4_exit>
    3a1a:	90 95       	com	r25
    3a1c:	80 95       	com	r24
    3a1e:	70 95       	com	r23
    3a20:	61 95       	neg	r22
    3a22:	7f 4f       	sbci	r23, 0xFF	; 255
    3a24:	8f 4f       	sbci	r24, 0xFF	; 255
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	08 95       	ret

00003a2a <__prologue_saves__>:
    3a2a:	2f 92       	push	r2
    3a2c:	3f 92       	push	r3
    3a2e:	4f 92       	push	r4
    3a30:	5f 92       	push	r5
    3a32:	6f 92       	push	r6
    3a34:	7f 92       	push	r7
    3a36:	8f 92       	push	r8
    3a38:	9f 92       	push	r9
    3a3a:	af 92       	push	r10
    3a3c:	bf 92       	push	r11
    3a3e:	cf 92       	push	r12
    3a40:	df 92       	push	r13
    3a42:	ef 92       	push	r14
    3a44:	ff 92       	push	r15
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	cf 93       	push	r28
    3a4c:	df 93       	push	r29
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    3a52:	ca 1b       	sub	r28, r26
    3a54:	db 0b       	sbc	r29, r27
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	cd bf       	out	0x3d, r28	; 61
    3a60:	09 94       	ijmp

00003a62 <__epilogue_restores__>:
    3a62:	2a 88       	ldd	r2, Y+18	; 0x12
    3a64:	39 88       	ldd	r3, Y+17	; 0x11
    3a66:	48 88       	ldd	r4, Y+16	; 0x10
    3a68:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a6a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a6c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a6e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a70:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a72:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a74:	b9 84       	ldd	r11, Y+9	; 0x09
    3a76:	c8 84       	ldd	r12, Y+8	; 0x08
    3a78:	df 80       	ldd	r13, Y+7	; 0x07
    3a7a:	ee 80       	ldd	r14, Y+6	; 0x06
    3a7c:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7e:	0c 81       	ldd	r16, Y+4	; 0x04
    3a80:	1b 81       	ldd	r17, Y+3	; 0x03
    3a82:	aa 81       	ldd	r26, Y+2	; 0x02
    3a84:	b9 81       	ldd	r27, Y+1	; 0x01
    3a86:	ce 0f       	add	r28, r30
    3a88:	d1 1d       	adc	r29, r1
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	ed 01       	movw	r28, r26
    3a96:	08 95       	ret

00003a98 <_exit>:
    3a98:	f8 94       	cli

00003a9a <__stop_program>:
    3a9a:	ff cf       	rjmp	.-2      	; 0x3a9a <__stop_program>
